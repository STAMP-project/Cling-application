import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        short short49 = classReader26.readShort(19);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        int int72 = classWriter52.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter52.visitAnnotation("", true);
        byte[] byteArray76 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        java.lang.String str78 = classReader77.getSuperName();
        char[] charArray84 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj85 = classReader77.readConst(6, charArray84);
        java.lang.String str86 = classReader26.readClass(25, charArray84);
        java.lang.String str87 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            short short89 = classReader26.readShort((int) (short) 12342);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12342");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 26729 + "'", short49 == (short) 26729);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj85 + "' != '" + "\001" + "'", obj85, "\001");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitSource("L636727990", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        int int51 = classWriter31.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter31.visitAnnotation("", true);
        byte[] byteArray55 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        short short58 = classReader56.readShort((int) (byte) 0);
        int int60 = classReader56.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(classReader56, 0);
        java.lang.String[] strArray63 = classReader56.getInterfaces();
        byte[] byteArray64 = classReader56.b;
        int int65 = classReader56.getAccess();
        short short67 = classReader56.readShort((int) (byte) 100);
        java.lang.String[] strArray68 = classReader56.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor28.visit("L334680853", (java.lang.Object) classReader56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@40149b5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) -13570 + "'", short58 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2560 + "'", int60 == 2560);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) 1 + "'", short67 == (short) 1);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        int int14 = classReader12.getAccess();
        int int16 = classReader12.readByte(18);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = classReader12.readLong(1000814);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        byte[] byteArray7 = classWriter1.toByteArray();
        classWriter1.visitSource("L2039247828", "L364320201");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        classWriter13.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = classWriter13.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        classWriter31.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        classWriter42.visitOuterClass("hi!", "", "");
        int int54 = classWriter42.newNameType("hi!", "hi!");
        int int57 = classWriter42.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        classWriter42.visit(5, 6, "", "", "", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter31.visitMethod((int) (short) 0, "", "", "", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter13.visitMethod((int) '#', "L242883751", "L728847777", "L728847777", strArray78);
        int int84 = classWriter13.newClass("L1287376048");
        byte[] byteArray85 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray85);
        org.mockito.asm.ClassWriter classWriter89 = new org.mockito.asm.ClassWriter(classReader87, (int) (byte) 100);
        int int90 = classWriter1.newConst((java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 4, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 17, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 1, 0, 10, 76, 55, 50, 56, 56, 52, 55, 55, 55, 55, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 7, 0, 11, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 35, 0, 9, 0, 10, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 14, 0, 0, 0, 2, 0, 10, 0, 2, 0, 15, 0, 0, 0, 4, 0, 6, 0, 7, 0, 16, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 6 + "'", int90 == 6);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        int int35 = classReader26.readUnsignedShort(19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26729 + "'", int35 == 26729);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter45.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L264795169", "L680573325");
        classWriter1.visitSource("L1013343419", "L1142940414");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        int int65 = classWriter45.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter45.visitAnnotation("", true);
        byte[] byteArray69 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        int int71 = classReader70.getAccess();
        byte[] byteArray72 = classReader70.b;
        byte[] byteArray73 = classReader70.b;
        byte[] byteArray74 = classReader70.b;
        java.lang.String[] strArray75 = classReader70.getInterfaces();
        classWriter38.visit(0, 13, "L590888141", "", "L1413182688", strArray75);
        classWriter1.visit(104, 256, "L1377529303", "L714852893", "L749737959", strArray75);
        org.mockito.asm.Attribute attribute78 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray75);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter12.visitMethod(0, "", "", "hi!", strArray26);
        int int32 = classWriter12.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter12.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter38.visitAnnotation("hi!", false);
        annotationVisitor65.visitEnum("hi!", "", "hi!");
        annotationVisitor35.visit("", (java.lang.Object) "hi!");
        int int71 = classWriter1.newConst((java.lang.Object) "");
        classWriter1.visitOuterClass("L2002866190", "L152278810", "L1878780030");
        int int77 = classWriter1.newClass("L959183788");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 14 + "'", int77 == 14);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        long long33 = classReader26.readLong(2);
        java.lang.String str34 = classReader26.getSuperName();
        java.lang.String str35 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-4990551337079930870L) + "'", long33 == (-4990551337079930870L));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitOuterClass("L1758992365", "L919303058", "L976656549");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter24.newMethod("", "", "hi!", true);
        classWriter24.visitOuterClass("hi!", "", "");
        int int36 = classWriter24.newNameType("hi!", "hi!");
        int int39 = classWriter24.newNameType("hi!", "");
        java.lang.Object obj44 = null;
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter24.visitField(9, "L1601838046", "L2062266913", "L680573325", obj44);
        classWriter24.visitOuterClass("L1847716459", "L275489687", "L680573325");
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        int int82 = classReader81.getAccess();
        byte[] byteArray83 = classReader81.b;
        byte[] byteArray84 = classReader81.b;
        byte[] byteArray85 = classReader81.b;
        java.lang.String[] strArray86 = classReader81.getInterfaces();
        classWriter24.visit(512, 202, "L1238273264", "L721083102", "L1591899557", strArray86);
        classWriter1.visit((int) (short) 2, (int) (short) 2387, "L1572959883", "L1667109172", "hi!", strArray86);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray86);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        short short38 = classReader26.readShort(23);
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.readUnsignedShort(19506);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19506");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 1 + "'", short38 == (short) 1);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(10);
        classWriter1.visitInnerClass("L745089702", "L1855754182", "L1009580268", 5);
        classWriter1.visitOuterClass("L143726105", "L1357812716", "L838556944");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L607357044", false);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter20.visitMethod(0, "", "", "hi!", strArray34);
        int int40 = classWriter20.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter20.visitAnnotation("", true);
        byte[] byteArray44 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        short short47 = classReader45.readShort((int) (byte) 0);
        int int49 = classReader45.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader45, 0);
        java.lang.String[] strArray52 = classReader45.getInterfaces();
        byte[] byteArray53 = classReader45.b;
        java.lang.String str54 = classReader45.getSuperName();
        java.lang.String[] strArray55 = classReader45.getInterfaces();
        long long57 = classReader45.readLong(100);
        long long59 = classReader45.readLong((int) ' ');
        java.lang.String str60 = classReader45.getSuperName();
        java.lang.String[] strArray61 = classReader45.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(33, "L139544873", "L128175309", "L1157099023", strArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) -13570 + "'", short47 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2560 + "'", int49 == 2560);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 281474976776193L + "'", long57 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 720578139469709322L + "'", long59 == 720578139469709322L);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter1.visitAnnotation("L2014806404", true);
        byte[] byteArray33 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter39.newConst((java.lang.Object) (byte) 0);
        int int45 = classWriter39.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray46 = classWriter39.toByteArray();
        classWriter39.visitInnerClass("L1162526488", "L1936126716", "L1221801792", (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        classWriter58.visitOuterClass("hi!", "", "");
        int int70 = classWriter58.newNameType("hi!", "hi!");
        int int73 = classWriter58.newNameType("hi!", "");
        java.lang.Object obj78 = null;
        org.mockito.asm.FieldVisitor fieldVisitor79 = classWriter58.visitField(9, "L1601838046", "L2062266913", "L680573325", obj78);
        classWriter58.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter58.visitSource("L75359331", "L1930348385");
        classWriter58.visitEnd();
        byte[] byteArray88 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader91 = new org.mockito.asm.ClassReader(byteArray88, 0, (int) (short) -1);
        java.lang.String[] strArray92 = classReader91.getInterfaces();
        classWriter39.visit(875903244, 11, "L1589078908", "L1471680267", "L529122729", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 4, "L1283200231", "L375606602", "L1403549550", strArray92);
        classWriter1.visitInnerClass("L1742400311", "L624707113", "L680573325", 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor79);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter1.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int38 = classWriter1.newNameType("L749737959", "L1601838046");
        classWriter1.visitInnerClass("L2000102916", "L1028579140", "", 100);
        int int48 = classWriter1.newMethod("L1004763019", "L1930348385", "L1628304347", false);
        byte[] byteArray49 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray49, 204, (int) (short) 2387);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 24 + "'", int48 == 24);
        org.junit.Assert.assertNotNull(byteArray49);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        methodVisitor16.visitFieldInsn((int) (short) 17784, "L59063553", "L1505866272", "L238476442");
        methodVisitor16.visitVarInsn(9, 8);
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L661498059" + "'", str75, "L661498059");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitFieldInsn(0, "L1162526488", "L1601838046", "");
        methodVisitor62.visitTypeInsn((int) (short) 100, "L1004763019");
        methodVisitor62.visitMaxs(8, 12592);
        methodVisitor62.visitIntInsn(131076, (int) (short) 12848);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor34.visitArray("\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor36.visitArray("L693982720");
        annotationVisitor38.visitEnum("", "L1075066296", "L1520330258");
        annotationVisitor38.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        classWriter1.visitSource("L953714147", "L1495045421");
        classWriter1.visitEnd();
        int int26 = classWriter1.newClass("L1540520089");
        int int30 = classWriter1.newField("L1142762441", "L1223439170", "");
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 24 + "'", int30 == 24);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        short short38 = classReader26.readShort(11);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        int int61 = classWriter41.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter41.visitAnnotation("", true);
        byte[] byteArray65 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        int int67 = classReader66.getAccess();
        byte[] byteArray68 = classReader66.b;
        byte[] byteArray69 = classReader66.b;
        byte[] byteArray70 = classReader66.b;
        java.lang.String[] strArray71 = classReader66.getInterfaces();
        char[] charArray78 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj79 = classReader66.readConst((int) (short) 4, charArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = classReader26.readConst(21, charArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + "" + "'", obj79, "");
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader7, (int) '4');
        classWriter13.visitSource("L959574331", "L749737959");
        classWriter13.visitSource("L959574331", "");
        int int23 = classWriter13.newField("L1287617384", "L1040125103", "L529122729");
        byte[] byteArray24 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray24, (int) (short) 3, 779);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader27.readByte(12850);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12850");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 10, 76, 57, 53, 57, 53, 55, 52, 51, 51, 49, 1, 0, 11, 76, 49, 50, 56, 55, 54, 49, 55, 51, 56, 52, 7, 0, 8, 1, 0, 11, 76, 49, 48, 52, 48, 49, 50, 53, 49, 48, 51, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 12, 0, 10, 0, 11, 9, 0, 9, 0, 12, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 2, 0, 7, 0, 15, 0, 0, 0, 0]");
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(105);
        java.lang.String[] strArray7 = null;
        classWriter1.visit(909717811, 0, "L1287376048", "L939302844", "", strArray7);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        methodVisitor37.visitMaxs(13, 254);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField((int) '#', "L680573325", "L624707113", "L782129665", (java.lang.Object) 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("L1076056118", true);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(5);
        classWriter57.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int64 = classWriter57.newClass("");
        byte[] byteArray65 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray65, 0, (int) '#');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter1.visitField(101, "L2067133906", "L586303771", "", (java.lang.Object) classWriter70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@471fdf9d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        int int29 = classWriter1.newMethod("L1489256177", "L837588174", "L1430234734", true);
        byte[] byteArray30 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 11, 76, 49, 52, 56, 57, 50, 53, 54, 49, 55, 55, 7, 0, 7, 1, 0, 10, 76, 56, 51, 55, 53, 56, 56, 49, 55, 52, 1, 0, 11, 76, 49, 52, 51, 48, 50, 51, 52, 55, 51, 52, 12, 0, 9, 0, 10, 11, 0, 8, 0, 11, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 14, 0, 0, 0, 2, 0, 3, 0, 1, 0, 15, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readInt((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 65536 + "'", int32 == 65536);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            short short17 = classReader15.readShort(163);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 163");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitInnerClass("L1497855016", "L2037791973", "L1028579140", 11);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter1.visitAnnotation("L1221801792", true);
        int int74 = classWriter1.newConst((java.lang.Object) 1126999590795363L);
        byte[] byteArray75 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray75, 62, 62);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 18 + "'", int74 == 18);
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        classWriter34.visitOuterClass("L4531833", "L1700698598", "L664111037");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(5);
        classWriter44.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int51 = classWriter44.newClass("");
        int int54 = classWriter44.newNameType("L1847716459", "");
        classWriter44.visitEnd();
        byte[] byteArray56 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        int int59 = classReader57.readByte((int) (byte) 0);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter34.visitField(512, "L1372769316", "L1019177379", "L9401833", (java.lang.Object) int59);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = fieldVisitor60.visitAnnotation("L324925920", false);
        annotationVisitor63.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 202 + "'", int59 == 202);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor63);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitMethodInsn((int) (short) -1, "hi!", "hi!", "hi!");
        methodVisitor25.visitMultiANewArrayInsn("L1847716459", 9);
        methodVisitor25.visitFieldInsn(163, "L40714478", "L71945869", "L2037791973");
        org.mockito.asm.Label label46 = null;
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        java.lang.String str48 = label47.toString();
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        methodVisitor65.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor65.visitLabel(label69);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter72.newConst((java.lang.Object) (short) 1);
        classWriter72.visitSource("", "");
        label69.info = "";
        int int79 = label69.getOffset();
        java.lang.Object obj80 = label69.info;
        methodVisitor25.visitTryCatchBlock(label46, label47, label69, "L667379532");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor25.visitParameterAnnotation(17784, "L661193128", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "L2091467664" + "'", str48, "L2091467664");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + "" + "'", obj80, "");
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader39, (int) (short) -1);
        int int42 = classReader39.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = classReader39.readByte((int) (short) 2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("hi!", "L809431533", "L636727990");
        int int21 = classWriter1.newMethod("L815371585", "L71360886", "L934106996", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 17 + "'", int21 == 17);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIincInsn(15, 23);
        methodVisitor16.visitEnd();
        methodVisitor16.visitInsn(21);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor16.visitAnnotation("L523453504", true);
        methodVisitor16.visitTypeInsn(23, "L826610285");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L237538368" + "'", str75, "L237538368");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor22.visitAnnotation("L136145448", true);
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor22.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int38 = classReader26.header;
        short short40 = classReader26.readShort((int) 'a');
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 9);
        int int43 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader26.readUnsignedShort(1698786926);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1698786926");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        label56.info = strArray72;
        classWriter1.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray72);
        classWriter1.visitSource("L59063553", "L110679537");
        classWriter1.visitInnerClass("L1162526488", "L3043237", "L59063553", (int) '4');
        classWriter1.visitOuterClass("L2117999297", "L41216715", "L694914824");
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitIntInsn((int) (short) 7, (int) (short) 1792);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label55 = new org.mockito.asm.Label();
        methodVisitor51.visitLabel(label55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter58.newConst((java.lang.Object) (short) 1);
        classWriter58.visitSource("", "");
        label55.info = "";
        int int65 = label55.getOffset();
        java.lang.String str66 = label55.toString();
        java.lang.Object obj67 = label55.info;
        int int68 = label55.getOffset();
        int int69 = label55.getOffset();
        label55.info = "L146399554";
        org.mockito.asm.Label label72 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLocalVariable("", "L1007542453", "L644932592", label55, label72, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "L834825725" + "'", str66, "L834825725");
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + "" + "'", obj67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray7, 0, 156461415);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader10.readByte((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        classWriter67.visitOuterClass("hi!", "", "");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn(16842755, (int) (short) 7);
        methodVisitor16.visitMaxs(3072, 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int35 = classReader26.readByte(0);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) -13570);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 202 + "'", int35 == 202);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("", true);
        byte[] byteArray79 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        short short82 = classReader80.readShort((int) (byte) 0);
        int int84 = classReader80.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader80, 0);
        java.lang.String[] strArray87 = classReader80.getInterfaces();
        byte[] byteArray88 = classReader80.b;
        java.lang.String str89 = classReader80.getSuperName();
        long long91 = classReader80.readLong(14);
        java.lang.String str92 = classReader80.getSuperName();
        int int93 = classReader80.header;
        int int94 = classReader80.getAccess();
        byte[] byteArray95 = classReader80.b;
        label51.info = classReader80;
        int int97 = classReader80.getAccess();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) -13570 + "'", short82 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2560 + "'", int84 == 2560);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 282574545512737L + "'", long91 == 282574545512737L);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 90 + "'", int93 == 90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        methodVisitor51.visitMethodInsn((int) '4', "L809431533", "L897597087", "L636727990");
        methodVisitor51.visitMethodInsn(16, "L1221801792", "L728847777", "L1208026886");
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter69.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray72 = classWriter69.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray72, (int) (byte) 0, 1);
        int int76 = classReader75.getAccess();
        int int78 = classReader75.readByte(16);
        java.lang.String[] strArray79 = classReader75.getInterfaces();
        org.mockito.asm.Label label81 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter(5);
        classWriter83.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray88 = classWriter83.toByteArray();
        label81.info = byteArray88;
        org.mockito.asm.ClassReader classReader90 = new org.mockito.asm.ClassReader(byteArray88);
        int int92 = classReader90.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter94 = new org.mockito.asm.ClassWriter(classReader90, 12);
        int int95 = classReader90.header;
        java.lang.String str96 = classReader90.getSuperName();
        java.lang.String[] strArray97 = classReader90.getInterfaces();
        methodVisitor51.visitFrame(554434561, 0, (java.lang.Object[]) strArray79, 1792, (java.lang.Object[]) strArray97);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 78 + "'", int95 == 78);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        annotationVisitor24.visitEnum("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = annotationVisitor24.visitArray("L2000102916");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        short short60 = classReader58.readShort((int) (byte) 0);
        int int61 = classReader58.header;
        int int63 = classReader58.readInt(19);
        int int64 = classReader58.header;
        byte[] byteArray65 = classReader58.b;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor24.visit("L1855754182", (java.lang.Object) classReader58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@3cc3a60e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) -13570 + "'", short60 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 90 + "'", int61 == 90);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1751720204 + "'", int63 == 1751720204);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 90 + "'", int64 == 90);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int34 = classReader26.header;
        short short36 = classReader26.readShort(0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 17784);
        byte[] byteArray39 = classWriter38.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray39, 156461415, 1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        int int25 = classWriter1.newField("L1013343419", "L85690983", "L620334303");
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1393085977", "L181903634", "L1093675238");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter36.visitAnnotation("hi!", false);
        int int67 = classWriter36.newField("L809431533", "L636727990", "L636727990");
        classWriter36.visitInnerClass("L275489687", "L728847777", "", (int) (byte) 1);
        classWriter36.visitOuterClass("L1368800213", "L202294627", "L871448529");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField((int) (byte) 100, "L1442680030", "L161312276", "L1456483440", (java.lang.Object) classWriter36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@317c5808");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 3, 0, 0, 0, 1, 1, 0, 10, 76, 50, 54, 52, 55, 57, 53, 49, 54, 57, 1, 0, 11, 76, 49, 48, 49, 51, 51, 52, 51, 52, 49, 57, 7, 0, 11, 1, 0, 9, 76, 56, 53, 54, 57, 48, 57, 56, 51, 1, 0, 10, 76, 54, 50, 48, 51, 51, 52, 51, 48, 51, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 4, 0, 6, 0, 7, 0, 18, 0, 0, 0, 10, 0, 2, 0, 8, 0, 0, 0, 10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        java.lang.String[] strArray44 = new java.lang.String[] { "L1899113546", "L397385256", "L4531833", "L1511591972" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter1.visitMethod(2, "L1774908040", "L2142211483", "L284303737", strArray44);
        methodVisitor45.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter29.newConst((java.lang.Object) (short) 1);
        int int33 = classWriter29.newUTF8("hi!");
        classWriter29.visitOuterClass("L728847777", "\001", "L809431533");
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter1.visitField((int) (short) 1, "L1628304347", "L1938659678", "L1601838046", (java.lang.Object) "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = fieldVisitor38.visitAnnotation("L75359331", false);
        fieldVisitor38.visitEnd();
        org.mockito.asm.Attribute attribute43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor38.visitAttribute(attribute43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        classWriter1.visitInnerClass("", "L1028579140", "", 8);
        int int40 = classWriter1.newField("L1713728870", "L1943853589", "L158524288");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        char[] charArray38 = new char[] { '4', '#', '#' };
        java.lang.String str39 = classReader26.readUTF8(14, charArray38);
        byte[] byteArray40 = classReader26.b;
        java.lang.String str41 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader26, 17);
        java.lang.String str44 = classReader26.getSuperName();
        int int45 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int47 = classReader26.getItem((int) (short) 13063);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13063");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(5);
        classWriter88.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField(256, "L1700698598", "L1889100462", "L1715729238", (java.lang.Object) "hi!");
        fieldVisitor94.visitEnd();
        fieldVisitor94.visitEnd();
        fieldVisitor94.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(fieldVisitor94);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label16 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        label16.info = strArray32;
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod((int) (short) 100, "", "hi!", "", strArray32);
        classWriter1.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray32);
        int int38 = classWriter1.newUTF8("L809431533");
        classWriter1.visitOuterClass("L2127085380", "L1111133036", "L1009580268");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("L674940947", false);
        int int47 = classWriter1.newClass("L1075066296");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1101713360");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        short short31 = classReader26.readShort(8);
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readByte((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readInt(909717811);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 10 + "'", short31 == (short) 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L1429849124", "L535346328", "L110679537", (int) (byte) -1);
        classWriter1.visitInnerClass("L172254079", "L1847716459", "L749737959", 24);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(3, "hi!", "hi!", "hi!", strArray90);
        annotationVisitor65.visit("", (java.lang.Object) "hi!");
        annotationVisitor65.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int95 = classWriter1.newConst((java.lang.Object) annotationVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@110bcabd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        byte[] byteArray47 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L1505866272", "L1889100462", "L1171524151", (int) (short) 4);
        classWriter1.visitOuterClass("L790593526", "L313281740", "L41216715");
        int int58 = classWriter1.newUTF8("L1202802091");
        int int61 = classWriter1.newNameType("L626622958", "L1483790775");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 28 + "'", int58 == 28);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 31 + "'", int61 == 31);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        byte[] byteArray47 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L1505866272", "L1889100462", "L1171524151", (int) (short) 4);
        classWriter1.visitOuterClass("L426422007", "L809431533", "L774045562");
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        int int83 = classWriter63.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter63.visitAnnotation("", true);
        byte[] byteArray87 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        int int89 = classReader88.getAccess();
        java.lang.String[] strArray90 = classReader88.getInterfaces();
        classWriter1.visit(28, 40, "L471701904", "L1796582550", "L430363814", strArray90);
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(strArray90);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L579675851");
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter61.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter61.visitMethod(8, "hi!", "", "", strArray83);
        methodVisitor85.visitIntInsn((int) (short) 1, 6);
        methodVisitor85.visitMaxs((int) (short) 0, 7);
        methodVisitor85.visitMaxs((int) (byte) 1, 7);
        org.mockito.asm.FieldVisitor fieldVisitor95 = classWriter1.visitField(4, "L976656549", "L467340186", "L774045562", (java.lang.Object) 7);
        org.mockito.asm.Attribute attribute96 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor95.visitAttribute(attribute96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertNotNull(methodVisitor85);
        org.junit.Assert.assertNotNull(fieldVisitor95);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        int int52 = classWriter1.newClass("L529122729");
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        methodVisitor73.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter1.visitField(458753, "L1075066296", "L426422007", "L149220781", (java.lang.Object) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor80.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = fieldVisitor80.visitAnnotation("L1490365060", false);
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor80.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 13 + "'", int52 == 13);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
        org.junit.Assert.assertNotNull(fieldVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        classWriter13.visitSource("", "L2000102916");
        int int23 = classWriter13.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter30.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter44.newConst((java.lang.Object) (byte) 0);
        int int47 = classWriter30.newConst((java.lang.Object) int46);
        int int51 = classWriter30.newField("hi!", "", "L809431533");
        java.lang.String[] strArray61 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter30.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray61);
        classWriter13.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray61);
        int int64 = classWriter1.newConst((java.lang.Object) 5);
        int int68 = classWriter1.newField("L1028579140", "", "L2062266913");
        int int73 = classWriter1.newMethod("L590888141", "", "L2127085380", true);
        byte[] byteArray74 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 20, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 3, 0, 0, 0, 5, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 12, 0, 2, 0, 9, 9, 0, 8, 0, 10, 1, 0, 10, 76, 53, 57, 48, 56, 56, 56, 49, 52, 49, 7, 0, 12, 1, 0, 11, 76, 50, 49, 50, 55, 48, 56, 53, 51, 56, 48, 12, 0, 2, 0, 14, 11, 0, 13, 0, 15, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 2, 0, 2, 0, 18, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 0, 19, 0, 0, 0, 10, 0, 1, 0, 4, 0, 4, 0, 5, 0, 10]");
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        java.lang.String[] strArray12 = classReader9.getInterfaces();
        long long14 = classReader9.readLong(3);
        java.lang.String[] strArray15 = classReader9.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader9.readByte(17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17784");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-4755801206503241983L) + "'", long14 == (-4755801206503241983L));
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMultiANewArrayInsn("L1086414642", 512);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String str59 = classReader58.getSuperName();
        char[] charArray65 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj66 = classReader58.readConst(6, charArray65);
        int int68 = classReader58.readUnsignedShort((int) 'a');
        int int69 = classReader58.getAccess();
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader58, (int) (short) 10);
        classWriter71.visitOuterClass("L1358038794", "L1221801792", "L1171524151");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter71.visitAnnotation("L1223439170", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = annotationVisitor78.visitArray("L755844592");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) annotationVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@2e700fdd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + "\001" + "'", obj66, "\001");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readUnsignedShort(29);
        int int35 = classReader26.getAccess();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 512 + "'", int34 == 512);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        int int37 = classReader26.getAccess();
        int int39 = classReader26.readByte(100);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        short short69 = classReader67.readShort((int) (byte) 0);
        int int71 = classReader67.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader67, 0);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader67, 0);
        int int77 = classReader67.readByte((int) (byte) 10);
        char[] charArray82 = new char[] { '#', '4', '4' };
        java.lang.String str83 = classReader67.readUTF8(100, charArray82);
        java.lang.Object obj84 = classReader26.readConst(5, charArray82);
        byte[] byteArray85 = classReader26.b;
        int int87 = classReader26.readInt(18);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) -13570 + "'", short69 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2560 + "'", int71 == 2560);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "\00144");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "\00144");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[\001, 4, 4]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "\001" + "'", obj84, "\001");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 57174305 + "'", int87 == 57174305);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        classWriter1.visitOuterClass("L1017623370", "L75359331", "L1178822359");
        byte[] byteArray35 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1866257035", "L71360886", "L1901131515");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 7, 0, 7, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 1, 0, 11, 76, 49, 51, 54, 56, 55, 48, 56, 48, 52, 52, 12, 0, 9, 0, 10, 1, 0, 11, 76, 49, 48, 49, 55, 54, 50, 51, 51, 55, 48, 7, 0, 12, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 11, 76, 49, 49, 55, 56, 56, 50, 50, 51, 53, 57, 12, 0, 14, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 1, 0, 17, 0, 0, 0, 4, 0, 13, 0, 16]");
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        int int63 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int65 = classWriter1.newUTF8("L1142940414");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L809431533", "L636727990", "L636727990");
        classWriter1.visitInnerClass("L1847716459", "L976656549", "L2062266913", 9);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        classWriter1.visit((int) ' ', 2, "", "L71945869", "L667379532", strArray58);
        classWriter1.visitEnd();
        classWriter1.visitSource("L1372769316", "L1264051504");
        classWriter1.visitSource("L1357812716", "L1370122910");
        classWriter1.visitSource("L1028510473", "L1850773126");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        int int34 = classReader29.readInt(20);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader29.readInt(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1763773440 + "'", int34 == 1763773440);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter1.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        int int26 = classWriter1.newClass("L721083102");
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField(21, "L1192381465", "L9401833", "L1178822359", (java.lang.Object) "L207820460");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = fieldVisitor32.visitAnnotation("L1430950246", false);
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor32.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitInsn(63);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(32, 26913);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, (-21316096));
        short short35 = classReader26.readShort(21);
        // The following exception was thrown during execution in test generation
        try {
            short short37 = classReader26.readShort(67764226);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 67764226");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 8460 + "'", short35 == (short) 8460);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.getItem(1763772160);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1763772160");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        byte[] byteArray24 = classWriter1.toByteArray();
        int int27 = classWriter1.newNameType("", "L77196307");
        classWriter1.visitOuterClass("L1931763549", "L1033617867", "L805920804");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 10, 76, 49, 49, 48, 54, 55, 57, 53, 51, 55, 7, 0, 9, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 11, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 2, 0, 3, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 6, 0, 7, 0, 17, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, -54, -2]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter34.visitAnnotation("L1715729238", false);
        annotationVisitor37.visitEnum("L1769982856", "L626622958", "L918742398");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        classWriter1.visitSource("L264795169", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1307358075", false);
        int int57 = classWriter1.newMethod("L579675851", "L1589078908", "L535346328", true);
        classWriter1.visitSource("L745089702", "");
        org.mockito.asm.Attribute attribute61 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        classWriter11.visitInnerClass("\001", "L535346328", "L367225907", (int) '#');
        int int20 = classWriter11.newField("L150818074", "L594418938", "L1386483578");
        int int22 = classWriter11.newUTF8("L6818069");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 17 + "'", int20 == 17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 18 + "'", int22 == 18);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 100);
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        methodVisitor48.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor48.visitCode();
        methodVisitor48.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        java.lang.String str81 = label79.toString();
        methodVisitor48.visitLineNumber((int) (short) -1, label79);
        label79.info = (-1.0f);
        java.lang.String str85 = label79.toString();
        methodVisitor25.visitLabel(label79);
        methodVisitor25.visitFieldInsn(202, "L224241486", "L665737352", "L1642186947");
        methodVisitor25.visitFieldInsn((int) (short) -1, "L1598501322", "L1502885011", "L2039587225");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1598063226" + "'", str81, "L1598063226");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1598063226" + "'", str85, "L1598063226");
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        classWriter23.visitSource("", "");
        label20.info = "";
        int int30 = label20.getOffset();
        java.lang.String str31 = label20.toString();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter33.visitAnnotation("hi!", false);
        label20.info = classWriter33;
        org.mockito.asm.Attribute attribute62 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter33.visitAttribute(attribute62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "L1532104424" + "'", str31, "L1532104424");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L1287376048", false);
        classWriter1.visitSource("L2014806404", "L2000102916");
        classWriter1.visitEnd();
        int int92 = classWriter1.newUTF8("L984535763");
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = annotationVisitor95.visitAnnotation("L324925920", "L1483790775");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 16 + "'", int92 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor95);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor25.visitAnnotation("L2089731244", false);
        methodVisitor25.visitTypeInsn(33555457, "L1657088012");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        short short31 = classReader26.readShort(17);
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 19506);
        classWriter35.visitSource("L149220781", "L2132845283");
        classWriter35.visitOuterClass("L1973775324", "L709341642", "L782129665");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 3 + "'", short31 == (short) 3);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        long long12 = classReader7.readLong(4);
        byte[] byteArray13 = classReader7.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(classReader7, 19);
        byte[] byteArray16 = classReader7.b;
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray16, 29441, (int) (short) 780);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 459008L + "'", long12 == 459008L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L428215077", "", "\001", (int) (byte) 100);
        classWriter1.visitOuterClass("L9401833", "L1058109766", "L755949095");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L1901444169", false);
        java.lang.Class<?> wildcardClass22 = annotationVisitor21.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int31 = classWriter1.newNameType("L624707113", "L897597087");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        classWriter33.visitOuterClass("hi!", "", "");
        int int45 = classWriter33.newNameType("hi!", "hi!");
        int int48 = classWriter33.newNameType("hi!", "");
        java.lang.Object obj53 = null;
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter33.visitField(9, "L1601838046", "L2062266913", "L680573325", obj53);
        classWriter33.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter33.visitSource("L75359331", "L1930348385");
        classWriter33.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int63 = classWriter1.newConst((java.lang.Object) classWriter33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@35a06389");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor54);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        classWriter31.visitSource("L120720304", "L2039587225");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (byte) 0);
        int int44 = classWriter40.newUTF8("");
        classWriter40.visitEnd();
        int int49 = classWriter40.newField("L488861128", "L1292845306", "L3043237");
        java.lang.String[] strArray55 = null;
        classWriter40.visit(10, 156461415, "L2127085380", "L81546457", "L1936126716", strArray55);
        classWriter40.visitEnd();
        int int60 = classWriter40.newNameType("L936297181", "L838653747");
        org.mockito.asm.FieldVisitor fieldVisitor61 = classWriter31.visitField(3, "L2012296629", "L1423401218", "L535346328", (java.lang.Object) int60);
        int int64 = classWriter31.newNameType("L1878780030", "L1549317494");
        classWriter31.visitInnerClass("L976618452", "L1488028553", "L1562158187", 24);
        classWriter31.visitEnd();
        classWriter31.visitSource("L2001797632", "L1201574820");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
        org.junit.Assert.assertNotNull(fieldVisitor61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 17 + "'", int64 == 17);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitTypeInsn(19, "L488861128");
        methodVisitor25.visitCode();
        methodVisitor25.visitIincInsn((int) (short) 1, 19506);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        methodVisitor53.visitCode();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        java.lang.String str77 = label75.toString();
        label75.info = ' ';
        java.lang.Object obj80 = label75.info;
        methodVisitor53.visitLabel(label75);
        org.mockito.asm.Label label82 = new org.mockito.asm.Label();
        java.lang.String str83 = label82.toString();
        label82.info = "L2014806404";
        label75.info = label82;
        java.lang.Object obj87 = label75.info;
        java.lang.Object obj88 = label75.info;
        int int89 = label75.getOffset();
        methodVisitor25.visitLabel(label75);
        java.lang.String str91 = label75.toString();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "L1962138618" + "'", str77, "L1962138618");
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + ' ' + "'", obj80, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L139573601" + "'", str83, "L139573601");
        org.junit.Assert.assertNotNull(obj87);
// flaky:         org.junit.Assert.assertEquals(obj87.toString(), "L139573601");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "L139573601");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "L139573601");
        org.junit.Assert.assertNotNull(obj88);
// flaky:         org.junit.Assert.assertEquals(obj88.toString(), "L139573601");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "L139573601");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "L139573601");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L1962138618" + "'", str91, "L1962138618");
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1793);
        classWriter1.visitInnerClass("", "L1017623370", "L897597087", (-21316096));
        java.lang.Object obj11 = null;
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField((int) 'a', "L426422007", "L1642186947", "L419471195", obj11);
        org.mockito.asm.Attribute attribute13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldVisitor12);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        java.lang.String str34 = classReader26.getSuperName();
        java.lang.String str35 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            short short37 = classReader26.readShort(13876);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13876");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1793);
        classWriter1.visitInnerClass("", "L1017623370", "L897597087", (-21316096));
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L972384730", true);
        byte[] byteArray10 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor13.visitArray("L919303058");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        int int28 = classWriter18.newNameType("L1847716459", "");
        classWriter18.visitEnd();
        classWriter18.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int37 = classWriter18.newField("L529122729", "L488861128", "L976656549");
        byte[] byteArray38 = classWriter18.toByteArray();
        int int43 = classWriter18.newMethod("L2034910382", "L1132227206", "hi!", true);
        classWriter18.visitOuterClass("L1669912474", "L2078535908", "L664111037");
        classWriter18.visitSource("L1520330258", "L1004763019");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor15.visit("", (java.lang.Object) classWriter18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@7e28d51e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 11, 76, 49, 48, 49, 55, 54, 50, 51, 51, 55, 48, 7, 0, 3, 1, 0, 10, 76, 56, 57, 55, 53, 57, 55, 48, 56, 55, 1, 0, 10, 76, 57, 55, 50, 51, 56, 52, 55, 51, 48, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 5, -66, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 6, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 4, 0, 8, 0, 10, 0, 18, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        classWriter1.visitSource("L264795169", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1307358075", false);
        classWriter1.visitInnerClass("L2000102916", "L999961130", "L278437344", 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter1.visitAnnotation("L2142211483", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        long long34 = classReader26.readLong(6);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readUnsignedShort(458753);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 458753");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 42966450183L + "'", long34 == 42966450183L);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        methodVisitor51.visitMethodInsn((int) '4', "L809431533", "L897597087", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = methodVisitor51.visitAnnotation("L1473010420", false);
        methodVisitor51.visitIincInsn(13876, 1792);
        org.mockito.asm.Attribute attribute67 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor51.visitAttribute(attribute67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor63);
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitIincInsn((int) (byte) 10, (int) (short) 1792);
        methodVisitor25.visitFieldInsn(163, "L2022616480", "L1566658664", "L1899113546");
        methodVisitor25.visitTypeInsn((int) (byte) 10, "L1642186947");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor25.visitParameterAnnotation(62, "L1611366333", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        java.lang.Object[] objArray20 = null;
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter23.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        short short62 = classReader60.readShort((int) (byte) 0);
        int int64 = classReader60.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader60, 0);
        java.lang.String[] strArray67 = classReader60.getInterfaces();
        classWriter23.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray67);
        methodVisitor17.visitFrame(8, 15, objArray20, (-889275714), (java.lang.Object[]) strArray67);
        methodVisitor17.visitInsn(256);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor17.visitLineNumber(872, label73);
        java.lang.Object obj75 = label73.info;
        java.lang.String str76 = label73.toString();
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(0);
        int int80 = classWriter78.newConst((java.lang.Object) (short) 1);
        classWriter78.visitSource("", "L2000102916");
        int int88 = classWriter78.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray89 = classWriter78.toByteArray();
        classWriter78.visitSource("L157434537", "L495165811");
        label73.info = classWriter78;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) -13570 + "'", short62 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2560 + "'", int64 == 2560);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNull(obj75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L765138463" + "'", str76, "L765138463");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 7 + "'", int88 == 7);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        java.lang.String str32 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = classReader26.readClass(2, charArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47806");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        classWriter1.visitOuterClass("L1387910543", "L897597087", "L1013343419");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(5);
        classWriter31.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int38 = classWriter31.newClass("");
        int int41 = classWriter31.newNameType("L1847716459", "");
        int int43 = classWriter31.newUTF8("L1132227206");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter31.visitAnnotation("L838653747", false);
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(256, "L1974208773", "L4531833", "L1228081592", (java.lang.Object) false);
        fieldVisitor47.visitEnd();
        org.mockito.asm.Attribute attribute49 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor47.visitAttribute(attribute49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 24, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 51, 56, 55, 57, 49, 48, 53, 52, 51, 7, 0, 17, 1, 0, 10, 76, 56, 57, 55, 53, 57, 55, 48, 56, 55, 1, 0, 11, 76, 49, 48, 49, 51, 51, 52, 51, 52, 49, 57, 12, 0, 19, 0, 20, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 22, 0, 0, 0, 4, 0, 18, 0, 21, 0, 23, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(fieldVisitor47);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        byte[] byteArray47 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L1505866272", "L1889100462", "L1171524151", (int) (short) 4);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter59.visitMethod(0, "", "", "hi!", strArray73);
        int int79 = classWriter59.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter59.visitAnnotation("", true);
        byte[] byteArray83 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        java.lang.String str85 = classReader84.getSuperName();
        int int86 = classReader84.header;
        java.lang.String[] strArray87 = classReader84.getInterfaces();
        classWriter1.visit(1, 14, "L859506825", "L2069898161", "L831655905", strArray87);
        byte[] byteArray89 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 6 + "'", int79 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 90 + "'", int86 == 90);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String[] strArray12 = classReader7.getInterfaces();
        long long14 = classReader7.readLong(9);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader7.getItem(57174305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57174305");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 504684681765204022L + "'", long14 == 504684681765204022L);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        short short83 = classReader81.readShort((int) (byte) 0);
        int int85 = classReader81.readUnsignedShort((int) ' ');
        long long87 = classReader81.readLong((int) '#');
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter1.visitField(10, "L1847716459", "", "L749737959", (java.lang.Object) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = fieldVisitor88.visitAnnotation("L2000102916", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = fieldVisitor88.visitAnnotation("L238640077", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = fieldVisitor88.visitAnnotation("L203863779", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) -13570 + "'", short83 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2560 + "'", int85 == 2560);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1126999590795363L + "'", long87 == 1126999590795363L);
        org.junit.Assert.assertNotNull(fieldVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        methodVisitor37.visitMaxs(13, 254);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField((int) '#', "L680573325", "L624707113", "L782129665", (java.lang.Object) 254);
        classWriter1.visitEnd();
        java.lang.String[] strArray55 = null;
        classWriter1.visit(24, 34, "", "L313281740", "L1330884173", strArray55);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor48);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 9);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        int int41 = classReader26.getAccess();
        int int42 = classReader26.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        classWriter31.visitSource("L120720304", "L2039587225");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (byte) 0);
        int int44 = classWriter40.newUTF8("");
        classWriter40.visitEnd();
        int int49 = classWriter40.newField("L488861128", "L1292845306", "L3043237");
        java.lang.String[] strArray55 = null;
        classWriter40.visit(10, 156461415, "L2127085380", "L81546457", "L1936126716", strArray55);
        classWriter40.visitEnd();
        int int60 = classWriter40.newNameType("L936297181", "L838653747");
        org.mockito.asm.FieldVisitor fieldVisitor61 = classWriter31.visitField(3, "L2012296629", "L1423401218", "L535346328", (java.lang.Object) int60);
        int int64 = classWriter31.newNameType("L1878780030", "L1549317494");
        classWriter31.visitInnerClass("L976618452", "L1488028553", "L1562158187", 24);
        int int71 = classWriter31.newClass("L1807127249");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
        org.junit.Assert.assertNotNull(fieldVisitor61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 17 + "'", int64 == 17);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 24 + "'", int71 == 24);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        int int32 = classWriter1.newUTF8("L1847716459");
        byte[] byteArray33 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 7, 0, 7, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 1, 0, 11, 76, 49, 51, 54, 56, 55, 48, 56, 48, 52, 52, 12, 0, 9, 0, 10, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 1, 0, 12, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(202);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        classWriter8.visitOuterClass("hi!", "", "");
        int int20 = classWriter8.newNameType("hi!", "hi!");
        int int22 = classWriter8.newUTF8("hi!");
        classWriter8.visitSource("hi!", "");
        int int29 = classWriter8.newField("L1715729238", "", "L1292845306");
        int int33 = classWriter8.newField("L1930348385", "L624707113", "L755844592");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((-1));
        classWriter40.visitInnerClass("hi!", "L488861128", "L624707113", 0);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        classWriter40.visit((int) ' ', 10, "L120720304", "L667379532", "L4531833", strArray66);
        classWriter8.visit(19, 51966, "L172254079", "L1132227206", "L809431533", strArray66);
        classWriter1.visit(0, 2561, "L1221801792", "L541901146", "L1789245551", strArray66);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter1.visitAnnotation("L2039247828", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = annotationVisitor73.visitAnnotation("L989364881", "L1591899557");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 13 + "'", int29 == 13);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        int int34 = classReader26.getAccess();
        int int35 = classReader26.header;
        int int36 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            short short38 = classReader26.readShort((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 90 + "'", int35 == 90);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        // The following exception was thrown during execution in test generation
        try {
            short short34 = classReader29.readShort(161);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 161");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        int int32 = classWriter1.newUTF8("L1847716459");
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitInnerClass("L1497855016", "L2037791973", "L1028579140", 11);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter1.visitAnnotation("L1221801792", true);
        int int76 = classWriter1.newField("L428215077", "L1169247122", "L749737959");
        classWriter1.visitSource("L1688164825", "L110679537");
        classWriter1.visitInnerClass("L1877128533", "L1790809036", "L272096973", 33555457);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(5);
        classWriter86.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor97 = classWriter86.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        fieldVisitor97.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int99 = classWriter1.newConst((java.lang.Object) fieldVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.FieldWriter@54bf8101");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 23 + "'", int76 == 23);
        org.junit.Assert.assertNotNull(fieldVisitor97);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        classWriter36.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        classWriter47.visitOuterClass("hi!", "", "");
        int int59 = classWriter47.newNameType("hi!", "hi!");
        int int62 = classWriter47.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        classWriter47.visit(5, 6, "", "", "", strArray83);
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter36.visitMethod((int) (short) 0, "", "", "", strArray83);
        classWriter1.visit((int) '4', (int) (short) -1, "L2062266913", "L2062266913", "L680573325", strArray83);
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter(9);
        org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField(3, "L976656549", "L1075066296", "L728847777", (java.lang.Object) 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = fieldVisitor94.visitAnnotation("L590888141", false);
        fieldVisitor94.visitEnd();
        fieldVisitor94.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(fieldVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter10.newConst((java.lang.Object) (short) 1);
        int int14 = classWriter10.newUTF8("hi!");
        int int19 = classWriter10.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        classWriter26.visitSource("", "L2000102916");
        int int36 = classWriter26.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        classWriter43.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter43.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter57.newConst((java.lang.Object) (byte) 0);
        int int60 = classWriter43.newConst((java.lang.Object) int59);
        int int64 = classWriter43.newField("hi!", "", "L809431533");
        java.lang.String[] strArray74 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter43.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray74);
        classWriter26.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray74);
        classWriter10.visit(254, 0, "\001", "L426422007", "L59063553", strArray74);
        classWriter1.visit(40, (int) (short) 3072, "L1435737877", "L590888141", "L897597087", strArray74);
        classWriter1.visitEnd();
        int int81 = classWriter1.newClass("L1611208075");
        classWriter1.visitInnerClass("L495554022", "L1091409599", "L721083102", 101);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 18 + "'", int81 == 18);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        classWriter1.visitInnerClass("L1307358075", "L1688164825", "L181903634", 1694564377);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        methodVisitor38.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = methodVisitor38.visitAnnotationDefault();
        methodVisitor38.visitMaxs(1751720204, 875903244);
        methodVisitor38.visitTypeInsn(26729, "L1952894981");
        methodVisitor38.visitMethodInsn(0, "L2062266913", "L1292845306", "L1083553839");
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(0);
        int int82 = classWriter80.newConst((java.lang.Object) (short) 1);
        classWriter80.visitSource("", "");
        label77.info = "";
        int int87 = label77.getOffset();
        java.lang.Object obj88 = label77.info;
        int int89 = label77.getOffset();
        java.lang.String str90 = label77.toString();
        methodVisitor38.visitJumpInsn((int) (byte) 100, label77);
        org.mockito.asm.FieldVisitor fieldVisitor92 = classWriter1.visitField(15, "L1624549620", "L650167216", "L1516640580", (java.lang.Object) (byte) 100);
        fieldVisitor92.visitEnd();
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + "" + "'", obj88, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L1669124905" + "'", str90, "L1669124905");
        org.junit.Assert.assertNotNull(fieldVisitor92);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        long long33 = classReader26.readLong(0);
        int int34 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.getItem(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3819410108757049344L) + "'", long33 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        classWriter1.visitSource("L264795169", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1307358075", false);
        int int57 = classWriter1.newMethod("L579675851", "L1589078908", "L535346328", true);
        classWriter1.visitSource("L745089702", "");
        classWriter1.visitSource("L242883751", "L2059908172");
        classWriter1.visitInnerClass("L179737210", "L1780214503", "L149220781", (int) (short) 1792);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter1.visitAnnotation("L1275984428", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1438974949", false);
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L284303737", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor13.visitArray("L972384730");
        annotationVisitor13.visitEnum("L1315842236", "L450189616", "L407879786");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int8 = classWriter3.newMethod("", "", "hi!", true);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor18 = classWriter3.visitMethod(0, "", "", "hi!", strArray17);
        methodVisitor18.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor18.visitCode();
        methodVisitor18.visitIincInsn(0, 5);
        int int28 = classWriter1.newConst((java.lang.Object) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("\000", true);
        int int35 = classWriter1.newField("L1370122910", "L1967276318", "L727709537");
        int int38 = classWriter1.newNameType("L1482145872", "L919303058");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodVisitor18);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIntInsn((int) (short) 1792, 18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        java.lang.String str34 = classReader26.getSuperName();
        java.lang.String[] strArray35 = classReader26.getInterfaces();
        int int37 = classReader26.readUnsignedShort(13);
        java.lang.String str38 = classReader26.getSuperName();
        java.lang.String str39 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1792 + "'", int37 == 1792);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readInt(4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn(0, 10);
        methodVisitor25.visitMaxs(5, (-1));
        methodVisitor25.visitMultiANewArrayInsn("L1132227206", (int) (short) -13570);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        methodVisitor25.visitVarInsn(51, 0);
        methodVisitor25.visitMultiANewArrayInsn("L1402371927", 28);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIincInsn(15, 23);
        methodVisitor16.visitInsn(2560);
        methodVisitor16.visitMaxs(2, 4);
        methodVisitor16.visitIntInsn(78, 0);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L230122205" + "'", str75, "L230122205");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        int int62 = classReader60.readUnsignedShort((int) (byte) 0);
        short short64 = classReader60.readShort(7);
        int int65 = classReader60.header;
        int int67 = classReader60.readInt(19);
        char[] charArray72 = new char[] { '4', '#', '#' };
        java.lang.String str73 = classReader60.readUTF8(14, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = classReader26.readConst((int) (short) 3909, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3909");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 51966 + "'", int62 == 51966);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) 0 + "'", short64 == (short) 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 90 + "'", int65 == 90);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1751720204 + "'", int67 == 1751720204);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitIincInsn(24, 12336);
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        java.lang.String str31 = classReader26.getSuperName();
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        java.lang.String str33 = classReader26.getSuperName();
        int int35 = classReader26.readUnsignedShort(0);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 2387);
        int int39 = classReader26.readInt(31);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader26.getItem(1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1034");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 51966 + "'", int35 == 51966);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 67764226 + "'", int39 == 67764226);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitMultiANewArrayInsn("L1413182688", 12);
        methodVisitor16.visitMethodInsn(78, "L537907644", "", "L2069898161");
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter43.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter43.visitMethod(8, "hi!", "", "", strArray65);
        classWriter43.visitOuterClass("hi!", "", "");
        classWriter43.visitEnd();
        java.lang.String[] strArray80 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter43.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter17.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter1.visitMethod(2561, "L749737959", "L2062266913", "L1368708044", strArray80);
        classWriter1.visitSource("\001", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = classWriter1.visitAnnotation("L2089731244", false);
        annotationVisitor89.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        int int10 = classReader8.readInt(1);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        int int40 = classReader38.readUnsignedShort((int) (byte) 0);
        short short42 = classReader38.readShort(7);
        int int43 = classReader38.header;
        int int45 = classReader38.readInt(19);
        char[] charArray50 = new char[] { '4', '#', '#' };
        java.lang.String str51 = classReader38.readUTF8(14, charArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj52 = classReader8.readConst(0, charArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 4, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-21316096) + "'", int10 == (-21316096));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 51966 + "'", int40 == 51966);
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 0 + "'", short42 == (short) 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 90 + "'", int43 == 90);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1751720204 + "'", int45 == 1751720204);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        int int33 = classReader26.readInt((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            short short35 = classReader26.readShort(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16777223 + "'", int33 == 16777223);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("L841843626", false);
        annotationVisitor7.visitEnum("L1040125103", "L2105621899", "L1640056714");
        annotationVisitor7.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1847716459", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        short short61 = classReader59.readShort((int) (byte) 0);
        int int63 = classReader59.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader59, 0);
        java.lang.String[] strArray66 = classReader59.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(2560, "L1028579140", "L59063553", "hi!", strArray66);
        classWriter1.visitInnerClass("L579675851", "L897597087", "", 12);
        int int76 = classWriter1.newField("L694914824", "L1442680030", "L455650823");
        org.mockito.asm.Label label81 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter(5);
        classWriter83.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray88 = classWriter83.toByteArray();
        label81.info = byteArray88;
        org.mockito.asm.ClassReader classReader90 = new org.mockito.asm.ClassReader(byteArray88);
        org.mockito.asm.ClassWriter classWriter92 = new org.mockito.asm.ClassWriter(classReader90, 1793);
        org.mockito.asm.ClassWriter classWriter94 = new org.mockito.asm.ClassWriter(classReader90, 202);
        java.lang.String str95 = classReader90.getSuperName();
        java.lang.String[] strArray96 = classReader90.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor97 = classWriter1.visitMethod(33555457, "L1853344835", "L1581248331", "L157434537", strArray96);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) -13570 + "'", short61 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2560 + "'", int63 == 2560);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 16 + "'", int76 == 16);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(methodVisitor97);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "L2000102916");
        int int29 = classWriter19.newMethod("", "L2062266913", "L809431533", false);
        methodVisitor17.visitLdcInsn((java.lang.Object) "L2062266913");
        methodVisitor17.visitFieldInsn((-1107296256), "L999961130", "L1435737877", "L1110710417");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor17.visitAnnotationDefault();
        methodVisitor17.visitIntInsn(9, (int) (short) 3);
        methodVisitor17.visitTypeInsn(6, "L841843626");
        methodVisitor17.visitIntInsn(2560, 62);
        methodVisitor17.visitFieldInsn(65792, "L2142211483", "L1687335926", "L781980490");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor16.visitAnnotation("L238476442", true);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor16.visitAnnotation("L170800745", true);
        methodVisitor16.visitIincInsn(512, 611177);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        byte[] byteArray39 = classReader38.b;
        int int40 = classReader38.getAccess();
        int int42 = classReader38.readInt(61);
        int int44 = classReader38.readInt(0);
        byte[] byteArray45 = classReader38.b;
        java.lang.String str46 = classReader38.getSuperName();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader38.accept(classVisitor47, 1751720204);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1694564377 + "'", int42 == 1694564377);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-889275714) + "'", int44 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L4531833", "L4531833", "L1009580268");
        int int24 = classWriter1.newClass("");
        classWriter1.visitSource("L1847716459", "L128451051");
        int int29 = classWriter1.newClass("L1510326766");
        int int31 = classWriter1.newClass("");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor41.visitAnnotationDefault();
        methodVisitor41.visitIntInsn(0, (int) (short) 12848);
        methodVisitor41.visitMultiANewArrayInsn("L989364881", 0);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        java.lang.Object obj72 = label70.info;
        java.lang.Object obj73 = label70.info;
        java.lang.Object obj74 = label70.info;
        methodVisitor41.visitLabel(label70);
        methodVisitor41.visitInsn(19506);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int10 = classWriter1.newField("L1601838046", "L2000102916", "\001");
        classWriter1.visitOuterClass("L415508906", "L1742400311", "L1358038794");
        classWriter1.visitSource("L976656549", "");
        classWriter1.visitInnerClass("L959183788", "L1522529774", "L1931763549", 110);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = annotationVisitor6.visitAnnotation("L2062266913", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor9.visitArray("L200807331");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor11);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        classWriter1.visitEnd();
        classWriter1.visitSource("L418802221", "L636727990");
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        int int71 = classWriter51.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter51.visitAnnotation("", true);
        byte[] byteArray75 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        short short78 = classReader76.readShort((int) (byte) 0);
        int int80 = classReader76.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(classReader76, 0);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader76, 0);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader76, (int) (byte) 100);
        byte[] byteArray87 = classReader76.b;
        java.lang.String[] strArray88 = classReader76.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter1.visitMethod(15, "L612243917", "L1224491373", "L1017623370", strArray88);
        methodVisitor89.visitVarInsn((int) (short) 100, 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) -13570 + "'", short78 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2560 + "'", int80 == 2560);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("L1287376048", false);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter10.newConst((java.lang.Object) (short) 1);
        classWriter10.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        classWriter21.visitOuterClass("hi!", "", "");
        int int33 = classWriter21.newNameType("hi!", "hi!");
        int int36 = classWriter21.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        classWriter21.visit(5, 6, "", "", "", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter10.visitMethod((int) (short) 0, "", "", "", strArray57);
        methodVisitor60.visitEnd();
        methodVisitor60.visitIincInsn((int) (short) -13570, 10);
        annotationVisitor7.visit("L1967552389", (java.lang.Object) (short) -13570);
        annotationVisitor7.visitEnum("L562296337", "L295718540", "L217194082");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor60);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        methodVisitor25.visitIincInsn((int) (short) 4, 0);
        methodVisitor25.visitMethodInsn(7, "L1315470340", "L1901131515", "L578704316");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter15.visitMethod(8, "hi!", "", "", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter15.visitAnnotation("hi!", false);
        byte[] byteArray43 = classWriter15.toByteArray();
        int int45 = classWriter15.newUTF8("L488861128");
        classWriter15.visitOuterClass("", "L976656549", "L1669912474");
        int int51 = classWriter15.newClass("L1471680267");
        classWriter15.visitInnerClass("L976656549", "L1628304347", "L81546457", 63);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        int int83 = classWriter63.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter63.visitAnnotation("", true);
        byte[] byteArray87 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        int int89 = classReader88.getAccess();
        int int91 = classReader88.readUnsignedShort(23);
        java.lang.String str92 = classReader88.getSuperName();
        int int93 = classReader88.getAccess();
        java.lang.String[] strArray94 = classReader88.getInterfaces();
        classWriter15.visit(611177, 6, "L817273435", "", "L1266856712", strArray94);
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter1.visitMethod((int) '#', "L170800745", "L30632432", "L1766371387", strArray94);
        classWriter1.visitSource("L1042887332", "L107823974");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 13 + "'", int51 == 13);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(methodVisitor96);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        int int43 = classWriter39.newField("L1930348385", "L295165602", "L295165602");
        classWriter39.visitSource("L9401833", "");
        int int48 = classWriter39.newClass("L375606602");
        classWriter39.visitOuterClass("L1803469792", "L81546457", "L1370122910");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 17 + "'", int48 == 17);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIntInsn(90, 256);
        methodVisitor25.visitMethodInsn((int) (short) 26729, "L1572959883", "L665659274", "L179737210");
        methodVisitor25.visitTypeInsn((int) (short) 768, "L1171524151");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        int int38 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String str66 = classReader65.getSuperName();
        char[] charArray72 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj73 = classReader65.readConst(6, charArray72);
        int int75 = classReader65.readUnsignedShort((int) 'a');
        int int76 = classReader65.getAccess();
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(classReader65, (int) (short) 10);
        int int82 = classWriter78.newField("L1930348385", "L295165602", "L295165602");
        int int84 = classWriter78.newClass("L418802221");
        classWriter78.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter78, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\001" + "'", obj73, "\001");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 14 + "'", int82 == 14);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 16 + "'", int84 == 16);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        int int39 = classReader26.getItem((int) (byte) 1);
        int int40 = classReader26.header;
        int int42 = classReader26.getItem((int) (short) 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 63 + "'", int42 == 63);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitTypeInsn((int) (short) 0, "L897597087");
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L1589078908", 10);
        methodVisitor25.visitCode();
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor25.visitParameterAnnotation(6, "L238186358", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readUnsignedShort(29);
        int int35 = classReader26.getAccess();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader26.readInt(1000814);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 512 + "'", int34 == 512);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L467340186");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        int int10 = classWriter1.newField("L488861128", "L1292845306", "L3043237");
        java.lang.String[] strArray16 = null;
        classWriter1.visit(10, 156461415, "L2127085380", "L81546457", "L1936126716", strArray16);
        classWriter1.visitEnd();
        int int20 = classWriter1.newClass("L646968272");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor41.visitAnnotationDefault();
        methodVisitor41.visitIntInsn((-21316096), 909717811);
        methodVisitor41.visitMethodInsn(22, "L4531833", "L2133258398", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor41.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor56 = methodVisitor41.visitParameterAnnotation(110, "L612243917", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMethodInsn((int) (short) 17784, "L590059745", "L967793538", "L1518174784");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor16.visitAnnotation("L1692352756", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = annotationVisitor39.visitAnnotation("L363565416", "L128451051");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        short short31 = classReader26.readShort(17);
        java.lang.String str32 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader26.getItem(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 3 + "'", short31 == (short) 3);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L1287376048", false);
        classWriter1.visitOuterClass("L1952894981", "", "L535346328");
        classWriter1.visitInnerClass("L541901146", "L500545133", "L59063553", (int) (byte) -1);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitCode();
        methodVisitor16.visitMethodInsn(4, "L1413182688", "L541901146", "L1004763019");
        methodVisitor16.visitIincInsn(6, 16842755);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor16.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        methodVisitor41.visitFieldInsn(51966, "L418802221", "L2000102916", "L150818074");
        org.mockito.asm.Attribute attribute48 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor41.visitAttribute(attribute48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(5, (int) ' ');
        methodVisitor16.visitMethodInsn((-21316096), "L1497855016", "L1357812716", "L749100806");
        methodVisitor16.visitMultiANewArrayInsn("L644932592", 19506);
        methodVisitor16.visitVarInsn(223337, (int) (short) 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte((int) (byte) 10);
        char[] charArray41 = new char[] { '#', '4', '4' };
        java.lang.String str42 = classReader26.readUTF8(100, charArray41);
        java.lang.String str43 = classReader26.getSuperName();
        char[] charArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = classReader26.readConst(0, charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitInsn(202);
        methodVisitor16.visitIincInsn(26, 27);
        methodVisitor16.visitInsn(875903244);
        methodVisitor16.visitIincInsn(223337, 190);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        classWriter1.visitOuterClass("L1086414642", "L1789245551", "L428215077");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L1726462062", true);
        classWriter1.visitOuterClass("L95180820", "L343526401", "L1877128533");
        classWriter1.visitInnerClass("L26244550", "L1372146937", "L71945869", 105);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.getAccess();
        long long41 = classReader26.readLong(40);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = classReader26.readByte(2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5005860273151830383L + "'", long41 == 5005860273151830383L);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        byte[] byteArray63 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        java.lang.String str65 = classReader64.getSuperName();
        char[] charArray71 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj72 = classReader64.readConst(6, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = classReader26.readClass(1792, charArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + "\001" + "'", obj72, "\001");
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIntInsn((-1), (int) (short) 0);
        methodVisitor16.visitFieldInsn(26729, "L4531833", "L782129665", "L1076056118");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        methodVisitor55.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        methodVisitor55.visitLabel(label59);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter62.newConst((java.lang.Object) (short) 1);
        classWriter62.visitSource("", "");
        label59.info = "";
        int int69 = label59.getOffset();
        java.lang.Object obj70 = label59.info;
        int int71 = label59.getOffset();
        int int72 = label59.getOffset();
        methodVisitor16.visitLineNumber(17784, label59);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + "" + "'", obj70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("", true);
        byte[] byteArray79 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        short short82 = classReader80.readShort((int) (byte) 0);
        int int84 = classReader80.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader80, 0);
        java.lang.String[] strArray87 = classReader80.getInterfaces();
        byte[] byteArray88 = classReader80.b;
        java.lang.String str89 = classReader80.getSuperName();
        long long91 = classReader80.readLong(14);
        java.lang.String str92 = classReader80.getSuperName();
        int int93 = classReader80.header;
        int int94 = classReader80.getAccess();
        byte[] byteArray95 = classReader80.b;
        label51.info = classReader80;
        java.lang.Object obj97 = label51.info;
        java.lang.String str98 = label51.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) -13570 + "'", short82 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2560 + "'", int84 == 2560);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 282574545512737L + "'", long91 == 282574545512737L);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 90 + "'", int93 == 90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(obj97);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "L238916694" + "'", str98, "L238916694");
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        int int37 = classReader26.getAccess();
        int int39 = classReader26.readByte(100);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        short short69 = classReader67.readShort((int) (byte) 0);
        int int71 = classReader67.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader67, 0);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader67, 0);
        int int77 = classReader67.readByte((int) (byte) 10);
        char[] charArray82 = new char[] { '#', '4', '4' };
        java.lang.String str83 = classReader67.readUTF8(100, charArray82);
        java.lang.Object obj84 = classReader26.readConst(5, charArray82);
        byte[] byteArray85 = classReader26.b;
        byte[] byteArray86 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) -13570 + "'", short69 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2560 + "'", int71 == 2560);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "\00144");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "\00144");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[\001, 4, 4]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "\001" + "'", obj84, "\001");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newClass("L809431533");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        int int41 = classWriter21.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter21.visitAnnotation("", true);
        byte[] byteArray45 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        short short48 = classReader46.readShort((int) (byte) 0);
        int int50 = classReader46.readUnsignedShort((int) ' ');
        org.mockito.asm.FieldVisitor fieldVisitor51 = classWriter1.visitField(8, "L110679537", "L999961130", "L1013343419", (java.lang.Object) int50);
        classWriter1.visitInnerClass("L838556944", "L295165602", "L1083553839", (int) (short) 12342);
        int int61 = classWriter1.newMethod("L1258237198", "L1210370409", "L1251858521", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -13570 + "'", short48 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2560 + "'", int50 == 2560);
        org.junit.Assert.assertNotNull(fieldVisitor51);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 25 + "'", int61 == 25);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitFieldInsn(8, "hi!", "", "");
        methodVisitor50.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor50.visitMaxs(6, (int) (byte) 10);
        methodVisitor50.visitIincInsn((int) (short) 1, (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField(156461415, "L1962189950", "L2000102916", "L264795169", (java.lang.Object) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L1589078908", true);
        fieldVisitor67.visitEnd();
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor67.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitInsn(0);
        methodVisitor16.visitFieldInsn(1793, "L1251858521", "L624707113", "L999961130");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter1.visitField(104, "", "L859506825", "L1769475365", (java.lang.Object) "L1142940414");
        org.mockito.asm.Attribute attribute20 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(fieldVisitor19);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor46.visitLabel(label50);
        java.lang.Object obj52 = label50.info;
        java.lang.Object obj53 = label50.info;
        methodVisitor25.visitLineNumber(51966, label50);
        methodVisitor25.visitLdcInsn((java.lang.Object) "L838556944");
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitInnerClass("hi!", "L488861128", "L624707113", 0);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        classWriter1.visit((int) ' ', 10, "L120720304", "L667379532", "L4531833", strArray27);
        classWriter1.visitSource("L158524288", "L110679537");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        int int66 = classWriter46.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter46.visitAnnotation("", true);
        byte[] byteArray70 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        short short73 = classReader71.readShort((int) (byte) 0);
        int int75 = classReader71.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader71, 0);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader71, 0);
        int int81 = classReader71.getItem(2);
        java.lang.String[] strArray82 = classReader71.getInterfaces();
        classWriter39.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray82);
        classWriter1.visit(30, (int) (byte) -1, "L1028579140", "L1262041297", "L1877128533", strArray82);
        int int88 = classWriter1.newField("L1166221053", "L1850773126", "L1093704381");
        classWriter1.visitOuterClass("L1100502214", "L644674685", "L661193128");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) -13570 + "'", short73 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2560 + "'", int75 == 2560);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 14 + "'", int81 == 14);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 24 + "'", int88 == 24);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        java.lang.String[] strArray35 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        java.lang.String str86 = label83.toString();
        java.lang.String str87 = label83.toString();
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] {};
        methodVisitor16.visitTableSwitchInsn((int) (short) -1, 1, label83, labelArray88);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor16.visitAnnotation("L2062266913", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = annotationVisitor92.visitArray("L826610285");
        annotationVisitor92.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L1441910664" + "'", str86, "L1441910664");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L1441910664" + "'", str87, "L1441910664");
        org.junit.Assert.assertNotNull(labelArray88);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        byte[] byteArray31 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 0, (int) (short) -1);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader35.readInt(1000814);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray31);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor46.visitLabel(label50);
        java.lang.Object obj52 = label50.info;
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        label59.info = strArray75;
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter54.visitMethod((int) (short) 100, "", "hi!", "", strArray75);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor78.visitAnnotationDefault();
        methodVisitor78.visitEnd();
        label50.info = methodVisitor78;
        methodVisitor16.visitJumpInsn(38, label50);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor16.visitParameterAnnotation(6, "L1589078908", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        methodVisitor25.visitEnd();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        java.lang.Object obj64 = label62.info;
        java.lang.Object obj65 = label62.info;
        int int66 = label62.getOffset();
        int int67 = label62.getOffset();
        methodVisitor25.visitLabel(label62);
        int int69 = label62.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        long long33 = classReader26.readLong(2);
        java.lang.String str34 = classReader26.getSuperName();
        java.lang.String str35 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(5);
        classWriter37.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int44 = classWriter37.newClass("");
        int int47 = classWriter37.newNameType("L1847716459", "");
        classWriter37.visitEnd();
        classWriter37.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int56 = classWriter37.newField("L529122729", "L488861128", "L976656549");
        classWriter37.visitSource("L953714147", "L1495045421");
        classWriter37.visitEnd();
        int int62 = classWriter37.newClass("L1540520089");
        org.mockito.asm.Attribute[] attributeArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter37, attributeArray63, 82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-4990551337079930870L) + "'", long33 == (-4990551337079930870L));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 19 + "'", int62 == 19);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte(8);
        int int37 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 1869898100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("", "L1847716459", "", (int) (byte) 10);
        classWriter1.visitOuterClass("L2062266913", "L590888141", "\001");
        int int77 = classWriter1.newUTF8("L242883751");
        classWriter1.visitInnerClass("L81460580", "L1526570068", "L278038742", 167772672);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20 + "'", int77 == 20);
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader26, 10);
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        int int31 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader26.readByte((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        int int55 = classReader53.readByte(7);
        java.lang.String[] strArray56 = classReader53.getInterfaces();
        long long58 = classReader53.readLong((int) (short) 2);
        java.lang.String str59 = classReader53.getSuperName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-4990551337079930872L) + "'", long58 == (-4990551337079930872L));
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L579675851");
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter1.visitAnnotation("L1111133036", false);
        classWriter1.visitInnerClass("L1210370409", "L919303058", "L81546457", 1869898100);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L276953604", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        java.lang.String[] strArray34 = classReader26.getInterfaces();
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label42 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        label42.info = strArray58;
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod((int) (short) 100, "", "hi!", "", strArray58);
        classWriter37.visitInnerClass("L1847716459", "", "L680573325", 9);
        classWriter37.visitInnerClass("L488861128", "L1928858580", "L2000102916", 100);
        classWriter37.visitEnd();
        org.mockito.asm.Attribute[] attributeArray73 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter37, attributeArray73, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(attributeArray73);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor34.visitArray("\000");
        annotationVisitor34.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        java.lang.String str64 = label62.toString();
        label62.info = ' ';
        methodVisitor25.visitLineNumber((int) '#', label62);
        methodVisitor25.visitEnd();
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int75 = classWriter70.newMethod("", "", "hi!", true);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter70.visitMethod(0, "", "", "hi!", strArray84);
        methodVisitor85.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label89 = new org.mockito.asm.Label();
        methodVisitor85.visitLabel(label89);
        java.lang.String str91 = label89.toString();
        java.lang.Object obj92 = label89.info;
        methodVisitor25.visitLabel(label89);
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L1586394876" + "'", str64, "L1586394876");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodVisitor85);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L2130434499" + "'", str91, "L2130434499");
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        int int49 = classWriter1.newField("L2127085380", "L720530545", "");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L75359331", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter11.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod(3, "hi!", "hi!", "hi!", strArray33);
        classWriter1.visit(23, 18, "L1223439170", "L1178822359", "L665737352", strArray33);
        classWriter1.visitOuterClass("L1162526488", "L2039587225", "L1497855016");
        int int42 = classWriter1.newUTF8("L1510326766");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        int int8 = classReader7.getAccess();
        short short10 = classReader7.readShort(6);
        int int11 = classReader7.header;
        byte[] byteArray12 = classReader7.b;
        char[] charArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = classReader7.readUTF8((int) (byte) 10, charArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor50.visitCode();
        methodVisitor50.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter62.newMethod("", "", "hi!", true);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter62.visitMethod(0, "", "", "hi!", strArray76);
        methodVisitor77.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label81 = new org.mockito.asm.Label();
        methodVisitor77.visitLabel(label81);
        java.lang.String str83 = label81.toString();
        methodVisitor50.visitLineNumber((int) (short) -1, label81);
        label81.info = (-1.0f);
        java.lang.String str87 = label81.toString();
        methodVisitor25.visitJumpInsn((int) (byte) 10, label81);
        java.lang.Object obj89 = label81.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L1630369841" + "'", str83, "L1630369841");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L1630369841" + "'", str87, "L1630369841");
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + (-1.0f) + "'", obj89, (-1.0f));
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        annotationVisitor74.visitEnum("L426422007", "L1287376048", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor74.visitAnnotation("L1936126716", "L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = annotationVisitor74.visitArray("L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = annotationVisitor83.visitArray("L238476442");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = annotationVisitor85.visitAnnotation("L1223439170", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = annotationVisitor85.visitAnnotation("L2132185573", "L1017623370");
        java.lang.Class<?> wildcardClass92 = annotationVisitor85.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 12592, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        int int42 = classWriter30.newNameType("hi!", "hi!");
        int int45 = classWriter30.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        classWriter30.visit(5, 6, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter19.visitMethod((int) (short) 0, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter1.visitMethod((int) '#', "L242883751", "L728847777", "L728847777", strArray66);
        int int72 = classWriter1.newClass("L1287376048");
        byte[] byteArray73 = classWriter1.toByteArray();
        classWriter1.visitSource("L975788322", "L136145448");
        classWriter1.visitSource("L664111037", "L81546457");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 17, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 1, 0, 10, 76, 55, 50, 56, 56, 52, 55, 55, 55, 55, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 7, 0, 11, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 35, 0, 9, 0, 10, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 14, 0, 0, 0, 2, 0, 10, 0, 2, 0, 15, 0, 0, 0, 4, 0, 6, 0, 7, 0, 16, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        int int43 = classWriter39.newField("L1930348385", "L295165602", "L295165602");
        classWriter39.visitSource("L9401833", "");
        classWriter39.visitSource("L1132227206", "L975788322");
        classWriter39.visitInnerClass("L1402371927", "L295165602", "L2078535908", (int) (short) 17784);
        java.lang.Class<?> wildcardClass55 = classWriter39.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitEnd();
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(5);
        classWriter22.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray27 = classWriter22.toByteArray();
        label20.info = byteArray27;
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader29, 1793);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader29, 202);
        java.lang.String[] strArray34 = classReader29.getInterfaces();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter37.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        int int69 = classWriter49.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter49.visitAnnotation("", true);
        byte[] byteArray73 = classWriter49.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        short short76 = classReader74.readShort((int) (byte) 0);
        int int78 = classReader74.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader74, 0);
        java.lang.String[] strArray81 = classReader74.getInterfaces();
        classWriter37.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray81);
        methodVisitor16.visitFrame((-889275714), (int) ' ', (java.lang.Object[]) strArray34, 256, (java.lang.Object[]) strArray81);
        java.lang.Object obj84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn(obj84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short76 + "' != '" + (short) -13570 + "'", short76 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2560 + "'", int78 == 2560);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        methodVisitor25.visitIntInsn((int) '4', 3);
        methodVisitor25.visitMultiANewArrayInsn("L2037791973", 3);
        methodVisitor25.visitFieldInsn(117440769, "L266472455", "L1583234446", "L646968272");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        int int38 = classReader26.getAccess();
        int int40 = classReader26.readByte(1);
        int int41 = classReader26.header;
        byte[] byteArray42 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray42, 161, 19506);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 254 + "'", int40 == 254);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        java.lang.String str64 = label62.toString();
        label62.info = ' ';
        methodVisitor25.visitLineNumber((int) '#', label62);
        int int68 = label62.getOffset();
        java.lang.Object obj69 = label62.info;
        int int70 = label62.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L1235861457" + "'", str64, "L1235861457");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + ' ' + "'", obj69, ' ');
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1936126716");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor16.visitAnnotation("L1013343419", true);
        methodVisitor16.visitEnd();
        methodVisitor16.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor16.visitParameterAnnotation(82, "L781112982", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L994624196" + "'", str75, "L994624196");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        char[] charArray41 = new char[] {};
        java.lang.String str42 = classReader26.readUTF8(100, charArray41);
        int int44 = classReader26.getItem(6);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader26.readByte(458753);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 458753");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 33 + "'", int44 == 33);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        methodVisitor33.visitCode();
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor33.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitOuterClass("L9401833", "L1142940414", "L128451051");
        byte[] byteArray66 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        short short69 = classReader67.readShort((int) '#');
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter71.visitAnnotation("L916243867", true);
        classWriter71.visitEnd();
        int int77 = classWriter71.newClass("L1899714602");
        // The following exception was thrown during execution in test generation
        try {
            classReader67.accept((org.mockito.asm.ClassVisitor) classWriter71, (int) (short) -16896);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 17, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 8, 76, 57, 52, 48, 49, 56, 51, 51, 7, 0, 9, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 1, 0, 10, 76, 49, 50, 56, 52, 53, 49, 48, 53, 49, 12, 0, 11, 0, 12, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 14, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 15, 0, 0, 0, 2, 0, 3, 0, 2, 0, 15, 0, 0, 0, 2, 0, 3, 0, 16, 0, 0, 0, 4, 0, 10, 0, 13]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) 256 + "'", short69 == (short) 256);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        classWriter1.visitOuterClass("L897160681", "L465659170", "L765138463");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitIincInsn(6, 65210);
        methodVisitor16.visitVarInsn(156461415, 14);
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L264795169", "L680573325");
        classWriter1.visitSource("L1013343419", "L1142940414");
        int int31 = classWriter1.newUTF8("L2062266913");
        classWriter1.visitEnd();
        int int34 = classWriter1.newClass("L152278810");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        annotationVisitor28.visitEnum("L488861128", "L75359331", "L1132227206");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = annotationVisitor28.visitAnnotation("L1202930291", "L1952894981");
        annotationVisitor44.visitEnum("L1827009202", "L1430234734", "L2142211483");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        methodVisitor34.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label38 = new org.mockito.asm.Label();
        methodVisitor34.visitLabel(label38);
        java.lang.String str40 = label38.toString();
        label38.info = ' ';
        java.lang.Object obj43 = label38.info;
        methodVisitor16.visitLabel(label38);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = methodVisitor16.visitAnnotation("L828384535", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor51 = methodVisitor16.visitParameterAnnotation((int) (byte) 0, "L1373865546", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "L592629338" + "'", str40, "L592629338");
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + ' ' + "'", obj43, ' ');
        org.junit.Assert.assertNotNull(annotationVisitor47);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitInsn(254);
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(5);
        classWriter38.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray43 = classWriter38.toByteArray();
        label36.info = byteArray43;
        methodVisitor25.visitLineNumber(3072, label36);
        methodVisitor25.visitFieldInsn((int) (short) 8460, "L2096601958", "L1058656014", "L77463317");
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor25.visitAnnotation("L1007735311", true);
        methodVisitor25.visitMaxs(28532, (int) ' ');
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(annotationVisitor53);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String str66 = classReader65.getSuperName();
        char[] charArray72 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj73 = classReader65.readConst(6, charArray72);
        char[] charArray81 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str82 = classReader65.readUTF8((int) '#', charArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = classReader26.readClass(11, charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\001" + "'", obj73, "\001");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\000" + "'", str82, "\000");
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newClass("L59063553");
        int int13 = classWriter1.newUTF8("L1936126716");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        methodVisitor30.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor30.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor36.visitArray("L831655905");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor36.visitArray("L1769475365");
        int int41 = classWriter1.newConst((java.lang.Object) "L1769475365");
        classWriter1.visitOuterClass("L1287617384", "L2059908172", "L158524288");
        java.lang.Class<?> wildcardClass46 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 12342);
        classWriter32.visitInnerClass("L20785338", "L1007542453", "L224623650", 27);
        java.lang.Class<?> wildcardClass38 = classWriter32.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        classWriter1.visitInnerClass("L976656549", "L535346328", "hi!", 22);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter1.visitAnnotation("L127591338", true);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        classWriter63.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter63.visitAnnotation("L2062266913", false);
        byte[] byteArray76 = classWriter63.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter63.visitAnnotation("L1142940414", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter63.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = annotationVisitor82.visitArray("L694914824");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = annotationVisitor82.visitAnnotation("L1589078908", "L295165602");
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter1.visitField(67764226, "L116545920", "L387862364", "L426422007", (java.lang.Object) "L295165602");
        org.mockito.asm.Attribute attribute89 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor88.visitAttribute(attribute89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 7, 0, 10, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(fieldVisitor88);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1074135059");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        short short35 = classReader26.readShort((int) (short) 7);
        // The following exception was thrown during execution in test generation
        try {
            short short37 = classReader26.readShort((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 0 + "'", short35 == (short) 0);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        fieldVisitor62.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = fieldVisitor62.visitAnnotation("L749737959", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = fieldVisitor62.visitAnnotation("L1221801792", true);
        fieldVisitor62.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor62.visitAnnotation("L1262041297", false);
        fieldVisitor62.visitEnd();
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor62.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readUnsignedShort(7);
        int int38 = classReader26.readUnsignedShort(26);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        classWriter40.visitSource("L809431533", "L2000102916");
        org.mockito.asm.FieldVisitor fieldVisitor73 = classWriter40.visitField(875903244, "L1411298446", "L841843626", "L680573325", (java.lang.Object) "L1148690681");
        classWriter40.visitInnerClass("L1638849034", "L81546457", "L1627366687", 12848);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter40, (int) (short) 8460);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 779 + "'", int38 == 779);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor73);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn(0, 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIntInsn(26729, (int) '4');
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        methodVisitor56.visitCode();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter59.visitMethod(0, "", "", "hi!", strArray73);
        methodVisitor74.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        methodVisitor74.visitLabel(label78);
        java.lang.String str80 = label78.toString();
        label78.info = ' ';
        java.lang.Object obj83 = label78.info;
        methodVisitor56.visitLabel(label78);
        java.lang.String str85 = label78.toString();
        int int86 = label78.getOffset();
        methodVisitor25.visitJumpInsn(512, label78);
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L1017244160" + "'", str80, "L1017244160");
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + ' ' + "'", obj83, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1017244160" + "'", str85, "L1017244160");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        char[] charArray41 = new char[] {};
        java.lang.String str42 = classReader26.readUTF8(100, charArray41);
        int int44 = classReader26.getItem(6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 33 + "'", int44 == 33);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 16);
        int int41 = classReader26.getAccess();
        int int43 = classReader26.readByte(61);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 101 + "'", int43 == 101);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitSource("L707293021", "L2106764488");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        int int11 = classWriter1.newMethod("L1013343419", "\001", "L488861128", true);
        int int15 = classWriter1.newField("L1962189950", "L1283200231", "L1387910543");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L1611208075", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(8);
        int int26 = classWriter21.newMethod("L275489687", "L275489687", "L275489687", false);
        byte[] byteArray27 = classWriter21.toByteArray();
        annotationVisitor18.visit("L976618452", (java.lang.Object) byteArray27);
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray27, 34, (int) (short) 17784);
        int int32 = classReader31.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 17 + "'", int15 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 1, 12, 0, 1, 0, 1, 10, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        int int13 = classWriter1.newUTF8("L1132227206");
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("L838653747", false);
        classWriter1.visitOuterClass("L674940947", "L446511586", "L569030566");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor16);
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        byte[] byteArray14 = classWriter1.toByteArray();
        int int17 = classWriter1.newNameType("L482405892", "L320162054");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter23.visitMethod(8, "hi!", "", "", strArray45);
        methodVisitor47.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor47.visitIincInsn(0, (int) (short) -1);
        methodVisitor47.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = methodVisitor47.visitAnnotation("L1137416384", false);
        org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter1.visitField(22, "L6818069", "L964927155", "L1013343419", (java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 7, 0, 10, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(fieldVisitor58);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int5 = classWriter3.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter3.visitMethod(3, "hi!", "hi!", "hi!", strArray25);
        int int28 = classWriter1.newConst((java.lang.Object) "hi!");
        classWriter1.visitSource("L488861128", "L897597087");
        classWriter1.visitInnerClass("L624707113", "L728847777", "L1601838046", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L488861128", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("L426422007", true);
        classWriter1.visitSource("L339402249", "L238640077");
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = methodVisitor66.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor66.visitAnnotation("L1004763019", false);
        methodVisitor66.visitIincInsn((int) (short) 100, 16842755);
        methodVisitor66.visitInsn(14);
        methodVisitor66.visitTypeInsn(2, "L1169247122");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor84 = classWriter1.visitField((-889275714), "L2141594193", "L2077953380", "L1017623370", (java.lang.Object) methodVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@52008cb3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L2062266913", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        int int43 = classReader41.readUnsignedShort((int) (byte) 0);
        short short45 = classReader41.readShort(7);
        int int46 = classReader41.header;
        int int47 = classReader41.getAccess();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(classReader41, 23);
        int int51 = classReader41.readByte(90);
        short short53 = classReader41.readShort(19);
        java.lang.String[] strArray54 = classReader41.getInterfaces();
        classWriter1.visit(65536, 872, "L1223439170", "L2141212410", "L46285906", strArray54);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(5);
        classWriter61.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter61.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        fieldVisitor72.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = fieldVisitor72.visitAnnotation("L755844592", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = fieldVisitor72.visitAnnotation("L2034910382", false);
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter1.visitField((-1107296256), "L77196307", "L120713780", "L607357044", (java.lang.Object) false);
        org.mockito.asm.Attribute attribute81 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor80.visitAttribute(attribute81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51966 + "'", int43 == 51966);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 90 + "'", int46 == 90);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 26729 + "'", short53 == (short) 26729);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(fieldVisitor80);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader39.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitVarInsn(12592, 0);
        methodVisitor25.visitFieldInsn((int) (short) 4, "L1142940414", "L1969123537", "L1307358075");
        methodVisitor25.visitLdcInsn((java.lang.Object) 26);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(5);
        classWriter69.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int76 = classWriter69.newClass("");
        classWriter69.visitOuterClass("L1132227206", "L1132227206", "L749737959");
        classWriter69.visitOuterClass("L570733821", "L2085471365", "L1028510473");
        classWriter69.visitSource("L665659274", "L913773226");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) classWriter69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@427e6b28");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L136145448", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        int int50 = classWriter30.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("", true);
        byte[] byteArray54 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        short short57 = classReader55.readShort((int) (byte) 0);
        int int59 = classReader55.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader55, 0);
        java.lang.String[] strArray62 = classReader55.getInterfaces();
        classWriter1.visit((int) (byte) -1, 12592, "L745089702", "L1413182688", "L579675851", strArray62);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L1429849124", false);
        classWriter1.visitSource("L59063553", "L1572959883");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) -13570 + "'", short57 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2560 + "'", int59 == 2560);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter1.visitAnnotation("L728847777", true);
        int int59 = classWriter1.newClass("L110679537");
        int int62 = classWriter1.newNameType("L1638849034", "L1931763549");
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1945103414", true);
        annotationVisitor6.visitEnum("L1952977388", "L1334226032", "L238916694");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L552329476");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1386483578", "L579675851", "L680573325");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        classWriter18.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter18.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter32.newConst((java.lang.Object) (byte) 0);
        int int35 = classWriter18.newConst((java.lang.Object) int34);
        classWriter18.visitEnd();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        label47.info = strArray63;
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter42.visitMethod((int) (short) 100, "", "hi!", "", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter18.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray63);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(0);
        int int80 = classWriter75.newMethod("", "", "hi!", true);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter75.visitMethod(0, "", "", "hi!", strArray89);
        label73.info = strArray89;
        classWriter18.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray89);
        classWriter1.visit(51966, (int) (short) 10, "L1110710417", "L275489687", "L755844592", strArray89);
        java.lang.Class<?> wildcardClass94 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(methodVisitor90);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("L755844592", true);
        annotationVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor16.visitArray("L1315842236");
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(21);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute3 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter1.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int38 = classWriter1.newNameType("L749737959", "L1601838046");
        classWriter1.visitInnerClass("L2000102916", "L1028579140", "", 100);
        classWriter1.visitSource("L59063553", "L1497855016");
        int int48 = classWriter1.newUTF8("L1605224709");
        int int53 = classWriter1.newMethod("L560005029", "L1315842236", "L467340186", true);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter59.visitMethod(0, "", "", "hi!", strArray73);
        int int79 = classWriter59.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter59.visitAnnotation("", true);
        byte[] byteArray83 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        int int85 = classReader84.getAccess();
        byte[] byteArray86 = classReader84.b;
        byte[] byteArray87 = classReader84.b;
        byte[] byteArray88 = classReader84.b;
        int int90 = classReader84.readByte((int) (short) 0);
        int int92 = classReader84.readUnsignedShort((int) (short) 100);
        byte[] byteArray93 = classReader84.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField(110, "L647798807", "L1042887332", "L1490365060", (java.lang.Object) byteArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@530be819");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 26 + "'", int53 == 26);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 6 + "'", int79 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 202 + "'", int90 == 202);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        long long37 = classReader26.readLong(8);
        int int39 = classReader26.getItem(3);
        long long41 = classReader26.readLong(8);
        int int43 = classReader26.readInt(6);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, 1792);
        classWriter45.visitInnerClass("L2142211483", "", "L1007735311", (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2815849279193089L + "'", long37 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2815849279193089L + "'", long41 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitTypeInsn(26729, "L1952894981");
        methodVisitor16.visitMethodInsn(0, "L2062266913", "L1292845306", "L1083553839");
        methodVisitor16.visitMaxs(33, 65210);
        java.lang.Object obj37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn(obj37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        int int47 = classWriter27.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter27.visitAnnotation("", true);
        byte[] byteArray51 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        int int54 = classReader52.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader52, (int) '4');
        int int58 = classReader52.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader52, (int) '#');
        byte[] byteArray61 = classReader52.b;
        java.lang.String[] strArray62 = classReader52.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter1.visitMethod(17, "L75359331", "L1628304347", "L1847716459", strArray62);
        int int66 = classWriter1.newNameType("L1268109548", "L2105621899");
        classWriter1.visitSource("L831655905", "L836032224");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 51966 + "'", int54 == 51966);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 15 + "'", int66 == 15);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(10);
        classWriter1.visitInnerClass("L745089702", "L1855754182", "L1009580268", 5);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter12.visitMethod(0, "", "", "hi!", strArray26);
        int int32 = classWriter12.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter12.visitAnnotation("", true);
        byte[] byteArray36 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String str38 = classReader37.getSuperName();
        int int39 = classReader37.header;
        java.lang.String[] strArray40 = classReader37.getInterfaces();
        int int42 = classReader37.readByte(0);
        int int44 = classReader37.readUnsignedShort(1);
        long long46 = classReader37.readLong(7);
        int int48 = classReader37.readInt((int) (short) 3);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader37, 26729);
        java.lang.String[] strArray51 = classReader37.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter1.visitField(1763772160, "L2035525354", "L402550819", "L75359331", (java.lang.Object) strArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@361e460a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 202 + "'", int42 == 202);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 65210 + "'", int44 == 65210);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10999411246848L + "'", long46 == 10999411246848L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1107296256) + "'", int48 == (-1107296256));
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        classWriter35.visitEnd();
        java.lang.String[] strArray72 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter35.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter9.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod(78, "L1936126716", "L1386483578", "L728847777", strArray72);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor75.visitAnnotationDefault();
        methodVisitor75.visitIincInsn(458753, (int) (short) 1);
        methodVisitor75.visitInsn((int) 'a');
        methodVisitor75.visitInsn((int) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(204);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        java.lang.String str22 = label20.toString();
        label20.info = ' ';
        java.lang.Object obj25 = label20.info;
        label20.info = "L172254079";
        int int28 = label20.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "L1286020517" + "'", str22, "L1286020517");
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + ' ' + "'", obj25, ' ');
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        java.lang.String str32 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader26.readUnsignedShort((int) (short) 2816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2816");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitOuterClass("L275489687", "L680573325", "L579675851");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute27 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        long long35 = classReader26.readLong(7);
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int38 = classReader37.getAccess();
        char[] charArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = classReader37.readClass(51052546, charArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51052546");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitIincInsn((int) (short) 0, (int) ' ');
        methodVisitor16.visitLdcInsn((java.lang.Object) "L939135397");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor21.visitAnnotation("L110679537", "L1762162347");
        annotationVisitor21.visitEnd();
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(2);
        int int32 = classWriter28.newField("L1774908040", "L570733821", "L1742400311");
        int int35 = classWriter28.newNameType("L1962189950", "L1134832479");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor21.visit("", (java.lang.Object) classWriter28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@4702ce33");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        byte[] byteArray47 = classWriter1.toByteArray();
        byte[] byteArray48 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("L1756084046", false);
        java.lang.Class<?> wildcardClass55 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L75359331", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter11.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod(3, "hi!", "hi!", "hi!", strArray33);
        classWriter1.visit(23, 18, "L1223439170", "L1178822359", "L665737352", strArray33);
        classWriter1.visitInnerClass("L1936126716", "L149220781", "L1962189950", 21);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(methodVisitor35);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(40, "L749737959");
        methodVisitor16.visitIntInsn(12592, 1751720204);
        methodVisitor16.visitMaxs(163, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor16.visitAnnotation("L1370122910", false);
        methodVisitor16.visitEnd();
        methodVisitor16.visitFieldInsn(0, "L537907644", "L1385221869", "L531876647");
        methodVisitor16.visitCode();
        org.mockito.asm.Attribute attribute98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitIntInsn(0, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (byte) 0);
        int int39 = classWriter33.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray40 = classWriter33.toByteArray();
        classWriter33.visitInnerClass("L1162526488", "L1936126716", "L1221801792", (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        classWriter52.visitOuterClass("hi!", "", "");
        int int64 = classWriter52.newNameType("hi!", "hi!");
        int int67 = classWriter52.newNameType("hi!", "");
        java.lang.Object obj72 = null;
        org.mockito.asm.FieldVisitor fieldVisitor73 = classWriter52.visitField(9, "L1601838046", "L2062266913", "L680573325", obj72);
        classWriter52.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter52.visitSource("L75359331", "L1930348385");
        classWriter52.visitEnd();
        byte[] byteArray82 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray82, 0, (int) (short) -1);
        java.lang.String[] strArray86 = classReader85.getInterfaces();
        classWriter33.visit(875903244, 11, "L1589078908", "L1471680267", "L529122729", strArray86);
        methodVisitor16.visitLdcInsn((java.lang.Object) 11);
        methodVisitor16.visitMultiANewArrayInsn("L573057906", 254);
        methodVisitor16.visitMethodInsn(0, "L139573601", "L130127010", "L975788322");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor73);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertNotNull(strArray86);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor13.visitAnnotation("L749737959", "L238476442");
        annotationVisitor16.visitEnum("L3043237", "L782129665", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor16.visitAnnotation("L1307358075", "L836032224");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter26.visitMethod(8, "hi!", "", "", strArray48);
        methodVisitor50.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor50.visitAnnotationDefault();
        methodVisitor50.visitMaxs((int) ' ', (int) '4');
        methodVisitor50.visitVarInsn(22, (int) (short) 3072);
        methodVisitor50.visitCode();
        methodVisitor50.visitTypeInsn(9, "L531876647");
        methodVisitor50.visitMaxs(458753, 24);
        methodVisitor50.visitInsn(9);
        methodVisitor50.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor16.visit("L1017623370", (java.lang.Object) methodVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@3e573db3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIincInsn(0, 199680);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1086223695" + "'", str75, "L1086223695");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        byte[] byteArray26 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) '#');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader29, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        short short71 = classReader69.readShort((int) (byte) 0);
        int int73 = classReader69.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader69, 0);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader69, 0);
        int int79 = classReader69.getItem(2);
        java.lang.String[] strArray80 = classReader69.getInterfaces();
        classWriter37.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter31.visitMethod((int) '#', "L82136369", "L1629650344", "L1287617384", strArray80);
        classWriter1.visit(163, 156461415, "L1952894981", "L284303737", "", strArray80);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L683506282", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -13570 + "'", short71 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2560 + "'", int73 == 2560);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 14 + "'", int79 == 14);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        int int13 = classReader7.readByte(0);
        int int14 = classReader7.header;
        int int15 = classReader7.header;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(classReader7, 254);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader7.readByte((int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 202 + "'", int13 == 202);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 78 + "'", int14 == 78);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 78 + "'", int15 == 78);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        int int32 = classReader26.readInt(0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        short short35 = classReader26.readShort((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-889275714) + "'", int32 == (-889275714));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitVarInsn((int) '#', 23);
        methodVisitor25.visitVarInsn(105, 13);
        java.lang.Object obj36 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn(obj36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        long long74 = classReader68.readLong((int) '#');
        int int76 = classReader68.getItem(0);
        java.lang.String str77 = classReader68.getSuperName();
        short short79 = classReader68.readShort(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter1.visitField((int) (short) -13570, "L529122729", "L75359331", "L2037791973", (java.lang.Object) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = fieldVisitor82.visitAnnotation("L976656549", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = fieldVisitor82.visitAnnotation("", true);
        annotationVisitor88.visitEnum("L1591899557", "L1111133036", "L1669124905");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1126999590795363L + "'", long74 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 1792 + "'", short79 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1003716566");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIincInsn(15, 23);
        methodVisitor16.visitInsn((int) (short) 26729);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L724436236" + "'", str75, "L724436236");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter27.visitAnnotation("hi!", false);
        annotationVisitor54.visitEnum("hi!", "", "hi!");
        annotationVisitor24.visit("", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = annotationVisitor24.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = annotationVisitor61.visitArray("L1291288126");
        java.lang.Class<?> wildcardClass64 = annotationVisitor61.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int36 = classReader26.header;
        char[] charArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = classReader26.readConst(2560, charArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        int int32 = classReader26.readByte(23);
        byte[] byteArray33 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 17784);
        classWriter35.visitInnerClass("L1066716797", "L1502885011", "L1927659804", 38);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitIincInsn((int) (short) 100, (int) (short) -1);
        methodVisitor25.visitMethodInsn(3, "L1028510473", "L1601838046", "L1307358075");
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        methodVisitor41.visitEnd();
        methodVisitor41.visitTypeInsn(201326848, "L1286020517");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L1287376048", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = annotationVisitor86.visitAnnotation("L1793985281", "L667379532");
        annotationVisitor89.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        methodVisitor16.visitIincInsn((int) (short) 1, (int) (short) -1);
        methodVisitor16.visitMaxs((int) ' ', (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        methodVisitor62.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor62.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        methodVisitor84.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label88 = new org.mockito.asm.Label();
        methodVisitor84.visitLabel(label88);
        methodVisitor62.visitJumpInsn((-1), label88);
        java.lang.String str91 = label88.toString();
        int int92 = label88.getOffset();
        methodVisitor16.visitJumpInsn((int) '4', label88);
        java.lang.String str94 = label88.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L991468484" + "'", str91, "L991468484");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L991468484" + "'", str94, "L991468484");
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter10.newConst((java.lang.Object) (short) 1);
        int int14 = classWriter10.newUTF8("hi!");
        int int19 = classWriter10.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        classWriter26.visitSource("", "L2000102916");
        int int36 = classWriter26.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        classWriter43.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter43.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter57.newConst((java.lang.Object) (byte) 0);
        int int60 = classWriter43.newConst((java.lang.Object) int59);
        int int64 = classWriter43.newField("hi!", "", "L809431533");
        java.lang.String[] strArray74 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter43.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray74);
        classWriter26.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray74);
        classWriter10.visit(254, 0, "\001", "L426422007", "L59063553", strArray74);
        classWriter1.visit(40, (int) (short) 3072, "L1435737877", "L590888141", "L897597087", strArray74);
        java.lang.String[] strArray84 = null;
        classWriter1.visit(611177, 0, "L59063553", "L946793861", "L688061379", strArray84);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter1.visitAnnotation("L680573325", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = classWriter1.visitAnnotation("L2132431650", false);
        org.mockito.asm.FieldVisitor fieldVisitor97 = classWriter1.visitField(655616, "L192720623", "L1457309764", "L2117999297", (java.lang.Object) "L2132185573");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(fieldVisitor97);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int35 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.readByte(16777223);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16777223");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L4531833", "L4531833", "L1009580268");
        int int24 = classWriter1.newClass("");
        classWriter1.visitSource("L680573325", "L1847716459");
        int int29 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter1.visitAnnotation("L1110710417", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        methodVisitor62.visitIntInsn((int) (short) 1, 6);
        methodVisitor62.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = methodVisitor62.visitAnnotation("hi!", false);
        methodVisitor62.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor62.visitIincInsn(90, 6);
        methodVisitor62.visitEnd();
        methodVisitor62.visitEnd();
        methodVisitor62.visitFieldInsn(223337, "L1438974949", "L772357663", "L1189635920");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor85 = classWriter1.visitField(6, "L917500574", "L128451051", "L1978876772", (java.lang.Object) methodVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@1c49bba2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor69);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitVarInsn((-1107296256), 65210);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        int int71 = classWriter51.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter51.visitAnnotation("", true);
        byte[] byteArray75 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        short short78 = classReader76.readShort((int) (byte) 0);
        int int80 = classReader76.readUnsignedShort((int) ' ');
        int int82 = classReader76.readInt(0);
        java.lang.String[] strArray83 = classReader76.getInterfaces();
        int int84 = classReader76.header;
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader76, 104);
        char[] charArray89 = new char[] { '4' };
        java.lang.Object obj90 = classReader76.readConst(8, charArray89);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) classReader76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@9b03dbe");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) -13570 + "'", short78 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2560 + "'", int80 == 2560);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-889275714) + "'", int82 == (-889275714));
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 90 + "'", int84 == 90);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[4]");
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + "RuntimeVisibleAnnotations" + "'", obj90, "RuntimeVisibleAnnotations");
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L680573325", false);
        int int33 = classWriter1.newMethod("L295165602", "L1411298446", "L1429849124", true);
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter1.visitField(22, "L538737171", "L541901146", "L1789245551", (java.lang.Object) 1126999590795363L);
        int int42 = classWriter1.newNameType("L897160681", "L1182212814");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L2000102916", "L636727990");
        int int68 = classWriter1.newMethod("L976656549", "L2000102916", "L1287376048", false);
        classWriter1.visitInnerClass("L2089731244", "L1007542453", "L772357663", 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitMultiANewArrayInsn("L1611208075", 3);
        methodVisitor25.visitInsn(1025);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitFieldInsn(6, "L976656549", "L535346328", "L2014806404");
        methodVisitor25.visitCode();
        methodVisitor25.visitMaxs((int) (short) 3, 13);
        methodVisitor25.visitMaxs((int) ' ', 25968);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter70.visitAnnotation("hi!", false);
        classWriter70.visitInnerClass("L749737959", "L1028579140", "L488861128", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = classWriter70.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter70.visitAnnotation("L1518174784", true);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) annotationVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@22387ce1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, (int) (short) 4, 26729);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        short short63 = classReader61.readShort((int) (byte) 0);
        int int65 = classReader61.readUnsignedShort((int) ' ');
        int int67 = classReader61.readInt(0);
        java.lang.String[] strArray68 = classReader61.getInterfaces();
        int int69 = classReader61.header;
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader61, 104);
        char[] charArray74 = new char[] { '4' };
        java.lang.Object obj75 = classReader61.readConst(8, charArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = classReader33.readClass(512, charArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 512");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) -13570 + "'", short63 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2560 + "'", int65 == 2560);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-889275714) + "'", int67 == (-889275714));
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 90 + "'", int69 == 90);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[4]");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "RuntimeVisibleAnnotations" + "'", obj75, "RuntimeVisibleAnnotations");
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        methodVisitor37.visitMaxs(13, 254);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField((int) '#', "L680573325", "L624707113", "L782129665", (java.lang.Object) 254);
        classWriter1.visitEnd();
        int int51 = classWriter1.newClass("L959574331");
        classWriter1.visitInnerClass("L1140828792", "L1268109548", "L1889100462", 24);
        classWriter1.visitInnerClass("L1235615576", "L1591899557", "L934106996", 25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readByte(1);
        short short14 = classReader7.readShort(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = classReader7.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 254 + "'", int12 == 254);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) -13570 + "'", short14 == (short) -13570);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        methodVisitor16.visitIincInsn((int) (short) 1, (int) (short) -1);
        methodVisitor16.visitMaxs((int) ' ', (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        methodVisitor62.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor62.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        methodVisitor84.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label88 = new org.mockito.asm.Label();
        methodVisitor84.visitLabel(label88);
        methodVisitor62.visitJumpInsn((-1), label88);
        java.lang.String str91 = label88.toString();
        int int92 = label88.getOffset();
        methodVisitor16.visitJumpInsn((int) '4', label88);
        int int94 = label88.getOffset();
        java.lang.Object obj95 = label88.info;
        java.lang.Object obj96 = label88.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L1696325667" + "'", str91, "L1696325667");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitOuterClass("L1132227206", "L1132227206", "L749737959");
        classWriter1.visitOuterClass("L570733821", "L2085471365", "L1028510473");
        classWriter1.visitSource("L665659274", "L913773226");
        int int21 = classWriter1.newUTF8("L1717199564");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 202);
        java.lang.String[] strArray14 = classReader9.getInterfaces();
        int int15 = classReader9.header;
        char[] charArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = classReader9.readUTF8((int) (short) -326, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 78 + "'", int15 == 78);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIntInsn(0, (int) (byte) 10);
        methodVisitor16.visitIincInsn(26, (int) (short) 0);
        methodVisitor16.visitIntInsn(0, (-1107296256));
        methodVisitor16.visitCode();
        methodVisitor16.visitTypeInsn(11, "L1497855016");
        methodVisitor16.visitInsn(1698786926);
        methodVisitor16.visitTypeInsn((int) (short) -1, "L729032685");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(872);
        classWriter1.visitSource("L1628304347", "L1715729238");
        classWriter1.visitInnerClass("L1162526488", "L428215077", "L1386483578", 17);
        int int11 = classWriter1.newUTF8("L1080439280");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1431625085", "L1969123537", "L2132845283", (int) (short) 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitInsn(18);
        methodVisitor25.visitMultiANewArrayInsn("L1435737877", (-1161953280));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        annotationVisitor9.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor9.visitAnnotation("L1757895657", "L1262041297");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        label56.info = strArray72;
        classWriter1.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray72);
        int int77 = classWriter1.newUTF8("L1901131515");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 17 + "'", int77 == 17);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray50, 0, 21);
        int int54 = classReader53.header;
        java.lang.String[] strArray55 = classReader53.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 163 + "'", int54 == 163);
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1965436522");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn(0, 10);
        methodVisitor25.visitInsn((-21316096));
        methodVisitor25.visitCode();
        methodVisitor25.visitTypeInsn(12592, "L1430950246");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        int int44 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        short short74 = classReader72.readShort((int) (byte) 0);
        int int76 = classReader72.readUnsignedShort((int) ' ');
        int int78 = classReader72.readInt(0);
        java.lang.String[] strArray79 = classReader72.getInterfaces();
        int int80 = classReader72.header;
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(classReader72, 104);
        char[] charArray85 = new char[] { '4' };
        java.lang.Object obj86 = classReader72.readConst(8, charArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = classReader26.readConst((int) (short) 768, charArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 768");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -13570 + "'", short74 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2560 + "'", int76 == 2560);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-889275714) + "'", int78 == (-889275714));
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 90 + "'", int80 == 90);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[4]");
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + "RuntimeVisibleAnnotations" + "'", obj86, "RuntimeVisibleAnnotations");
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        classWriter8.visitOuterClass("L1086414642", "L1789245551", "L428215077");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        short short60 = classReader58.readShort((int) (byte) 0);
        java.lang.String str61 = classReader58.getSuperName();
        java.lang.String[] strArray62 = classReader58.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter8.visitMethod(12, "L1171524151", "L30632432", "L688061379", strArray62);
        classWriter1.visit(163, (int) (byte) 10, "L71945869", "L1028579140", "L1370122910", strArray62);
        int int67 = classWriter1.newNameType("L664111037", "L75359331");
        classWriter1.visitInnerClass("L917500574", "L540956256", "L1110710417", (-1107296256));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) -13570 + "'", short60 == (short) -13570);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = classReader35.readLong(16842755);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        short short31 = classReader26.readShort(8);
        int int33 = classReader26.readUnsignedShort((int) (short) 1);
        int int35 = classReader26.readByte((int) (short) 4);
        int int37 = classReader26.readInt(0);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        short short67 = classReader65.readShort((int) (byte) 0);
        int int69 = classReader65.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader65, 0);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader65, 0);
        int int75 = classReader65.readByte((int) (byte) 10);
        char[] charArray80 = new char[] { '#', '4', '4' };
        java.lang.String str81 = classReader65.readUTF8(100, charArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = classReader26.readClass(1751720204, charArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1751720204");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 10 + "'", short31 == (short) 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-889275714) + "'", int37 == (-889275714));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) -13570 + "'", short67 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2560 + "'", int69 == 2560);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L428215077", "", "\001", (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 4);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        methodVisitor33.visitFieldInsn(8, "hi!", "", "");
        methodVisitor33.visitTypeInsn((int) (byte) 100, "");
        methodVisitor33.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor33.visitInsn((int) (byte) 0);
        methodVisitor33.visitIincInsn((-1), 4);
        int int52 = classWriter16.newConst((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int53 = classWriter1.newConst((java.lang.Object) classWriter16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@3eade275");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        int int32 = classReader26.readInt(0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int34 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 104);
        char[] charArray39 = new char[] { '4' };
        java.lang.Object obj40 = classReader26.readConst(8, charArray39);
        int int41 = classReader26.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-889275714) + "'", int32 == (-889275714));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4]");
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + "RuntimeVisibleAnnotations" + "'", obj40, "RuntimeVisibleAnnotations");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        java.lang.String str32 = classReader26.getSuperName();
        long long34 = classReader26.readLong(20);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.getItem((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 7575349242370196235L + "'", long34 == 7575349242370196235L);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        int int47 = classWriter45.newClass("");
        classWriter45.visitSource("L1132227206", "L1535870604");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        annotationVisitor35.visitEnd();
        annotationVisitor35.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor35.visitArray("L1083553839");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor35.visitArray("L578704316");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor41.visitArray("L224241486");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        java.lang.String[] strArray12 = classReader9.getInterfaces();
        int int13 = classReader9.header;
        int int15 = classReader9.readByte(78);
        int int16 = classReader9.header;
        byte[] byteArray17 = classReader9.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 30, 1164862316);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78 + "'", int13 == 78);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 78 + "'", int16 == 78);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L535346328", "L755949095", "L238476442");
        java.lang.Class<?> wildcardClass23 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L4531833", "L4531833", "L1009580268");
        int int24 = classWriter1.newClass("");
        classWriter1.visitSource("L680573325", "L1847716459");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod(78, "L1498837454", "", "L2000102916", strArray90);
        methodVisitor94.visitMaxs(1698786926, 0);
        methodVisitor94.visitCode();
        methodVisitor94.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        methodVisitor25.visitEnd();
        methodVisitor25.visitMaxs(65210, 90);
        methodVisitor25.visitEnd();
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        long long31 = classReader26.readLong(2);
        byte[] byteArray32 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray32, 57174305, 33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-4990551337079930870L) + "'", long31 == (-4990551337079930870L));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(90);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L579675851", true);
        byte[] byteArray5 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L916243867", "L1642186947", "L590059745");
        org.mockito.asm.Attribute attribute10 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMaxs((int) (short) 0, 7);
        methodVisitor25.visitMaxs((int) (byte) 1, 7);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        methodVisitor52.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor52.visitCode();
        methodVisitor52.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        java.lang.String str85 = label83.toString();
        methodVisitor52.visitLineNumber((int) (short) -1, label83);
        methodVisitor25.visitJumpInsn((int) (byte) 0, label83);
        methodVisitor25.visitCode();
        org.mockito.asm.Attribute attribute89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1485695383" + "'", str85, "L1485695383");
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        int int40 = classReader39.header;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader39.getItem(62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 62");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        byte[] byteArray32 = classWriter31.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        classWriter38.visitOuterClass("hi!", "", "");
        int int50 = classWriter38.newNameType("hi!", "hi!");
        int int53 = classWriter38.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        classWriter38.visit(5, 6, "", "", "", strArray74);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter38.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter38.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray87 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        java.lang.String[] strArray89 = classReader88.getInterfaces();
        java.lang.String[] strArray90 = classReader88.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter31.visitMethod(19, "L436759653", "L714029947", "L1674107149", strArray90);
        classWriter31.visitOuterClass("L139573601", "", "L905591693");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readByte(7);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        int int64 = classReader63.getAccess();
        byte[] byteArray65 = classReader63.b;
        byte[] byteArray66 = classReader63.b;
        byte[] byteArray67 = classReader63.b;
        java.lang.String[] strArray68 = classReader63.getInterfaces();
        char[] charArray75 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj76 = classReader63.readConst((int) (short) 4, charArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = classReader26.readUTF8(199680, charArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + "" + "'", obj76, "");
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L2062266913", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        int int43 = classReader41.readUnsignedShort((int) (byte) 0);
        short short45 = classReader41.readShort(7);
        int int46 = classReader41.header;
        int int47 = classReader41.getAccess();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(classReader41, 23);
        int int51 = classReader41.readByte(90);
        short short53 = classReader41.readShort(19);
        java.lang.String[] strArray54 = classReader41.getInterfaces();
        classWriter1.visit(65536, 872, "L1223439170", "L2141212410", "L46285906", strArray54);
        classWriter1.visitEnd();
        int int58 = classWriter1.newUTF8("");
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51966 + "'", int43 == 51966);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 90 + "'", int46 == 90);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 26729 + "'", short53 == (short) 26729);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor28.visitArray("L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("L1192381465");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor33.visitAnnotation("\000", "L2132431650");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor33.visitAnnotation("L1093675238", "L1047734516");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(5);
        classWriter42.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray47 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        int int50 = classReader48.readUnsignedShort((int) '#');
        byte[] byteArray51 = classReader48.b;
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray51);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor39.visit("L325763056", (java.lang.Object) strArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@45c6bbfe");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12592 + "'", int50 == 12592);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 2);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        short short67 = classReader65.readShort((int) (byte) 0);
        int int69 = classReader65.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader65, 0);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader65, 0);
        int int74 = classReader65.getAccess();
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(classReader65, 2560);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter76, 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) -13570 + "'", short67 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2560 + "'", int69 == 2560);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int10 = classWriter1.newField("L1601838046", "L2000102916", "\001");
        classWriter1.visitInnerClass("L624707113", "L320162054", "L999961130", 38);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        char[] charArray38 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj39 = classReader26.readConst((int) (short) 4, charArray38);
        byte[] byteArray40 = classReader26.b;
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray40, 29441, 1698786926);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "" + "'", obj39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(40, "L749737959");
        org.mockito.asm.Attribute attribute82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.getItem(0);
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readByte(4);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (-889275714));
        long long38 = classReader26.readLong(22);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 864692228017815554L + "'", long38 == 864692228017815554L);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter37.visitAnnotation("L1952894981", true);
        org.mockito.asm.Attribute attribute41 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter37.visitAttribute(attribute41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int29 = classWriter1.newNameType("L1162526488", "L81546457");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMethodInsn((int) (short) 17784, "L590059745", "L967793538", "L1518174784");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor16.visitAnnotation("L1692352756", false);
        methodVisitor16.visitMaxs(655616, 199680);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        java.lang.String[] strArray38 = classReader26.getInterfaces();
        int int40 = classReader26.readByte(21);
        byte[] byteArray41 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        short short71 = classReader69.readShort((int) (byte) 0);
        int int73 = classReader69.readUnsignedShort((int) ' ');
        int int75 = classReader69.readInt(0);
        java.lang.String[] strArray76 = classReader69.getInterfaces();
        int int77 = classReader69.header;
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader69, 104);
        char[] charArray82 = new char[] { '4' };
        java.lang.Object obj83 = classReader69.readConst(8, charArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = classReader26.readUTF8(655616, charArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 33 + "'", int40 == 33);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -13570 + "'", short71 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2560 + "'", int73 == 2560);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-889275714) + "'", int75 == (-889275714));
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 90 + "'", int77 == 90);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[4]");
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + "RuntimeVisibleAnnotations" + "'", obj83, "RuntimeVisibleAnnotations");
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String[] strArray12 = classReader7.getInterfaces();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter14.newConst((java.lang.Object) (short) 1);
        classWriter14.visitSource("", "L2000102916");
        int int24 = classWriter14.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter14.visitAnnotation("L1601838046", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter14.visitAnnotation("", false);
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = methodVisitor41.visitAnnotation("L809431533", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor41.visitAnnotation("L85690983", true);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label55 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter57.newMethod("", "", "hi!", true);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter57.visitMethod(0, "", "", "hi!", strArray71);
        label55.info = strArray71;
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter50.visitMethod((int) (short) 100, "", "hi!", "", strArray71);
        methodVisitor74.visitMethodInsn(7, "L624707113", "hi!", "L1847716459");
        methodVisitor74.visitIincInsn((int) (short) 3072, 13);
        methodVisitor41.visitLdcInsn((java.lang.Object) (short) 3072);
        methodVisitor41.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor41.visitAnnotation("L426422007", false);
        methodVisitor41.visitVarInsn(50331648, 50331648);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        byte[] byteArray36 = classWriter35.toByteArray();
        java.lang.Class<?> wildcardClass37 = classWriter35.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 16);
        int int41 = classReader26.getAccess();
        java.lang.String str42 = classReader26.getSuperName();
        int int43 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader26.readUnsignedShort(65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(875903244);
        int int4 = classWriter1.newNameType("L1315842236", "L1330884173");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 458753);
        int int41 = classReader26.getItem(4);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        java.lang.String str44 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter46.newConst((java.lang.Object) (short) 1);
        classWriter46.visitSource("", "L2000102916");
        int int56 = classWriter46.newMethod("L709341642", "L2096601958", "L172254079", false);
        org.mockito.asm.Attribute[] attributeArray57 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter46, attributeArray57, 117440769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 23 + "'", int41 == 23);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(attributeArray57);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor16.visitAnnotationDefault();
        annotationVisitor83.visitEnum("L143726105", "L1999236766", "L1368708044");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1390720790" + "'", str75, "L1390720790");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(51966);
        classWriter1.visitEnd();
        int int5 = classWriter1.newNameType("L1823521374", "L1605224709");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = classReader8.readLong((int) (short) 2816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 11, 76, 49, 56, 50, 51, 53, 50, 49, 51, 55, 52, 1, 0, 11, 76, 49, 54, 48, 53, 50, 50, 52, 55, 48, 57, 12, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitIincInsn((int) (short) 0, (int) ' ');
        methodVisitor16.visitMultiANewArrayInsn("L590059745", 2);
        methodVisitor16.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMultiANewArrayInsn("L842833106", 25);
        methodVisitor16.visitMultiANewArrayInsn("L1936126716", 28532);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        int int35 = classWriter1.newMethod("L1086414642", "", "L419471195", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        short short71 = classReader69.readShort((int) (byte) 0);
        int int73 = classReader69.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader69, 0);
        int int76 = classReader69.getAccess();
        java.lang.String str77 = classReader69.getSuperName();
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader69, 10);
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter1.visitField(17, "L917225789", "L172254079", "L590888141", (java.lang.Object) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor80.visitAnnotation("L467340186", false);
        annotationVisitor83.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -13570 + "'", short71 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2560 + "'", int73 == 2560);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(fieldVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader16.readUnsignedShort((int) (short) 21353);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21353");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIntInsn(0, (int) (byte) 10);
        methodVisitor16.visitIincInsn(26, (int) (short) 0);
        methodVisitor16.visitIntInsn(0, (-1107296256));
        methodVisitor16.visitCode();
        methodVisitor16.visitTypeInsn(11, "L1497855016");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor16.visitParameterAnnotation(16777223, "L1370122910", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        classWriter35.visitEnd();
        java.lang.String[] strArray72 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter35.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter9.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod(78, "L1936126716", "L1386483578", "L728847777", strArray72);
        classWriter1.visitSource("L809431533", "L688061379");
        byte[] byteArray79 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray79, (int) (short) -13570, 167837696);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 0, 1, 0, 11, 76, 49, 57, 51, 54, 49, 50, 54, 55, 49, 54, 1, 0, 11, 76, 49, 51, 56, 54, 52, 56, 51, 53, 55, 56, 1, 0, 11, 76, 49, 54, 48, 49, 56, 51, 56, 48, 52, 54, 7, 0, 4, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 7, 0, 6, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 76, 55, 50, 56, 56, 52, 55, 55, 55, 55, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 78, 0, 2, 0, 3, 0, 2, 0, 8, 0, 0, 0, 6, 0, 2, 0, 5, 0, 7, 0, 9, 0, 0, 0, 2, 0, 10, 0, 2, 0, 11, 0, 0, 0, 2, 0, 6, 0, 12, 0, 0, 0, 10, 76, 54, 56, 56, 48, 54, 49, 51, 55, 57]");
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitMaxs((-21316096), (-1161953280));
        methodVisitor25.visitMethodInsn((int) (byte) 0, "L598988683", "L64402136", "L1169320665");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor25.visitAnnotation("", true);
        methodVisitor25.visitVarInsn(12, 779);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        methodVisitor45.visitFieldInsn(8, "hi!", "", "");
        methodVisitor45.visitTypeInsn((int) (byte) 100, "");
        methodVisitor25.visitLdcInsn((java.lang.Object) (byte) 100);
        methodVisitor25.visitVarInsn(12, (-1107296256));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(0);
        int int84 = classWriter82.newConst((java.lang.Object) (short) 1);
        classWriter82.visitSource("", "");
        label79.info = "";
        int int89 = label79.getOffset();
        java.lang.String str90 = label79.toString();
        java.lang.Object obj91 = label79.info;
        int int92 = label79.getOffset();
        java.lang.Object obj93 = null;
        label79.info = obj93;
        java.lang.Object obj95 = label79.info;
        methodVisitor25.visitJumpInsn(201326848, label79);
        methodVisitor25.visitIincInsn(1768777046, (int) (short) 2816);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L1451651083" + "'", str90, "L1451651083");
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + "" + "'", obj91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        int int39 = classReader26.getAccess();
        java.lang.String str40 = classReader26.getSuperName();
        long long42 = classReader26.readLong(30);
        java.lang.String str43 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1136895056675841L + "'", long42 == 1136895056675841L);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        int int67 = classReader65.readUnsignedShort((int) (byte) 0);
        java.lang.String str68 = classReader65.getSuperName();
        short short70 = classReader65.readShort(8);
        int int72 = classReader65.readByte(19);
        java.lang.String str73 = classReader65.getSuperName();
        java.lang.String[] strArray74 = classReader65.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor75 = classWriter34.visitMethod(26, "L1702196508", "L769978529", "", strArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 51966 + "'", int67 == 51966);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) 10 + "'", short70 == (short) 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 104 + "'", int72 == 104);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        byte[] byteArray31 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray31, 61, 26729);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray31);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        byte[] byteArray37 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray37, 655616, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        int int64 = classReader62.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader62, (int) '4');
        int int68 = classReader62.readUnsignedShort(5);
        int int70 = classReader62.getItem(1);
        byte[] byteArray71 = classReader62.b;
        java.lang.String str72 = classReader62.getSuperName();
        short short74 = classReader62.readShort((int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(63, "L884076874", "L430363814", "L1083553839", (java.lang.Object) short74);
        fieldVisitor75.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = fieldVisitor75.visitAnnotation("L430363814", false);
        org.mockito.asm.Attribute attribute80 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor75.visitAttribute(attribute80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 51966 + "'", int64 == 51966);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -13570 + "'", short74 == (short) -13570);
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        long long41 = classReader39.readLong(18);
        int int42 = classReader39.getAccess();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader39, (int) (short) 4);
        // The following exception was thrown during execution in test generation
        try {
            short short46 = classReader39.readShort((int) (short) 17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17784");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 245561770347856128L + "'", long41 == 245561770347856128L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitFieldInsn(10, "L1962189950", "L1028579140", "");
        methodVisitor25.visitFieldInsn(20, "L488861128", "L1505866272", "L1952894981");
        methodVisitor25.visitFieldInsn(1751720204, "L911323346", "L1705966817", "L26244550");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor25.visitAnnotation("L1855754182", false);
        methodVisitor25.visitMaxs(779, 512);
        org.mockito.asm.Attribute attribute81 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray36, 0, (int) (byte) 1);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray36, 611177, 62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        short short31 = classReader26.readShort(8);
        int int33 = classReader26.readByte(19);
        java.lang.String str34 = classReader26.getSuperName();
        java.lang.String[] strArray35 = classReader26.getInterfaces();
        int int37 = classReader26.readUnsignedShort(34);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 10 + "'", short31 == (short) 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 104 + "'", int33 == 104);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 512 + "'", int37 == 512);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor16.visitAnnotation("L143726105", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor16.visitParameterAnnotation(26913, "L1704225947", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L734856663" + "'", str75, "L734856663");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        int int40 = classWriter36.newField("L1952894981", "L541901146", "L2132185573");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        int int66 = classWriter46.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter46.visitAnnotation("", true);
        byte[] byteArray70 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        int int73 = classReader71.readUnsignedShort((int) (byte) 0);
        short short75 = classReader71.readShort(7);
        int int76 = classReader71.header;
        java.lang.String[] strArray77 = classReader71.getInterfaces();
        java.lang.String[] strArray78 = classReader71.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter36.visitMethod(12850, "L275489687", "L1269304540", "L2096601958", strArray78);
        methodVisitor79.visitMultiANewArrayInsn("L1434815605", (int) (short) 1792);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 51966 + "'", int73 == 51966);
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) 0 + "'", short75 == (short) 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 90 + "'", int76 == 90);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int7 = classWriter1.newField("hi!", "L275489687", "L1028579140");
        classWriter1.visitInnerClass("L1368708044", "", "L1075066296", (-21316096));
        int int15 = classWriter1.newNameType("L1100502214", "L1037094794");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 17784);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(2);
        classWriter29.visitOuterClass("L488861128", "L745089702", "");
        int int36 = classWriter29.newNameType("L264795169", "L1429849124");
        classWriter29.visitSource("L1208026886", "L1930348385");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(5);
        classWriter46.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int53 = classWriter46.newClass("");
        byte[] byteArray54 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray54, 0, (int) '#');
        int int58 = classReader57.header;
        java.lang.String[] strArray59 = classReader57.getInterfaces();
        classWriter29.visit(163, 3, "L590059745", "L1566032477", "L1036976475", strArray59);
        classWriter22.visit(6, (int) (short) 3072, "L728847777", "L624707113", "L1266856712", strArray59);
        classWriter1.visit(34, (int) (byte) 0, "L829120697", "L1769982856", "L1485760031", strArray59);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 40 + "'", int58 == 40);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitCode();
        methodVisitor25.visitIincInsn(14, (int) (short) 0);
        methodVisitor25.visitTypeInsn((int) (byte) 1, "L1004763019");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor46 = methodVisitor25.visitParameterAnnotation(104, "L150818074", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn(63, 0);
        methodVisitor25.visitIincInsn(31, 2561);
        methodVisitor25.visitMultiANewArrayInsn("L1710158961", (int) (short) 21359);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(26, "L1370122910");
        methodVisitor25.visitMultiANewArrayInsn("L1967259122", 1751720204);
        methodVisitor25.visitIincInsn(26729, (int) (short) 256);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        java.lang.String str30 = classReader26.getSuperName();
        java.lang.String str31 = classReader26.getSuperName();
        java.lang.String str32 = classReader26.getSuperName();
        java.lang.String str33 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            short short35 = classReader26.readShort((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(61);
        int int4 = classWriter1.newNameType("L1771090025", "L541901146");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        int int37 = classReader26.getAccess();
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (short) 1);
        classWriter40.visitSource("", "L2000102916");
        int int50 = classWriter40.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray51 = classWriter40.toByteArray();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(5);
        classWriter57.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int64 = classWriter57.newClass("");
        byte[] byteArray65 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray65, 0, (int) '#');
        int int69 = classReader68.header;
        java.lang.String[] strArray70 = classReader68.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter40.visitMethod((int) (short) -1, "L1075066296", "L1628304347", "L264795169", strArray70);
        classWriter40.visitInnerClass("L1262041297", "L95180820", "L710635264", 0);
        int int78 = classWriter40.newClass("L234032146");
        org.mockito.asm.Attribute[] attributeArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter40, attributeArray79, 101);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 40 + "'", int69 == 40);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 18 + "'", int78 == 18);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 23);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = classReader26.readLong(554434561);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        int int31 = classReader26.readByte(8);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 16);
        classWriter33.visitSource("L2059908172", "L1429849124");
        byte[] byteArray37 = classWriter33.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 11, 76, 50, 48, 53, 57, 57, 48, 56, 49, 55, 50, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 2, 0, 10, 0, 12, 0, 0, 0, 11, 76, 49, 52, 50, 57, 56, 52, 57, 49, 50, 52]");
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        int int37 = classReader26.getAccess();
        int int39 = classReader26.readByte(100);
        java.lang.String str40 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            short short42 = classReader26.readShort(167837696);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 167837696");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 156461415);
        int int42 = classWriter40.newUTF8("L248471706");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader26.readByte(28532);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28532");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        annotationVisitor74.visitEnum("L426422007", "L1287376048", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor74.visitAnnotation("L1936126716", "L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = annotationVisitor74.visitArray("L1004763019");
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(0);
        classWriter86.visitEnd();
        int int89 = classWriter86.newClass("L2089731244");
        annotationVisitor74.visit("L468980830", (java.lang.Object) int89);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        int int36 = classWriter31.newMethod("L624707113", "L1017623370", "L2000102916", false);
        byte[] byteArray37 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            short short40 = classReader38.readShort((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 7, 0, 10, 1, 0, 11, 76, 49, 48, 49, 55, 54, 50, 51, 51, 55, 48, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 12, 0, 13, 10, 0, 11, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L242883751", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("L1628304347", false);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L815303353", "L1210370409", "L1169320665");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        classWriter38.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        classWriter49.visitOuterClass("hi!", "", "");
        int int61 = classWriter49.newNameType("hi!", "hi!");
        int int64 = classWriter49.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(0);
        int int76 = classWriter71.newMethod("", "", "hi!", true);
        java.lang.String[] strArray85 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter71.visitMethod(0, "", "", "hi!", strArray85);
        classWriter49.visit(5, 6, "", "", "", strArray85);
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter38.visitMethod((int) (short) 0, "", "", "", strArray85);
        byte[] byteArray89 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader90 = new org.mockito.asm.ClassReader(byteArray89);
        int int92 = classReader90.readByte(7);
        org.mockito.asm.ClassWriter classWriter94 = new org.mockito.asm.ClassWriter(classReader90, (int) '4');
        int int96 = classReader90.readByte(32);
        int int97 = classWriter1.newConst((java.lang.Object) 32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(methodVisitor88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 110 + "'", int96 == 110);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 12 + "'", int97 == 12);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitTypeInsn((int) (short) 0, "L897597087");
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L1589078908", 10);
        methodVisitor25.visitCode();
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.Label label37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitJumpInsn(554434561, label37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(8, "hi!", "", "", strArray59);
        methodVisitor61.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter66.visitMethod(0, "", "", "hi!", strArray80);
        methodVisitor81.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label85 = new org.mockito.asm.Label();
        methodVisitor81.visitLabel(label85);
        java.lang.String str87 = label85.toString();
        int[] intArray91 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] {};
        methodVisitor61.visitLookupSwitchInsn(label85, intArray91, labelArray92);
        java.lang.Object obj94 = label85.info;
        methodVisitor25.visitLabel(label85);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor25.visitParameterAnnotation((int) (byte) 0, "L1471680267", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L1389093241" + "'", str87, "L1389093241");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray92);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        long long74 = classReader68.readLong((int) '#');
        int int76 = classReader68.getItem(0);
        java.lang.String str77 = classReader68.getSuperName();
        short short79 = classReader68.readShort(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter1.visitField((int) (short) -13570, "L529122729", "L75359331", "L2037791973", (java.lang.Object) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = fieldVisitor82.visitAnnotation("L976656549", true);
        annotationVisitor85.visitEnum("L1949580175", "L343526401", "L939135397");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1126999590795363L + "'", long74 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 1792 + "'", short79 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        int int30 = classReader26.header;
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 82);
        int int35 = classWriter33.newUTF8("L978646804");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 90 + "'", int30 == 90);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        long long35 = classReader26.readLong(61);
        short short37 = classReader26.readShort(19);
        java.lang.String str38 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader26.readUnsignedShort(12850);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12850");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7278098581565042292L + "'", long35 == 7278098581565042292L);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 26729 + "'", short37 == (short) 26729);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("", "L1847716459", "", (int) (byte) 10);
        classWriter1.visitOuterClass("L2062266913", "L590888141", "\001");
        int int77 = classWriter1.newUTF8("L242883751");
        int int79 = classWriter1.newClass("L976656549");
        classWriter1.visitOuterClass("L2102614230", "L674940947", "L1899714602");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20 + "'", int77 == 20);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter10.visitMethod(0, "", "", "hi!", strArray24);
        classWriter1.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray24);
        byte[] byteArray27 = classWriter1.toByteArray();
        byte[] byteArray28 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter41.newConst((java.lang.Object) (short) 1);
        classWriter41.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        classWriter52.visitOuterClass("hi!", "", "");
        int int64 = classWriter52.newNameType("hi!", "hi!");
        int int67 = classWriter52.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(0);
        int int79 = classWriter74.newMethod("", "", "hi!", true);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter74.visitMethod(0, "", "", "hi!", strArray88);
        classWriter52.visit(5, 6, "", "", "", strArray88);
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter41.visitMethod((int) (short) 0, "", "", "", strArray88);
        classWriter34.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor93 = classWriter1.visitMethod(21, "L375606602", "L436759653", "L1371899104", strArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNotNull(methodVisitor91);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitIincInsn((int) (byte) 10, (int) (short) 1792);
        methodVisitor25.visitIincInsn(8, 63);
        methodVisitor25.visitInsn(196864);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int7 = classWriter1.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray8 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L1162526488", "L1936126716", "L1221801792", (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        classWriter20.visitOuterClass("hi!", "", "");
        int int32 = classWriter20.newNameType("hi!", "hi!");
        int int35 = classWriter20.newNameType("hi!", "");
        java.lang.Object obj40 = null;
        org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter20.visitField(9, "L1601838046", "L2062266913", "L680573325", obj40);
        classWriter20.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter20.visitSource("L75359331", "L1930348385");
        classWriter20.visitEnd();
        byte[] byteArray50 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray50, 0, (int) (short) -1);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        classWriter1.visit(875903244, 11, "L1589078908", "L1471680267", "L529122729", strArray54);
        classWriter1.visitSource("", "L1640056714");
        classWriter1.visitInnerClass("L474002941", "L1441910664", "L777355388", 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor41);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        java.lang.String str34 = classReader26.getSuperName();
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 61);
        int int39 = classWriter37.newClass("L876153027");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L136145448", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        int int50 = classWriter30.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("", true);
        byte[] byteArray54 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        short short57 = classReader55.readShort((int) (byte) 0);
        int int59 = classReader55.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader55, 0);
        java.lang.String[] strArray62 = classReader55.getInterfaces();
        classWriter1.visit((int) (byte) -1, 12592, "L745089702", "L1413182688", "L579675851", strArray62);
        int int68 = classWriter1.newMethod("L2132431650", "L1808974214", "L772357663", false);
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) -13570 + "'", short57 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2560 + "'", int59 == 2560);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 25 + "'", int68 == 25);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor16.visitAnnotation("L1368708044", true);
        methodVisitor16.visitVarInsn(202, 458753);
        methodVisitor16.visitLdcInsn((java.lang.Object) "L552318631");
        methodVisitor16.visitMaxs(104, 875903244);
        methodVisitor16.visitMaxs(6, (int) (short) 4);
        methodVisitor16.visitMethodInsn(61, "L959183788", "L364320201", "L964574936");
        methodVisitor16.visitInsn(43);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.getItem(0);
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readByte(4);
        int int35 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.readUnsignedShort(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor15.visitAnnotation("L275489687", "L275489687");
        annotationVisitor18.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor18.visitAnnotation("L295165602", "L841843626");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor22.visitArray("L288314649");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        methodVisitor42.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor42.visitCode();
        methodVisitor42.visitFieldInsn((int) (short) 1, "L75359331", "L1930348385", "L2000102916");
        java.lang.Class<?> wildcardClass54 = methodVisitor42.getClass();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor24.visit("L1076056118", (java.lang.Object) wildcardClass54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value class org.mockito.asm.MethodWriter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            short short37 = classReader35.readShort(1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1034");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor16.visitAnnotation("L238476442", true);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn(30, 1164862316);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        int int42 = classWriter30.newNameType("hi!", "hi!");
        int int45 = classWriter30.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        classWriter30.visit(5, 6, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter19.visitMethod((int) (short) 0, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter1.visitMethod((int) '#', "L242883751", "L728847777", "L728847777", strArray66);
        int int72 = classWriter1.newClass("L1287376048");
        byte[] byteArray73 = classWriter1.toByteArray();
        int int76 = classWriter1.newNameType("L81546457", "L1166221053");
        classWriter1.visitOuterClass("L1076056118", "L152278810", "L2127085380");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 17, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 1, 0, 10, 76, 55, 50, 56, 56, 52, 55, 55, 55, 55, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 7, 0, 11, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 35, 0, 9, 0, 10, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 14, 0, 0, 0, 2, 0, 10, 0, 2, 0, 15, 0, 0, 0, 4, 0, 6, 0, 7, 0, 16, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 19 + "'", int76 == 19);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor15.visitAnnotation("L275489687", "L275489687");
        annotationVisitor18.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor18.visitAnnotation("L295165602", "L841843626");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor22.visitArray("L288314649");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        int int47 = classWriter27.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter27.visitAnnotation("", true);
        byte[] byteArray51 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        int int54 = classReader52.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader52, (int) '4');
        long long58 = classReader52.readLong(2);
        int int59 = classReader52.getAccess();
        byte[] byteArray60 = classReader52.b;
        int int62 = classReader52.readInt(12);
        java.lang.String[] strArray63 = classReader52.getInterfaces();
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader52, 9);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(classReader52, 22);
        classWriter67.visitSource("L430363814", "L436759653");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor24.visit("L1928858580", (java.lang.Object) classWriter67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@15ffae7b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 51966 + "'", int54 == 51966);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-4990551337079930870L) + "'", long58 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 458753 + "'", int62 == 458753);
        org.junit.Assert.assertNotNull(strArray63);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        byte[] byteArray47 = classWriter1.toByteArray();
        int int52 = classWriter1.newMethod("L30632432", "L914282524", "L1601838046", false);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter54.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter62.newMethod("", "", "hi!", true);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter62.visitMethod(0, "", "", "hi!", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter54.visitMethod(8, "hi!", "", "", strArray76);
        methodVisitor78.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor78.visitAnnotationDefault();
        methodVisitor78.visitMaxs((int) ' ', (int) '4');
        methodVisitor78.visitMaxs(13, 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor78.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor78.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = classWriter1.newConst((java.lang.Object) methodVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@49ff9e00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        annotationVisitor24.visitEnum("L897597087", "L636727990", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor24.visitAnnotation("L976656549", "L426422007");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = annotationVisitor24.visitAnnotation("L1068224943", "L1075066296");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor24.visitAnnotation("L1213314048", "L1150125104");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor37.visitAnnotation("L1945103414", "L1373865546");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        methodVisitor33.visitCode();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor51.visitCode();
        methodVisitor51.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        methodVisitor78.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label82 = new org.mockito.asm.Label();
        methodVisitor78.visitLabel(label82);
        java.lang.String str84 = label82.toString();
        methodVisitor51.visitLineNumber((int) (short) -1, label82);
        label82.info = (-1.0f);
        java.lang.Object obj88 = label82.info;
        java.lang.String str89 = label82.toString();
        java.lang.String str90 = label82.toString();
        java.lang.Object obj91 = label82.info;
        java.lang.Object obj92 = label82.info;
        methodVisitor33.visitLabel(label82);
        methodVisitor33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor33.visitAnnotation("L626622958", false);
        methodVisitor33.visitInsn(30);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L840739929" + "'", str84, "L840739929");
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + (-1.0f) + "'", obj88, (-1.0f));
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "L840739929" + "'", str89, "L840739929");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L840739929" + "'", str90, "L840739929");
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + (-1.0f) + "'", obj91, (-1.0f));
        org.junit.Assert.assertEquals("'" + obj92 + "' != '" + (-1.0f) + "'", obj92, (-1.0f));
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor16.visitParameterAnnotation((int) (byte) 0, "L1633827670", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L471701904");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = fieldVisitor12.visitAnnotation("L367225907", true);
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L1429849124", "L535346328", "L110679537", (int) (byte) -1);
        int int33 = classWriter1.newUTF8("L1283200231");
        classWriter1.visitInnerClass("L781112982", "L103257873", "L1766371387", (int) (short) 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 18 + "'", int33 == 18);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        classWriter1.visitOuterClass("L488861128", "L745089702", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1714745954", "L1687335926", "");
        int int12 = classWriter1.newUTF8("L2088893332");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 24);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 190);
        int int42 = classReader26.getItem((int) (short) 3);
        short short44 = classReader26.readShort(37);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader26.readInt(50331648);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 17 + "'", int42 == 17);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 256 + "'", short44 == (short) 256);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        int int54 = classWriter1.newUTF8("L538737171");
        org.mockito.asm.Attribute attribute55 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitVarInsn(11, 33);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.getAccess();
        int int31 = classReader26.readUnsignedShort(104);
        int int33 = classReader26.getItem(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        byte[] byteArray9 = classReader8.b;
        int int10 = classReader8.header;
        java.lang.String[] strArray11 = classReader8.getInterfaces();
        byte[] byteArray12 = classReader8.b;
        // The following exception was thrown during execution in test generation
        try {
            short short14 = classReader8.readShort(1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1034");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        byte[] byteArray47 = classWriter1.toByteArray();
        byte[] byteArray48 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("", false);
        java.lang.Object obj53 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor51.visit("L689023041", obj53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitMultiANewArrayInsn("L897597087", 100);
        methodVisitor16.visitIincInsn((int) (short) 2387, (-889275714));
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        label35.info = strArray51;
        java.lang.Object obj54 = label35.info;
        java.lang.String str55 = label35.toString();
        methodVisitor16.visitLineNumber(0, label35);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = label35.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L987312362" + "'", str55, "L987312362");
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        java.lang.Object[] objArray20 = null;
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter23.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        short short62 = classReader60.readShort((int) (byte) 0);
        int int64 = classReader60.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader60, 0);
        java.lang.String[] strArray67 = classReader60.getInterfaces();
        classWriter23.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray67);
        methodVisitor17.visitFrame(8, 15, objArray20, (-889275714), (java.lang.Object[]) strArray67);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor17.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor17.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = methodVisitor17.visitAnnotationDefault();
        methodVisitor17.visitFieldInsn((int) (short) -17730, "L1580797503", "L266472455", "L1676018134");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) -13570 + "'", short62 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2560 + "'", int64 == 2560);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readInt((int) (byte) 100);
        java.lang.String str38 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader26.readInt(17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 65536 + "'", int37 == 65536);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray34, 4, (int) (short) 12848);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray34, 2561, 875903244);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        byte[] byteArray26 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) '#');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader29, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        short short71 = classReader69.readShort((int) (byte) 0);
        int int73 = classReader69.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader69, 0);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader69, 0);
        int int79 = classReader69.getItem(2);
        java.lang.String[] strArray80 = classReader69.getInterfaces();
        classWriter37.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter31.visitMethod((int) '#', "L82136369", "L1629650344", "L1287617384", strArray80);
        classWriter1.visit(163, 156461415, "L1952894981", "L284303737", "", strArray80);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L683506282", false);
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -13570 + "'", short71 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2560 + "'", int73 == 2560);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 14 + "'", int79 == 14);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(16, "L1928858580");
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitCode();
        methodVisitor16.visitFieldInsn(90, "L1715729238", "L624707113", "L172254079");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor16.visitAnnotation("L364320201", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = annotationVisitor93.visitAnnotation("L1550989705", "L519618394");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L152223686" + "'", str75, "L152223686");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        short short34 = classReader29.readShort(52);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader29.getItem(1793);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1793");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 2387 + "'", short34 == (short) 2387);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 4);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter39.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        int int31 = classReader26.readByte(8);
        int int32 = classReader26.header;
        byte[] byteArray33 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readByte(3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L273540987");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(43);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        methodVisitor25.visitIntInsn((int) '4', 3);
        methodVisitor25.visitIincInsn(5, 36);
        methodVisitor25.visitMultiANewArrayInsn("L446511586", (int) (short) 12848);
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.getItem(14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(5, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = methodVisitor16.visitAnnotation("L1707932050", false);
        methodVisitor16.visitMethodInsn(23, "", "L598988683", "L1638849034");
        methodVisitor16.visitVarInsn(50331648, 48640);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        int int11 = classWriter1.newMethod("L1013343419", "\001", "L488861128", true);
        org.mockito.asm.Attribute attribute12 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        byte[] byteArray70 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L2000102916", "L2062266913", "L2062266913");
        int int77 = classWriter1.newNameType("L532079015", "L1808974214");
        org.mockito.asm.Attribute attribute78 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 1, 0, 10, 76, 53, 51, 53, 51, 52, 54, 51, 50, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 10, 0, 2, 0, 11, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 13, 0, 1, 0, 14, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20 + "'", int77 == 20);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitInsn((int) (short) 1);
        methodVisitor25.visitInsn(156461415);
        methodVisitor25.visitFieldInsn(78, "", "L2127085380", "L275489687");
        methodVisitor25.visitIntInsn(26, (int) (short) 4);
        methodVisitor25.visitMaxs(117440769, 65792);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1745031302");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.Object obj16 = null;
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(21, "hi!", "L1192381465", "L419471195", obj16);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor17.visitAnnotation("L2039247828", true);
        annotationVisitor20.visitEnum("L1202802091", "L20785338", "L363565416");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        classWriter34.visitSource("L1266856712", "L2127085380");
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter34.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.getItem(0);
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readByte(4);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (-889275714));
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        classWriter38.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        classWriter49.visitOuterClass("hi!", "", "");
        int int61 = classWriter49.newNameType("hi!", "hi!");
        int int64 = classWriter49.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(0);
        int int76 = classWriter71.newMethod("", "", "hi!", true);
        java.lang.String[] strArray85 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter71.visitMethod(0, "", "", "hi!", strArray85);
        classWriter49.visit(5, 6, "", "", "", strArray85);
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter38.visitMethod((int) (short) 0, "", "", "", strArray85);
        int int90 = classWriter38.newUTF8("L1221801792");
        int int91 = classWriter36.newConst((java.lang.Object) int90);
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter36.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(methodVisitor88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray30, 28532, (int) (short) 780);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        classWriter1.visitSource("L418802221", "L1413182688");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1086414642", false);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int11 = classWriter9.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter9.visitMethod(8, "hi!", "", "", strArray31);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter9.visitAnnotation("hi!", false);
        byte[] byteArray37 = classWriter9.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        annotationVisitor6.visit("L684697689", (java.lang.Object) byteArray37);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray37);
        int int42 = classReader40.readByte(78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = classReader40.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 105 + "'", int42 == 105);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        classWriter1.visitInnerClass("L1017623370", "L1178822359", "L680573325", (int) '#');
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        methodVisitor16.visitIntInsn(1, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor16.visitAnnotationDefault();
        annotationVisitor35.visitEnum("L1495045421", "L901287164", "L594880957");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitVarInsn(26, 12);
        methodVisitor16.visitIincInsn(33, 1793);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.getItem(2);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor37, 78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = classReader9.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        byte[] byteArray32 = classReader26.b;
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String str62 = classReader61.getSuperName();
        char[] charArray68 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj69 = classReader61.readConst(6, charArray68);
        char[] charArray77 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str78 = classReader61.readUTF8((int) '#', charArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = classReader33.readUTF8(156461415, charArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "\001" + "'", obj69, "\001");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\000" + "'", str78, "\000");
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitInsn((int) (short) 17784);
        methodVisitor16.visitMaxs((int) (short) 100, 90);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        int int32 = classWriter1.newUTF8("L1847716459");
        classWriter1.visitSource("L237538368", "L791392221");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String str36 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 51966);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter40.visitMethod(8, "hi!", "", "", strArray62);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter40.visitAnnotation("hi!", false);
        int int70 = classWriter40.newNameType("L624707113", "L897597087");
        int int75 = classWriter40.newMethod("L884076874", "L1291288126", "L2000102916", false);
        int int76 = classWriter38.newConst((java.lang.Object) false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter38.visitAnnotation("L2082140197", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = annotationVisitor79.visitAnnotation("L1068224943", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 13 + "'", int75 == 13);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader37.readByte((int) (short) 8460);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8460");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        methodVisitor33.visitIntInsn((-889275714), (int) '#');
        methodVisitor33.visitInsn(1751720204);
        methodVisitor33.visitEnd();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        methodVisitor56.visitCode();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter59.visitMethod(0, "", "", "hi!", strArray73);
        methodVisitor74.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        methodVisitor74.visitLabel(label78);
        java.lang.String str80 = label78.toString();
        label78.info = ' ';
        java.lang.Object obj83 = label78.info;
        methodVisitor56.visitLabel(label78);
        java.lang.String str85 = label78.toString();
        methodVisitor33.visitLabel(label78);
        java.lang.Class<?> wildcardClass87 = label78.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L906648802" + "'", str80, "L906648802");
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + ' ' + "'", obj83, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L906648802" + "'", str85, "L906648802");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        org.mockito.asm.FieldVisitor fieldVisitor37 = classWriter31.visitField(909717811, "L616390843", "L120720304", "L594418938", (java.lang.Object) "\001");
        fieldVisitor37.visitEnd();
        fieldVisitor37.visitEnd();
        fieldVisitor37.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor37.visitAnnotation("L1967552389", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(fieldVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        classWriter1.visitOuterClass("L1387910543", "L897597087", "L1013343419");
        java.lang.Class<?> wildcardClass25 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readUnsignedShort(29);
        int int35 = classReader26.getAccess();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(8);
        int int43 = classWriter38.newMethod("L275489687", "L275489687", "L275489687", false);
        byte[] byteArray44 = classWriter38.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter38, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 512 + "'", int34 == 512);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 1, 12, 0, 1, 0, 1, 10, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        short short33 = classReader26.readShort((int) '#');
        byte[] byteArray34 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readUnsignedShort((int) (short) -16896);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -16896");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 4 + "'", short33 == (short) 4);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        long long12 = classReader7.readLong(4);
        byte[] byteArray13 = classReader7.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(classReader7, 19);
        byte[] byteArray16 = classReader7.b;
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        java.lang.Class<?> wildcardClass18 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 459008L + "'", long12 == 459008L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        classWriter67.visitOuterClass("hi!", "", "");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (short) 3072, (int) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor16.visitAnnotation("L2133258398", false);
        methodVisitor16.visitMultiANewArrayInsn("L143726105", 78);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMethodInsn(16, "L2045712064", "L1208026886", "L984535763");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader33, 0);
        int int43 = classReader33.getItem(2);
        java.lang.String[] strArray44 = classReader33.getInterfaces();
        classWriter1.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray44);
        byte[] byteArray46 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = classReader47.getItem(25968);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25968");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 10, 1, 0, 7, 1, 0, 11, 76, 49, 48, 48, 52, 55, 54, 51, 48, 49, 57, 7, 0, 1, 1, 0, 11, 76, 49, 50, 56, 51, 50, 48, 48, 50, 51, 49, 1, 0, 11, 76, 50, 49, 50, 55, 48, 56, 53, 51, 56, 48, 7, 0, 4, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, -2, -70, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 2, 0, 3]");
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        short short38 = classReader26.readShort(19);
        int int40 = classReader26.readInt(0);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.getItem(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 26729 + "'", short38 == (short) 26729);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-889275714) + "'", int40 == (-889275714));
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        int int37 = classWriter1.newField("L680573325", "L242883751", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter1.visitAnnotation("L1287617384", true);
        classWriter1.visitEnd();
        int int46 = classWriter1.newMethod("L782129665", "L141363326", "", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        int int73 = classWriter53.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter53.visitAnnotation("", true);
        byte[] byteArray77 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        int int79 = classReader78.getAccess();
        byte[] byteArray80 = classReader78.b;
        java.lang.String[] strArray81 = classReader78.getInterfaces();
        classWriter1.visit((int) (short) 4, (int) (short) 3, "L34653613", "L694914824", "L875787534", strArray81);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 28 + "'", int46 == 28);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        classWriter1.visitSource("L1162526488", "L1287376048");
        org.mockito.asm.Attribute attribute13 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L275489687", true);
        fieldVisitor55.visitEnd();
        fieldVisitor55.visitEnd();
        fieldVisitor55.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = fieldVisitor55.visitAnnotation("L721083102", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor64);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        label31.info = strArray47;
        java.lang.String str50 = label31.toString();
        methodVisitor16.visitJumpInsn(24, label31);
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L2126863623" + "'", str50, "L2126863623");
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        classWriter35.visitOuterClass("L149220781", "L1386483578", "L1013343419");
        classWriter35.visitSource("L85690983", "L831655905");
        int int44 = classWriter35.newClass("L1793985281");
        classWriter35.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        byte[] byteArray7 = classWriter1.toByteArray();
        classWriter1.visitSource("L2039247828", "L364320201");
        classWriter1.visitEnd();
        classWriter1.visitSource("L2014806404", "L1611208075");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 4, 0, 0, 0, 0]");
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        java.lang.String[] strArray34 = classReader26.getInterfaces();
        int int36 = classReader26.readUnsignedShort(13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1792 + "'", int36 == 1792);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newClass("L59063553");
        int int13 = classWriter1.newUTF8("L1936126716");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        methodVisitor30.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor30.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor36.visitArray("L831655905");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor36.visitArray("L1769475365");
        int int41 = classWriter1.newConst((java.lang.Object) "L1769475365");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int70 = classReader68.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(classReader68, (int) '4');
        int int74 = classReader68.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(classReader68, (int) '#');
        byte[] byteArray77 = classReader68.b;
        java.lang.String str78 = classReader68.getSuperName();
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader68, 51966);
        int int83 = classWriter80.newNameType("L890847236", "L1945103414");
        int int84 = classWriter1.newConst((java.lang.Object) "L890847236");
        org.mockito.asm.Attribute attribute85 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 51966 + "'", int70 == 51966);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitIincInsn(13, 202);
        methodVisitor62.visitInsn((int) (byte) 10);
        methodVisitor62.visitFieldInsn((int) (short) -13570, "L1111133036", "L1396464054", "L40714478");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor62.visitAnnotation("", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        int int31 = classWriter1.newUTF8("L488861128");
        byte[] byteArray32 = classWriter1.toByteArray();
        java.lang.Class<?> wildcardClass33 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(65210);
        classWriter1.visitOuterClass("L916243867", "L1549350954", "L1161103829");
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitFieldInsn(6, "L976656549", "L535346328", "L2014806404");
        methodVisitor25.visitVarInsn(2560, 512);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = methodVisitor25.visitAnnotation("L1821467279", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = annotationVisitor67.visitAnnotation("L1137416384", "L1372769316");
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = annotationVisitor70.visitArray("L964927155");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "L2000102916");
        int int29 = classWriter19.newMethod("", "L2062266913", "L809431533", false);
        methodVisitor17.visitLdcInsn((java.lang.Object) "L2062266913");
        methodVisitor17.visitFieldInsn((-1107296256), "L999961130", "L1435737877", "L1110710417");
        methodVisitor17.visitMethodInsn((int) (short) 100, "L1589078908", "L598988683", "L127591338");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor44 = methodVisitor17.visitParameterAnnotation(51, "L445870120", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        int int36 = classReader26.getAccess();
        int int37 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = methodVisitor16.visitAnnotation("L1004763019", false);
        methodVisitor16.visitIincInsn((int) (short) 100, 16842755);
        methodVisitor16.visitInsn(14);
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitIntInsn((int) (byte) 10, 1751720204);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotation("L755949095", true);
        methodVisitor25.visitFieldInsn(104, "L59063553", "L749737959", "L620334303");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        methodVisitor64.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label68 = new org.mockito.asm.Label();
        methodVisitor64.visitLabel(label68);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter71.newConst((java.lang.Object) (short) 1);
        classWriter71.visitSource("", "");
        label68.info = "";
        int int78 = label68.getOffset();
        java.lang.String str79 = label68.toString();
        java.lang.Object obj80 = label68.info;
        int int81 = label68.getOffset();
        int int82 = label68.getOffset();
        methodVisitor25.visitLineNumber(1694564377, label68);
        methodVisitor25.visitMultiANewArrayInsn("L1028510473", 117440769);
        methodVisitor25.visitTypeInsn(13874, "L331709749");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L302994160" + "'", str79, "L302994160");
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + "" + "'", obj80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        int int35 = classReader26.readByte(19);
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray36, 27, 163);
        java.lang.Class<?> wildcardClass40 = byteArray36.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 104 + "'", int35 == 104);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        byte[] byteArray26 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) '#');
        int int30 = classReader29.header;
        java.lang.String[] strArray31 = classReader29.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter1.visitMethod((int) (short) -1, "L1075066296", "L1628304347", "L264795169", strArray31);
        methodVisitor32.visitMaxs(18, (int) (short) 100);
        methodVisitor32.visitInsn(202);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        byte[] byteArray63 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        short short66 = classReader64.readShort((int) (byte) 0);
        int int68 = classReader64.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader64, 0);
        int int71 = classReader64.getAccess();
        java.lang.String str72 = classReader64.getSuperName();
        int int74 = classReader64.readInt((int) (byte) 1);
        methodVisitor32.visitLdcInsn((java.lang.Object) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) -13570 + "'", short66 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2560 + "'", int68 == 2560);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-21316096) + "'", int74 == (-21316096));
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("L1142940414", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("", false);
        classWriter1.visitOuterClass("L580978075", "L1334226032", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 7, 0, 10, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readUnsignedShort((int) ' ');
        java.lang.String str33 = classReader26.getSuperName();
        java.lang.String str34 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readInt((int) (short) 3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2560 + "'", int32 == 2560);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label42 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        label42.info = strArray58;
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod((int) (short) 100, "", "hi!", "", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter37.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor67.visitAnnotation("L535346328", false);
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter1.visitField(7, "L1715729238", "L693982720", "L1490365060", (java.lang.Object) false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = fieldVisitor74.visitAnnotation("L809431533", true);
        annotationVisitor77.visitEnum("L1411298446", "L1583234446", "L535346328");
        annotationVisitor77.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = annotationVisitor77.visitArray("L130127010");
        annotationVisitor84.visitEnum("L859506825", "L1361142288", "L135289531");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 78);
        int int37 = classReader26.readUnsignedShort(9);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        classWriter39.visitInnerClass("", "", "", (int) ' ');
        classWriter39.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter39.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int76 = classWriter39.newNameType("L749737959", "L1601838046");
        classWriter39.visitEnd();
        org.mockito.asm.Attribute[] attributeArray78 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter39, attributeArray78, (int) (short) -16896);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2561 + "'", int37 == 2561);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 15 + "'", int76 == 15);
        org.junit.Assert.assertNotNull(attributeArray78);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 202);
        java.lang.String[] strArray14 = classReader9.getInterfaces();
        int int15 = classReader9.header;
        java.lang.Class<?> wildcardClass16 = classReader9.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 78 + "'", int15 == 78);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        int int44 = classReader26.getAccess();
        byte[] byteArray45 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            long long47 = classReader26.readLong(156461415);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        annotationVisitor24.visitEnum("hi!", "", "");
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(5);
        classWriter32.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray37 = classWriter32.toByteArray();
        label30.info = byteArray37;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader39, 1793);
        int int44 = classWriter41.newNameType("L242883751", "L1009580268");
        classWriter41.visitOuterClass("L1899113546", "L959574331", "L149220781");
        classWriter41.visitOuterClass("L1877128533", "L1002757230", "L1480783762");
        annotationVisitor24.visit("L2133258398", (java.lang.Object) "L1877128533");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = methodVisitor25.visitAnnotation("L3043237", true);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        methodVisitor67.visitFieldInsn(8, "hi!", "", "");
        methodVisitor67.visitTypeInsn((int) (byte) 100, "");
        methodVisitor67.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor67.visitInsn((int) (byte) 0);
        methodVisitor67.visitIincInsn((-1), 4);
        methodVisitor67.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor49.visit("L976618452", (java.lang.Object) methodVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@4e49649f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(104);
        classWriter1.visitEnd();
        int int7 = classWriter1.newMethod("L694914824", "L1019177379", "L1619769466", false);
        classWriter1.visitInnerClass("L774045562", "L146399554", "", 20);
        int int14 = classWriter1.newClass("L284303737");
        classWriter1.visitInnerClass("L1317000137", "L1821467279", "", 104);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 13 + "'", int14 == 13);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        int int37 = classReader26.readByte(23);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        int int13 = classReader7.readByte(0);
        int int14 = classReader7.header;
        int int15 = classReader7.header;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(classReader7, 254);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader7.readUnsignedShort((int) (short) 3909);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3909");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 202 + "'", int13 == 202);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 78 + "'", int14 == 78);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 78 + "'", int15 == 78);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitInnerClass("L136145448", "L959574331", "L541901146", 8);
        int int73 = classWriter1.newField("L120720304", "L1745031302", "L1357812716");
        classWriter1.visitInnerClass("L946793861", "L1988321994", "L427241356", 190);
        int int81 = classWriter1.newNameType("L24585100", "L720530545");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 30 + "'", int81 == 30);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        int int39 = classReader26.getAccess();
        java.lang.String str40 = classReader26.getSuperName();
        byte[] byteArray41 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray41, 1164862316, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L680573325", false);
        annotationVisitor28.visitEnum("L71945869", "L2102614230", "L2132185573");
        annotationVisitor28.visitEnd();
        annotationVisitor28.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter37.visitAnnotation("L1292845306", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter37.visitAnnotation("L2034910382", false);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor28.visit("L1442680030", (java.lang.Object) annotationVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@27298464");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor67);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        classWriter1.visitOuterClass("L1387910543", "L897597087", "L1013343419");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(5);
        classWriter31.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int38 = classWriter31.newClass("");
        int int41 = classWriter31.newNameType("L1847716459", "");
        int int43 = classWriter31.newUTF8("L1132227206");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter31.visitAnnotation("L838653747", false);
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(256, "L1974208773", "L4531833", "L1228081592", (java.lang.Object) false);
        fieldVisitor47.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = fieldVisitor47.visitAnnotation("L2027998385", false);
        fieldVisitor47.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 24, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 51, 56, 55, 57, 49, 48, 53, 52, 51, 7, 0, 17, 1, 0, 10, 76, 56, 57, 55, 53, 57, 55, 48, 56, 55, 1, 0, 11, 76, 49, 48, 49, 51, 51, 52, 51, 52, 49, 57, 12, 0, 19, 0, 20, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 22, 0, 0, 0, 4, 0, 18, 0, 21, 0, 23, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMaxs(1698786926, 156461415);
        methodVisitor16.visitInsn((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        methodVisitor54.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label58 = new org.mockito.asm.Label();
        methodVisitor54.visitLabel(label58);
        java.lang.Object obj60 = label58.info;
        java.lang.Object obj61 = label58.info;
        java.lang.Object obj62 = label58.info;
        label58.info = 525056L;
        methodVisitor16.visitLineNumber((int) (short) 13063, label58);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitFieldInsn(872, "L636727990", "L1162526488", "L1583234446");
        methodVisitor16.visitFieldInsn((int) (short) 8460, "L721083102", "L1058656014", "L1307358075");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor16.visitParameterAnnotation(0, "L2034910382", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1930057588" + "'", str75, "L1930057588");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        byte[] byteArray21 = classWriter1.toByteArray();
        int int26 = classWriter1.newMethod("L2034910382", "L1132227206", "hi!", true);
        int int28 = classWriter1.newClass("L135289531");
        int int32 = classWriter1.newField("L414541306", "L925124713", "L295165602");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 4, 0, 8, 0, 10, 0, 18, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 25 + "'", int28 == 25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.getItem(63);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter60.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter68.newMethod("", "", "hi!", true);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter68.visitMethod(0, "", "", "hi!", strArray82);
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter60.visitMethod(8, "hi!", "", "", strArray82);
        methodVisitor84.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label89 = new org.mockito.asm.Label();
        methodVisitor84.visitJumpInsn(1, label89);
        methodVisitor25.visitLineNumber(4, label89);
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L1762162347", 16842755);
        methodVisitor25.visitEnd();
        methodVisitor25.visitMaxs(256, (int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(methodVisitor84);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L916243867", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("L529122729");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn(63, 0);
        methodVisitor25.visitIincInsn(31, 2561);
        methodVisitor25.visitMaxs(13, (int) (short) 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        int int4 = classWriter1.newClass("L2089731244");
        java.lang.Class<?> wildcardClass5 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        int int31 = classReader26.readByte(8);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 16);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = classReader26.readLong(204);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((-1), 4);
        methodVisitor16.visitFieldInsn(12592, "L680573325", "L535346328", "");
        methodVisitor16.visitTypeInsn(4, "L1004763019");
        methodVisitor16.visitTypeInsn((int) (short) 8460, "L295165602");
        methodVisitor16.visitVarInsn(20, 779);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor16.visitParameterAnnotation(655616, "L545510600", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String str30 = classReader26.getSuperName();
        int int31 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        short short61 = classReader59.readShort((int) (byte) 0);
        int int63 = classReader59.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader59, 0);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(classReader59, 0);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader59, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader59, 24);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader59, 190);
        int int75 = classReader59.getItem((int) (short) 3);
        char[] charArray79 = new char[] { 'a', 'a' };
        java.lang.String str80 = classReader59.readUTF8(100, charArray79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj81 = classReader26.readConst((int) ' ', charArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) -13570 + "'", short61 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2560 + "'", int63 == 2560);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 17 + "'", int75 == 17);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[a, a]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader31, (int) (short) 12848);
        int int34 = classReader31.getAccess();
        java.lang.String[] strArray35 = classReader31.getInterfaces();
        int int37 = classReader31.getItem((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1681302154", true);
        java.lang.Object obj16 = null;
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(10, "L1605224709", "L469510195", "L694914824", obj16);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor17.visitAnnotation("L1967276318", false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray29);
        short short33 = classReader31.readShort(43);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(5);
        classWriter36.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray41 = classWriter36.toByteArray();
        label34.info = byteArray41;
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader43, 1793);
        classWriter45.visitInnerClass("\001", "L535346328", "L367225907", (int) '#');
        int int54 = classWriter45.newField("L150818074", "L594418938", "L1386483578");
        classWriter45.visitOuterClass("L1368708044", "L120720304", "L1386483578");
        int int61 = classWriter45.newNameType("L674940947", "L1566658664");
        org.mockito.asm.Attribute[] attributeArray62 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader31.accept((org.mockito.asm.ClassVisitor) classWriter45, attributeArray62, (int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 21353 + "'", short33 == (short) 21353);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 17 + "'", int54 == 17);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 24 + "'", int61 == 24);
        org.junit.Assert.assertNotNull(attributeArray62);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitVarInsn(5, 0);
        methodVisitor16.visitTypeInsn(1793, "L1451039961");
        methodVisitor16.visitMaxs(67764226, 16);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        int int6 = classWriter1.newMethod("L275489687", "L275489687", "L275489687", false);
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            short short11 = classReader9.readShort(65210);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 1, 12, 0, 1, 0, 1, 10, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader26.readInt((int) (short) 3909);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitMethodInsn((int) (byte) 1, "L728847777", "L680573325", "L238476442");
        methodVisitor16.visitInsn((int) (short) -1);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1601838046", true);
        int int16 = classWriter1.newClass("L936297181");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitEnd();
        methodVisitor25.visitFieldInsn((int) (short) 17784, "L755844592", "L745089702", "L1505866272");
        methodVisitor25.visitMaxs(27, 875903244);
        methodVisitor25.visitMultiANewArrayInsn("L2078535908", (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = methodVisitor25.visitAnnotation("L414874932", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = annotationVisitor72.visitArray("L1361142288");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        methodVisitor25.visitIntInsn((int) (short) 100, (int) 'a');
        methodVisitor25.visitMethodInsn(1694564377, "L2022616480", "L871448529", "L999961130");
        methodVisitor25.visitVarInsn(30, 61);
        methodVisitor25.visitFieldInsn(100, "L1572438104", "", "\000");
        org.mockito.asm.Label label49 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLabel(label49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray10);
        java.lang.String str13 = classReader12.getSuperName();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        classWriter16.visitOuterClass("hi!", "", "");
        int int28 = classWriter16.newNameType("hi!", "hi!");
        int int31 = classWriter16.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        classWriter16.visit(5, 6, "", "", "", strArray52);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter16.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter16.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray65 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter68.visitAnnotation("L1221801792", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter68.visitAnnotation("L1009580268", false);
        classWriter68.visitSource("L101926124", "L1169695719");
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] {};
        classReader66.accept((org.mockito.asm.ClassVisitor) classWriter68, attributeArray80, (-1107296256));
        // The following exception was thrown during execution in test generation
        try {
            classReader12.accept(classVisitor14, attributeArray80, (int) (short) 2892);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(attributeArray80);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L2106127350");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        byte[] byteArray33 = classReader29.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray33, 10, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readByte((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long35 = classReader26.readLong(16842755);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter29.newConst((java.lang.Object) (short) 1);
        int int33 = classWriter29.newUTF8("hi!");
        classWriter29.visitOuterClass("L728847777", "\001", "L809431533");
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter1.visitField((int) (short) 1, "L1628304347", "L1938659678", "L1601838046", (java.lang.Object) "\001");
        classWriter1.visitOuterClass("L916243867", "L538737171", "L1726462062");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("L749737959", false);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        classWriter1.visitOuterClass("L1268109548", "L1017623370", "");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        classWriter27.visitOuterClass("hi!", "", "");
        int int39 = classWriter27.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        int int66 = classWriter46.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter46.visitAnnotation("", true);
        byte[] byteArray70 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        short short73 = classReader71.readShort((int) (byte) 0);
        int int75 = classReader71.readUnsignedShort((int) ' ');
        int int77 = classReader71.readInt(0);
        java.lang.String[] strArray78 = classReader71.getInterfaces();
        classWriter27.visit(1, 18, "L59063553", "", "L426422007", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter1.visitMethod(0, "L1715729238", "L624707113", "L76446579", strArray78);
        classWriter1.visitOuterClass("L859506825", "L931744851", "L1750086343");
        int int89 = classWriter1.newMethod("L503713660", "L436759653", "L446511586", false);
        classWriter1.visitInnerClass("L141363326", "L324925920", "L1714745954", 13874);
        classWriter1.visitInnerClass("L1431625085", "L586303771", "", (int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) -13570 + "'", short73 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2560 + "'", int75 == 2560);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-889275714) + "'", int77 == (-889275714));
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 26 + "'", int89 == 26);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitIntInsn((int) (byte) 10, 1751720204);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotation("L755949095", true);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int70 = classReader68.readUnsignedShort((int) (byte) 0);
        java.lang.String str71 = classReader68.getSuperName();
        int int72 = classReader68.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) classReader68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@45b07ea3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 51966 + "'", int70 == 51966);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        int int9 = classWriter1.newUTF8("L877442963");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        int int35 = classWriter15.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter15.visitAnnotation("", true);
        byte[] byteArray39 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        int int42 = classReader40.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader40, (int) '4');
        int int46 = classReader40.readUnsignedShort(5);
        java.lang.String[] strArray47 = classReader40.getInterfaces();
        java.lang.String str48 = classReader40.getSuperName();
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader40, 909717811);
        long long52 = classReader40.readLong((int) (short) 2);
        java.lang.String str53 = classReader40.getSuperName();
        int int54 = classReader40.header;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(36, "L419471195", "L1919588599", "L1368800213", (java.lang.Object) classReader40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@1d044e8c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 51966 + "'", int42 == 51966);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-4990551337079930870L) + "'", long52 == (-4990551337079930870L));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 90 + "'", int54 == 90);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L275489687", true);
        fieldVisitor55.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor55.visitAnnotation("L1086414642", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor55.visitAnnotation("L181903634", false);
        fieldVisitor55.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(0);
        int int7 = classWriter2.newMethod("", "", "hi!", true);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter2.visitMethod(0, "", "", "hi!", strArray16);
        label0.info = strArray16;
        java.lang.Object obj19 = label0.info;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = label0.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1497855016", "", "L1889100462");
        classWriter1.visitSource("L1685807285", "L467340186");
        classWriter1.visitInnerClass("L500545133", "\000", "L1912967891", 33);
        int int29 = classWriter1.newMethod("L324925920", "L282070366", "L917225789", true);
        byte[] byteArray30 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 2560, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(byteArray30);
    }
}

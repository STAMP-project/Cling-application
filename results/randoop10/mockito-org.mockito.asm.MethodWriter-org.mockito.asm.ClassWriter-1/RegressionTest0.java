import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        int int0 = org.mockito.asm.ClassWriter.COMPUTE_FRAMES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        int int0 = org.mockito.asm.ClassReader.EXPAND_FRAMES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8);
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        int int0 = org.mockito.asm.ClassWriter.COMPUTE_MAXS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, 1]");
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        org.mockito.asm.Label label17 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLabel(label17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        int int0 = org.mockito.asm.ClassReader.SKIP_CODE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, 1]");
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor23 = methodVisitor16.visitParameterAnnotation(8, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label30 = null;
        org.mockito.asm.Label label31 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLocalVariable("", "", "", label30, label31, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        int int0 = org.mockito.asm.ClassReader.SKIP_FRAMES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        int int0 = org.mockito.asm.ClassReader.SKIP_DEBUG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        org.mockito.asm.Label label23 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitJumpInsn(10, label23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        org.mockito.asm.Attribute attribute6 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(5, (int) ' ');
        org.mockito.asm.Label label26 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitJumpInsn(1, label26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(5, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitParameterAnnotation(10, "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.Label label23 = null;
        int[] intArray28 = new int[] { 8, (short) -1, 1, 1 };
        org.mockito.asm.Label[] labelArray29 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLookupSwitchInsn(label23, intArray28, labelArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[8, -1, 1, 1]");
        org.junit.Assert.assertNotNull(labelArray29);
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        java.lang.Class<?> wildcardClass4 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.Label label23 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLabel(label23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        org.mockito.asm.Label label30 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLabel(label30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.Label label26 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLabel(label26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label[] labelArray28 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitTableSwitchInsn((int) (byte) 0, 10, label27, labelArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(labelArray28);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        methodVisitor45.visitFieldInsn(8, "hi!", "", "");
        methodVisitor45.visitTypeInsn((int) (byte) 100, "");
        methodVisitor25.visitLdcInsn((java.lang.Object) (byte) 100);
        org.mockito.asm.Attribute attribute55 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitJumpInsn((int) (short) 0, label30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label29 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLabel(label29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 100, (byte) -1, (byte) 10, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, 100, -1, 10, 0]");
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        org.mockito.asm.Label label31 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitJumpInsn((int) (byte) 100, label31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        annotationVisitor28.visitEnd();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        classWriter41.visitOuterClass("hi!", "", "");
        int int53 = classWriter41.newNameType("hi!", "hi!");
        int int55 = classWriter41.newUTF8("hi!");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor28.visit("hi!", (java.lang.Object) classWriter41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@1f0c78cf");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitParameterAnnotation((int) (short) -1, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.Label label30 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLabel(label30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        byte[] byteArray1 = new byte[] { (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray1, 2, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1]");
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter7.newMethod("", "", "hi!", true);
        classWriter7.visitOuterClass("hi!", "", "");
        int int19 = classWriter7.newNameType("hi!", "hi!");
        int int22 = classWriter7.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter29.newMethod("", "", "hi!", true);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter29.visitMethod(0, "", "", "hi!", strArray43);
        classWriter7.visit(5, 6, "", "", "", strArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor46 = classWriter1.visitMethod(0, "", "hi!", "", strArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor16.visitParameterAnnotation(4, "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter31.visitMethod(3, "hi!", "hi!", "hi!", strArray53);
        annotationVisitor28.visit("", (java.lang.Object) "hi!");
        org.mockito.asm.Label label58 = new org.mockito.asm.Label();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor28.visit("hi!", (java.lang.Object) label58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value L51804890");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor55);
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int9 = classWriter7.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter7.visitMethod(8, "hi!", "", "", strArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField(6, "L2000102916", "hi!", "L2000102916", (java.lang.Object) classWriter7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@58e4b19a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor31);
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        // The following exception was thrown during execution in test generation
        try {
            int int1 = label0.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitParameterAnnotation((int) (short) 0, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(0);
        int int7 = classWriter2.newMethod("", "", "hi!", true);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter2.visitMethod(0, "", "", "hi!", strArray16);
        label0.info = strArray16;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = label0.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(methodVisitor17);
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor45.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter24.visitAnnotation("", false);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn((java.lang.Object) classWriter24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@3895e3f5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray25, (int) ' ', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 150");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray25, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 150");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor62.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int9 = classWriter7.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter7.visitMethod(8, "hi!", "", "", strArray29);
        classWriter7.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter42.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter42.visitMethod(8, "hi!", "", "", strArray64);
        classWriter7.visit(8, 8, "L2000102916", "", "hi!", strArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor68 = classWriter1.visitMethod((int) (short) 1, "L809431533", "hi!", "L1847716459", strArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(methodVisitor66);
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        org.mockito.asm.Attribute attribute22 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = label30.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor16.visitParameterAnnotation((int) (byte) -1, "L680573325", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1601838046");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        org.mockito.asm.Attribute attribute53 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor51.visitAttribute(attribute53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L636727990");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "hi!", strArray90);
        methodVisitor94.visitTypeInsn(0, "hi!");
        org.mockito.asm.Attribute attribute98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor94.visitAttribute(attribute98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L275489687");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        int int6 = classWriter1.newMethod("L275489687", "L275489687", "L275489687", false);
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        char[] charArray31 = new char[] { ' ', '4', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = classReader26.readConst((int) ' ', charArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " 4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " 4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , 4,  ]");
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        char[] charArray33 = new char[] { '#', 'a', ' ', 'a', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = classReader26.readConst((int) (short) 0, charArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#a aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#a aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a,  , a, a]");
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        classWriter28.visitOuterClass("hi!", "", "");
        int int40 = classWriter28.newNameType("hi!", "hi!");
        int int43 = classWriter28.newNameType("hi!", "");
        java.lang.Object obj48 = null;
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter28.visitField(9, "L1601838046", "L2062266913", "L680573325", obj48);
        org.mockito.asm.Attribute[] attributeArray50 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter28, attributeArray50, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertNotNull(attributeArray50);
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        char[] charArray32 = new char[] { '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = classReader26.readUTF8((int) (byte) 1, charArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, #]");
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        classWriter1.visitInnerClass("", "L1028579140", "", 8);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter42.visitAnnotation("L636727990", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter1.visitField((int) (short) 1, "L1028579140", "L1847716459", "L275489687", (java.lang.Object) classWriter42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@734bea6d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        org.mockito.asm.Attribute attribute16 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L749737959");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1847716459");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor16.visitParameterAnnotation(3, "L728847777", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        int int52 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitInnerClass("", "", "", (int) ' ');
        classWriter32.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter32.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int69 = classWriter32.newNameType("L749737959", "L1601838046");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 15 + "'", int69 == 15);
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int11 = classWriter9.newConst((java.lang.Object) (short) 1);
        int int13 = classWriter9.newUTF8("hi!");
        int int18 = classWriter9.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter20.visitMethod(0, "", "", "hi!", strArray34);
        int int40 = classWriter20.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter20.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter46.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter46.visitMethod(8, "hi!", "", "", strArray68);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter46.visitAnnotation("hi!", false);
        annotationVisitor73.visitEnum("hi!", "", "hi!");
        annotationVisitor43.visit("", (java.lang.Object) "hi!");
        int int79 = classWriter9.newConst((java.lang.Object) "");
        classWriter9.visitInnerClass("L728847777", "L2000102916", "L1221801792", (int) (short) -1);
        org.mockito.asm.Attribute[] attributeArray85 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter9, attributeArray85, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertNotNull(attributeArray85);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        char[] charArray12 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = classReader7.readClass(2560, charArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        classWriter1.visitInnerClass("L1847716459", "", "L680573325", 9);
        java.lang.Class<?> wildcardClass31 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        org.mockito.asm.Attribute attribute79 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L897597087");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readUnsignedShort((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        char[] charArray34 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = classReader26.readConst(51966, charArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor20 = methodVisitor16.visitParameterAnnotation(3, "L680573325", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(5);
        classWriter34.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray39 = classWriter34.toByteArray();
        org.mockito.asm.Attribute[] attributeArray40 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter34, attributeArray40, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(attributeArray40);
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int5 = classWriter3.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter3.visitMethod(3, "hi!", "hi!", "hi!", strArray25);
        int int28 = classWriter1.newConst((java.lang.Object) "hi!");
        classWriter1.visitSource("L488861128", "L897597087");
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        org.mockito.asm.Attribute attribute56 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor51.visitAttribute(attribute56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        char[] charArray38 = new char[] { ' ', ' ', ' ', '4', ' ', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = classReader26.readConst(10, charArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "   4 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "   4 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ,  ,  , 4,  , 4]");
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        char[] charArray37 = new char[] { '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.readClass(8, charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4]");
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        char[] charArray37 = new char[] { 'a', '4', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.readUTF8(1, charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, 4,  ]");
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        java.lang.Class<?> wildcardClass46 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor16.visitParameterAnnotation((int) (short) 100, "L2000102916", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray6, 12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 110");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter31.visitMethod(3, "hi!", "hi!", "hi!", strArray53);
        annotationVisitor28.visit("", (java.lang.Object) "hi!");
        java.lang.Class<?> wildcardClass57 = annotationVisitor28.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        char[] charArray17 = new char[] { 'a', '4', ' ', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = classReader11.readConst(9, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a4 #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a4 #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, 4,  , #]");
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter31.visitMethod(8, "hi!", "", "", strArray53);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter31.visitAnnotation("hi!", false);
        annotationVisitor58.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = annotationVisitor58.visitArray("L2000102916");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) annotationVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@2bff4b5d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor61);
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitParameterAnnotation((int) (short) 10, "L1221801792", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = classReader26.readConst(51966, charArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        int int31 = classWriter11.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter11.visitAnnotation("", true);
        byte[] byteArray35 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        java.lang.String str37 = classReader36.getSuperName();
        char[] charArray43 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj44 = classReader36.readConst(6, charArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = classReader8.readUTF8((int) 'a', charArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "\001" + "'", obj44, "\001");
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L59063553");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = classReader26.readUnsignedShort(12592);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12592");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 100, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 100, -1]");
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L680573325");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) -1, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 0]");
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.Attribute attribute11 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter29.newMethod("", "", "hi!", true);
        classWriter29.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter29.visitAnnotation("L2062266913", false);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        char[] charArray37 = new char[] { ' ', '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.readClass((-1), charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , #,  ]");
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(5);
        classWriter31.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int38 = classWriter31.newClass("");
        org.mockito.asm.Attribute[] attributeArray39 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter31, attributeArray39, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(attributeArray39);
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        int int50 = classWriter30.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("", true);
        byte[] byteArray54 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        java.lang.String str56 = classReader55.getSuperName();
        char[] charArray62 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj63 = classReader55.readConst(6, charArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = classReader26.readUTF8(10, charArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + "\001" + "'", obj63, "\001");
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMaxs(9, (int) (byte) -1);
        methodVisitor16.visitIincInsn(8, (int) ' ');
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        int int52 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitInnerClass("", "", "", (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, 2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L636727990", true);
        fieldVisitor31.visitEnd();
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor31.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        char[] charArray35 = new char[] { ' ', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = classReader26.readConst(1, charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\uaf80\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\uaf80\000");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "\uaf80, \000]");
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "hi!", strArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor94.visitParameterAnnotation((int) (short) -1, "L75359331", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitMethodInsn((int) (short) -1, "hi!", "hi!", "hi!");
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter26.visitMethod(8, "hi!", "", "", strArray48);
        methodVisitor50.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        int[] intArray80 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray81 = new org.mockito.asm.Label[] {};
        methodVisitor50.visitLookupSwitchInsn(label74, intArray80, labelArray81);
        java.lang.Object obj83 = label74.info;
        methodVisitor16.visitLabel(label74);
        java.lang.Object obj85 = label74.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L624707113" + "'", str76, "L624707113");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray81);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int5 = classWriter3.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter3.visitMethod(3, "hi!", "hi!", "hi!", strArray25);
        int int28 = classWriter1.newConst((java.lang.Object) "hi!");
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMaxs((int) (short) 0, 7);
        methodVisitor25.visitMaxs((int) (byte) 1, 7);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitParameterAnnotation((int) (byte) 1, "L749737959", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L238476442");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = classReader26.readClass((int) (short) 100, charArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\uaf80\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\uaf80\000\000\000");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "\uaf80, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        org.mockito.asm.Attribute attribute27 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitCode();
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1771356061" + "'", str75, "L1771356061");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray10, 15, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 110");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(5);
        classWriter34.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int41 = classWriter34.newClass("");
        int int44 = classWriter34.newNameType("L1847716459", "");
        classWriter34.visitEnd();
        byte[] byteArray46 = classWriter34.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int47 = classWriter1.newConst((java.lang.Object) classWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@2b1a2d9c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L590888141", true);
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor31.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader26.getItem(90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 90");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        classWriter1.visitInnerClass("L1847716459", "", "L680573325", 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter1.visitAnnotation("L275489687", true);
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        java.lang.Object obj32 = null;
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter12.visitField(9, "L1601838046", "L2062266913", "L680573325", obj32);
        classWriter12.visitOuterClass("L590888141", "hi!", "L2062266913");
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter12, 90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor33);
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        fieldVisitor22.visitEnd();
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor22.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1847716459", false);
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        int int43 = classReader41.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader41, (int) '4');
        long long47 = classReader41.readLong(2);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        int int70 = classWriter50.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter50.visitAnnotation("", true);
        byte[] byteArray74 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        java.lang.String str76 = classReader75.getSuperName();
        char[] charArray82 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj83 = classReader75.readConst(6, charArray82);
        java.lang.Object obj84 = classReader41.readConst(3, charArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = classReader12.readUTF8(10, charArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51966 + "'", int43 == 51966);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-4990551337079930870L) + "'", long47 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + "\001" + "'", obj83, "\001");
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "hi!" + "'", obj84, "hi!");
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray10, 7, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 285");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1601838046", true);
        org.mockito.asm.Attribute attribute15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        classWriter34.visitOuterClass("hi!", "", "");
        int int46 = classWriter34.newNameType("hi!", "hi!");
        int int49 = classWriter34.newNameType("hi!", "");
        java.lang.Object obj54 = null;
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter34.visitField(9, "L1601838046", "L2062266913", "L680573325", obj54);
        classWriter34.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter34.visitSource("L75359331", "L1930348385");
        org.mockito.asm.Attribute[] attributeArray63 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter34, attributeArray63, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(attributeArray63);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        methodVisitor34.visitFieldInsn(8, "hi!", "", "");
        methodVisitor34.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor34.visitMaxs(6, (int) (byte) 10);
        methodVisitor34.visitIincInsn((int) (short) 1, (int) (short) -1);
        methodVisitor34.visitInsn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter1.visitField(12, "L1847716459", "L809431533", "L488861128", (java.lang.Object) methodVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@3f12340d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitParameterAnnotation((int) (short) 1, "L1221801792", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        char[] charArray35 = new char[] { 'a', '4', '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader26.readClass(6, charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, 4, #,  ]");
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        byte[] byteArray62 = classWriter37.toByteArray();
        int int64 = classWriter37.newUTF8("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter1.visitField(7, "L680573325", "L1028579140", "L1142940414", (java.lang.Object) classWriter37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@4afbf52c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        java.lang.String str55 = label51.toString();
        java.lang.Class<?> wildcardClass56 = label51.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L999961130" + "'", str54, "L999961130");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L999961130" + "'", str55, "L999961130");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        java.lang.Object obj69 = classReader26.readConst(3, charArray67);
        int int70 = classReader26.header;
        char[] charArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = classReader26.readUTF8((int) (short) 1, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "hi!" + "'", obj69, "hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 90 + "'", int70 == 90);
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = classReader26.readClass(14, charArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\uaf80\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\uaf80\000\000\000");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "\uaf80, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitEnd();
        java.lang.Class<?> wildcardClass3 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitEnd();
        java.lang.Class<?> wildcardClass86 = methodVisitor16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1013343419" + "'", str75, "L1013343419");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor13.visitArray("hi!");
        annotationVisitor15.visitEnum("L1847716459", "L2062266913", "L1221801792");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter48.newConst((java.lang.Object) (short) 1);
        classWriter48.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        classWriter59.visitOuterClass("hi!", "", "");
        int int71 = classWriter59.newNameType("hi!", "hi!");
        int int74 = classWriter59.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(0);
        int int86 = classWriter81.newMethod("", "", "hi!", true);
        java.lang.String[] strArray95 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter81.visitMethod(0, "", "", "hi!", strArray95);
        classWriter59.visit(5, 6, "", "", "", strArray95);
        org.mockito.asm.MethodVisitor methodVisitor98 = classWriter48.visitMethod((int) (short) 0, "", "", "", strArray95);
        classWriter1.visit(1, (int) (byte) 100, "L749737959", "L976656549", "L590888141", strArray95);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(methodVisitor96);
        org.junit.Assert.assertNotNull(methodVisitor98);
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        java.lang.String[] strArray38 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter1.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray38);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String str62 = classReader61.getSuperName();
        char[] charArray68 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj69 = classReader61.readConst(6, charArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = classReader26.readUTF8(1, charArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "\001" + "'", obj69, "\001");
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        classWriter34.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter34.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter48.newConst((java.lang.Object) (byte) 0);
        int int51 = classWriter34.newConst((java.lang.Object) int50);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter57.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter57.visitMethod(8, "hi!", "", "", strArray79);
        classWriter57.visitOuterClass("hi!", "", "");
        int int87 = classWriter57.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter34.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int87);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter34, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor88);
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "L59063553", "L579675851");
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int37 = classWriter34.newNameType("\001", "L624707113");
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter34.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        java.lang.Object obj22 = label20.info;
        int int23 = label20.getOffset();
        java.lang.Class<?> wildcardClass24 = label20.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L809431533", "L636727990", "L636727990");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        classWriter39.visitOuterClass("hi!", "", "");
        int int51 = classWriter39.newNameType("hi!", "hi!");
        int int54 = classWriter39.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        classWriter39.visit(5, 6, "", "", "", strArray75);
        classWriter1.visit(6, (-1), "L680573325", "L728847777", "L2062266913", strArray75);
        org.mockito.asm.Attribute attribute79 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        classWriter31.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        classWriter42.visitOuterClass("hi!", "", "");
        int int54 = classWriter42.newNameType("hi!", "hi!");
        int int57 = classWriter42.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        classWriter42.visit(5, 6, "", "", "", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter31.visitMethod((int) (short) 0, "", "", "", strArray78);
        byte[] byteArray82 = classWriter31.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn((java.lang.Object) byteArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@4ce9ebfd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        java.lang.Class<?> wildcardClass26 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.Label label40 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        label40.info = strArray56;
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((int) (byte) 100, "L897597087", "L749737959", "L488861128", strArray56);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        int int85 = classWriter65.newMethod("", "", "hi!", false);
        classWriter65.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor87 = classWriter1.visitField(0, "\000", "L238476442", "L1889100462", (java.lang.Object) classWriter65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@65279c6e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        methodVisitor25.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor25.visitParameterAnnotation(13, "L590888141", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitParameterAnnotation((int) (short) 100, "L238476442", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter10.visitMethod(0, "", "", "hi!", strArray24);
        classWriter1.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray24);
        java.lang.Class<?> wildcardClass27 = strArray24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        int int35 = classWriter1.newNameType("L728847777", "hi!");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter41.newConst((java.lang.Object) (short) 1);
        classWriter41.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        classWriter52.visitOuterClass("hi!", "", "");
        int int64 = classWriter52.newNameType("hi!", "hi!");
        int int67 = classWriter52.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(0);
        int int79 = classWriter74.newMethod("", "", "hi!", true);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter74.visitMethod(0, "", "", "hi!", strArray88);
        classWriter52.visit(5, 6, "", "", "", strArray88);
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter41.visitMethod((int) (short) 0, "", "", "", strArray88);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = classWriter41.visitAnnotation("L809431533", false);
        annotationVisitor94.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = annotationVisitor94.visitArray("L728847777");
        org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter1.visitField((int) (short) 100, "\000", "L59063553", "L110679537", (java.lang.Object) "L728847777");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor97);
        org.junit.Assert.assertNotNull(fieldVisitor98);
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor44.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        methodVisitor44.visitJumpInsn((-1), label70);
        methodVisitor17.visitJumpInsn((int) '#', label70);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(0);
        int int80 = classWriter75.newMethod("", "", "hi!", true);
        classWriter75.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = classWriter75.visitAnnotation("", false);
        label70.info = "";
        int int89 = label70.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor16.visitParameterAnnotation((int) (byte) 100, "L529122729", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L110679537");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        int int43 = classWriter23.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter23.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter23.visitAnnotation("hi!", false);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = classWriter1.newConst((java.lang.Object) classWriter23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@59ee7c25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        classWriter35.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        classWriter46.visitOuterClass("hi!", "", "");
        int int58 = classWriter46.newNameType("hi!", "hi!");
        int int61 = classWriter46.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter68.newMethod("", "", "hi!", true);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter68.visitMethod(0, "", "", "hi!", strArray82);
        classWriter46.visit(5, 6, "", "", "", strArray82);
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter35.visitMethod((int) (short) 0, "", "", "", strArray82);
        int int87 = classWriter35.newUTF8("L1221801792");
        classWriter35.visitOuterClass("L2062266913", "L976656549", "L749737959");
        org.mockito.asm.Attribute[] attributeArray92 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter35, attributeArray92, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(methodVisitor85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(attributeArray92);
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int37 = classWriter34.newNameType("\001", "L624707113");
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter34.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter7.newMethod("", "", "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor22 = classWriter7.visitMethod(0, "", "", "hi!", strArray21);
        methodVisitor22.visitMaxs(6, (int) (short) 0);
        annotationVisitor4.visit("L1601838046", (java.lang.Object) (short) 0);
        java.lang.Object obj28 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor4.visit("L749737959", obj28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodVisitor22);
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L75359331");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 458753, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        classWriter36.visitOuterClass("hi!", "", "");
        int int48 = classWriter36.newNameType("hi!", "hi!");
        int int50 = classWriter36.newUTF8("hi!");
        classWriter36.visitSource("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter36, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(0);
        int int19 = classWriter14.newMethod("", "", "hi!", true);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor29 = classWriter14.visitMethod(0, "", "", "hi!", strArray28);
        int int34 = classWriter14.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter14.visitAnnotation("", true);
        byte[] byteArray38 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        int int41 = classReader39.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader39, (int) '4');
        long long45 = classReader39.readLong(2);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        java.lang.String str74 = classReader73.getSuperName();
        char[] charArray80 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj81 = classReader73.readConst(6, charArray80);
        java.lang.Object obj82 = classReader39.readConst(3, charArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj83 = classReader11.readConst(1, charArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodVisitor29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51966 + "'", int41 == 51966);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-4990551337079930870L) + "'", long45 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj81 + "' != '" + "\001" + "'", obj81, "\001");
        org.junit.Assert.assertEquals("'" + obj82 + "' != '" + "hi!" + "'", obj82, "hi!");
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        java.lang.Object obj69 = classReader26.readConst(3, charArray67);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = classReader26.getItem(16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "hi!" + "'", obj69, "hi!");
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitTypeInsn((int) (short) 0, "L897597087");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitParameterAnnotation(40, "\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        classWriter32.visitOuterClass("hi!", "", "");
        int int44 = classWriter32.newNameType("hi!", "hi!");
        int int47 = classWriter32.newNameType("hi!", "");
        java.lang.Object obj52 = null;
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter32.visitField(9, "L1601838046", "L2062266913", "L680573325", obj52);
        classWriter32.visitOuterClass("L590888141", "hi!", "L2062266913");
        org.mockito.asm.Attribute[] attributeArray58 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray58, 202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor53);
        org.junit.Assert.assertNotNull(attributeArray58);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L579675851");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        classWriter18.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter18.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter32.newConst((java.lang.Object) (byte) 0);
        int int35 = classWriter18.newConst((java.lang.Object) int34);
        int int39 = classWriter18.newField("hi!", "", "L809431533");
        java.lang.String[] strArray49 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter18.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray49);
        classWriter1.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray49);
        java.lang.Class<?> wildcardClass52 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        char[] charArray32 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = classReader26.readUTF8(65210, charArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readByte(1);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = classReader7.readLong((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 254 + "'", int12 == 254);
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = classReader26.readLong(65210);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 72");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((-1), 4);
        methodVisitor16.visitCode();
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        classWriter8.visitOuterClass("hi!", "", "");
        int int20 = classWriter8.newNameType("hi!", "hi!");
        int int23 = classWriter8.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        classWriter8.visit(5, 6, "", "", "", strArray44);
        org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter8.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter8.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray57 = classWriter8.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = classWriter1.newConst((java.lang.Object) byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@1c17d671");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertNotNull(fieldVisitor52);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        int int50 = classWriter30.newMethod("", "", "hi!", false);
        classWriter30.visitInnerClass("", "", "", (int) ' ');
        int int59 = classWriter30.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        methodVisitor80.visitFieldInsn(8, "hi!", "", "");
        methodVisitor80.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor91 = classWriter30.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = fieldVisitor91.visitAnnotation("L2062266913", true);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor27.visit("L426422007", (java.lang.Object) fieldVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.FieldWriter@63548670");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(fieldVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter1.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int38 = classWriter1.newNameType("L749737959", "L1601838046");
        classWriter1.visitInnerClass("L2000102916", "L1028579140", "", 100);
        java.lang.Class<?> wildcardClass44 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter12.visitMethod(0, "", "", "hi!", strArray26);
        int int32 = classWriter12.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter12.visitAnnotation("", true);
        byte[] byteArray36 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String str38 = classReader37.getSuperName();
        char[] charArray44 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj45 = classReader37.readConst(6, charArray44);
        char[] charArray53 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str54 = classReader37.readUTF8((int) '#', charArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = classReader7.readConst((int) (short) 10, charArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "\001" + "'", obj45, "\001");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\000" + "'", str54, "\000");
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = methodVisitor41.visitAnnotation("L809431533", true);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter47.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter47.visitMethod(8, "hi!", "", "", strArray69);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter47.visitAnnotation("hi!", false);
        annotationVisitor74.visitEnum("hi!", "", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor41.visitLdcInsn((java.lang.Object) annotationVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@3f855d65");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1004763019");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        int int65 = classWriter35.newClass("hi!");
        int int70 = classWriter35.newMethod("L59063553", "L809431533", "L275489687", false);
        org.mockito.asm.Attribute[] attributeArray71 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter35, attributeArray71, 90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertNotNull(attributeArray71);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        methodVisitor16.visitInsn((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        methodVisitor59.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        java.lang.String str85 = label83.toString();
        int[] intArray89 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] {};
        methodVisitor59.visitLookupSwitchInsn(label83, intArray89, labelArray90);
        methodVisitor16.visitLabel(label83);
        org.mockito.asm.Attribute attribute93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1195266796" + "'", str85, "L1195266796");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray90);
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 13, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        classWriter37.visitSource("", "L2000102916");
        classWriter37.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.Attribute attribute48 = null;
        org.mockito.asm.Attribute[] attributeArray49 = new org.mockito.asm.Attribute[] { attribute48 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter37, attributeArray49, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(attributeArray49);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        methodVisitor55.visitFieldInsn(8, "hi!", "", "");
        methodVisitor55.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor55.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = annotationVisitor66.visitAnnotation("L488861128", "L1223439170");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) annotationVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@3da6041e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        int int67 = classWriter38.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter38.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        org.mockito.asm.Attribute[] attributeArray73 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray73, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(attributeArray73);
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.Label label51 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor50.visitLabel(label51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        char[] charArray37 = new char[] { '4', ' ', 'a', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.readClass((int) (short) 3072, charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4,  , a, 4]");
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor16.visitParameterAnnotation((int) (short) 1792, "L590888141", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter32.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter32.visitMethod(3, "hi!", "hi!", "hi!", strArray54);
        int int57 = classWriter30.newConst((java.lang.Object) "hi!");
        classWriter30.visitSource("L488861128", "L897597087");
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter30.visitAnnotation("L1132227206", false);
        org.mockito.asm.Attribute attribute64 = null;
        org.mockito.asm.Attribute[] attributeArray65 = new org.mockito.asm.Attribute[] { attribute64 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter30, attributeArray65, (int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(attributeArray65);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.header;
        int int34 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.getItem(90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 90");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        classWriter17.visitInnerClass("", "", "", (int) ' ');
        classWriter17.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray48 = classWriter17.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter17.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        classWriter57.visitEnd();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        int int84 = classWriter64.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = classWriter64.visitAnnotation("", true);
        byte[] byteArray88 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader89 = new org.mockito.asm.ClassReader(byteArray88);
        short short91 = classReader89.readShort((int) (byte) 0);
        int int93 = classReader89.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter95 = new org.mockito.asm.ClassWriter(classReader89, 0);
        java.lang.String[] strArray96 = classReader89.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor97 = classWriter57.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray96);
        org.mockito.asm.MethodVisitor methodVisitor98 = classWriter17.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray96);
        org.mockito.asm.MethodVisitor methodVisitor99 = classWriter1.visitMethod(40, "\000", "L1429849124", "L1287376048", strArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short91 + "' != '" + (short) -13570 + "'", short91 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2560 + "'", int93 == 2560);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(methodVisitor97);
        org.junit.Assert.assertNotNull(methodVisitor98);
        org.junit.Assert.assertNotNull(methodVisitor99);
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter32.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter32.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        short short71 = classReader69.readShort((int) (byte) 0);
        int int73 = classReader69.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader69, 0);
        java.lang.String[] strArray76 = classReader69.getInterfaces();
        classWriter32.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray76);
        org.mockito.asm.Attribute attribute78 = null;
        org.mockito.asm.Attribute[] attributeArray79 = new org.mockito.asm.Attribute[] { attribute78 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray79, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -13570 + "'", short71 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2560 + "'", int73 == 2560);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(attributeArray79);
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(5);
        classWriter12.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor23 = classWriter12.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = fieldVisitor23.visitAnnotation("", false);
        annotationVisitor26.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = classWriter1.newConst((java.lang.Object) annotationVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@d78ab8f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor16.visitParameterAnnotation((int) (short) 0, "L745089702", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        label37.info = strArray53;
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter32.visitMethod((int) (short) 100, "", "hi!", "", strArray53);
        org.mockito.asm.Attribute[] attributeArray57 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray57, (-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(attributeArray57);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1223439170");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readByte(65210);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute3 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readUnsignedShort((int) (byte) 0);
        char[] charArray19 = new char[] { '#', ' ', '#', 'a', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = classReader7.readClass((int) ' ', charArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12336");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51966 + "'", int12 == 51966);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# #a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# #a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#,  , #, a,  ]");
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        int int31 = classWriter11.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(8, "hi!", "", "", strArray59);
        classWriter37.visitOuterClass("hi!", "", "");
        classWriter37.visitEnd();
        java.lang.String[] strArray74 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter37.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray74);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter11.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray74);
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter11, 2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor76);
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String str30 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        int int52 = classWriter32.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter32.visitAnnotation("", true);
        byte[] byteArray56 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        short short59 = classReader57.readShort((int) (byte) 0);
        int int60 = classReader57.header;
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(classReader57, 14);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter62, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) -13570 + "'", short59 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 90 + "'", int60 == 90);
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray36, 1793, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(5);
        int int22 = classWriter20.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter29.newMethod("", "", "hi!", true);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter29.visitMethod(0, "", "", "hi!", strArray43);
        classWriter20.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray43);
        classWriter1.visit((int) ' ', 8, "L1287376048", "L1028579140", "L680573325", strArray43);
        int int49 = classWriter1.newNameType("L999961130", "L1847716459");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        char[] charArray33 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = classReader26.readConst(21, charArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L535346328", "L535346328");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L1928858580", false);
        org.mockito.asm.Attribute attribute67 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader26.readInt((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        org.mockito.asm.Attribute attribute35 = null;
        org.mockito.asm.Attribute[] attributeArray36 = new org.mockito.asm.Attribute[] { attribute35 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor34, attributeArray36, 2561);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertNotNull(attributeArray36);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        // The following exception was thrown during execution in test generation
        try {
            short short39 = classReader26.readShort(12592);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12592");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter70.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(0);
        int int83 = classWriter78.newMethod("", "", "hi!", true);
        java.lang.String[] strArray92 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter78.visitMethod(0, "", "", "hi!", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter70.visitMethod(8, "hi!", "", "", strArray92);
        classWriter35.visit(8, 8, "L2000102916", "", "hi!", strArray92);
        classWriter35.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter35, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor93);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        int int52 = classWriter32.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter32.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter32.visitAnnotation("hi!", false);
        classWriter32.visitEnd();
        org.mockito.asm.Attribute attribute60 = null;
        org.mockito.asm.Attribute[] attributeArray61 = new org.mockito.asm.Attribute[] { attribute60 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray61, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(attributeArray61);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        int int60 = classReader58.readUnsignedShort((int) (byte) 0);
        short short62 = classReader58.readShort(7);
        int int63 = classReader58.header;
        int int65 = classReader58.readInt(19);
        char[] charArray70 = new char[] { '4', '#', '#' };
        java.lang.String str71 = classReader58.readUTF8(14, charArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader26.readUTF8((int) (byte) -1, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 51966 + "'", int60 == 51966);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 0 + "'", short62 == (short) 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 90 + "'", int63 == 90);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1751720204 + "'", int65 == 1751720204);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        methodVisitor48.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor48.visitCode();
        methodVisitor48.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        java.lang.String str81 = label79.toString();
        methodVisitor48.visitLineNumber((int) (short) -1, label79);
        label79.info = (-1.0f);
        java.lang.String str85 = label79.toString();
        methodVisitor25.visitLabel(label79);
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1769023990" + "'", str81, "L1769023990");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1769023990" + "'", str85, "L1769023990");
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int8 = classWriter3.newMethod("", "", "hi!", true);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor18 = classWriter3.visitMethod(0, "", "", "hi!", strArray17);
        methodVisitor18.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label22 = new org.mockito.asm.Label();
        methodVisitor18.visitLabel(label22);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classWriter1.newConst((java.lang.Object) methodVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@736677b4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodVisitor18);
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor50.visitCode();
        methodVisitor50.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter62.newMethod("", "", "hi!", true);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter62.visitMethod(0, "", "", "hi!", strArray76);
        methodVisitor77.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label81 = new org.mockito.asm.Label();
        methodVisitor77.visitLabel(label81);
        java.lang.String str83 = label81.toString();
        methodVisitor50.visitLineNumber((int) (short) -1, label81);
        label81.info = (-1.0f);
        java.lang.String str87 = label81.toString();
        methodVisitor25.visitJumpInsn((int) (byte) 10, label81);
        methodVisitor25.visitTypeInsn(0, "L1221801792");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L1700698598" + "'", str83, "L1700698598");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L1700698598" + "'", str87, "L1700698598");
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMaxs((int) (short) 0, 7);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        annotationVisitor56.visitEnum("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = annotationVisitor56.visitArray("L2000102916");
        methodVisitor25.visitLdcInsn((java.lang.Object) "L2000102916");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        int int85 = classWriter65.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter65.visitAnnotation("", true);
        annotationVisitor88.visitEnum("L897597087", "L636727990", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = annotationVisitor88.visitAnnotation("L976656549", "L426422007");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) annotationVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@78e9b329");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String str42 = classReader41.getSuperName();
        char[] charArray48 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj49 = classReader41.readConst(6, charArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = classReader12.readUTF8(12, charArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "\001" + "'", obj49, "\001");
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter68.newMethod("", "", "hi!", true);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter68.visitMethod(0, "", "", "hi!", strArray82);
        methodVisitor83.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label87 = new org.mockito.asm.Label();
        methodVisitor83.visitLabel(label87);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter(0);
        int int92 = classWriter90.newConst((java.lang.Object) (short) 1);
        classWriter90.visitSource("", "");
        label87.info = "";
        int int97 = label87.getOffset();
        java.lang.String str98 = label87.toString();
        methodVisitor16.visitJumpInsn(11, label87);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "L1505866272" + "'", str98, "L1505866272");
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        java.lang.String str86 = label83.toString();
        java.lang.String str87 = label83.toString();
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] {};
        methodVisitor16.visitTableSwitchInsn((int) (short) -1, 1, label83, labelArray88);
        java.lang.Class<?> wildcardClass90 = label83.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L2089731244" + "'", str86, "L2089731244");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L2089731244" + "'", str87, "L2089731244");
        org.junit.Assert.assertNotNull(labelArray88);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("\001");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitParameterAnnotation(13, "L1936126716", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitParameterAnnotation((int) (short) 0, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.getItem(2);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        int int63 = classReader61.readUnsignedShort((int) (byte) 0);
        short short65 = classReader61.readShort(7);
        int int66 = classReader61.header;
        int int68 = classReader61.readInt(19);
        char[] charArray73 = new char[] { '4', '#', '#' };
        java.lang.String str74 = classReader61.readUTF8(14, charArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = classReader26.readClass((int) (byte) 1, charArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 51966 + "'", int63 == 51966);
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 0 + "'", short65 == (short) 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 90 + "'", int66 == 90);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1751720204 + "'", int68 == 1751720204);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitMaxs(13, 254);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor25.visitParameterAnnotation(82, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        java.lang.String str64 = classReader63.getSuperName();
        char[] charArray70 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj71 = classReader63.readConst(6, charArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader26.readUTF8(82, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28532");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "\001" + "'", obj71, "\001");
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        methodVisitor25.visitCode();
        java.lang.Object obj88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn(obj88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        int int52 = classWriter32.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter32.visitAnnotation("", true);
        byte[] byteArray56 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        java.lang.String str58 = classReader57.getSuperName();
        char[] charArray64 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj65 = classReader57.readConst(6, charArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = classReader26.readConst(12, charArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + "\001" + "'", obj65, "\001");
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        methodVisitor16.visitVarInsn(1, 1);
        java.lang.Class<?> wildcardClass28 = methodVisitor16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass32 = methodVisitor16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        int int50 = classWriter30.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("", true);
        byte[] byteArray54 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        int int57 = classReader55.readUnsignedShort((int) (byte) 0);
        short short59 = classReader55.readShort(7);
        int int60 = classReader55.header;
        int int62 = classReader55.readInt(19);
        char[] charArray67 = new char[] { '4', '#', '#' };
        java.lang.String str68 = classReader55.readUTF8(14, charArray67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = classReader26.readConst((int) (short) 3072, charArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 51966 + "'", int57 == 51966);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 0 + "'", short59 == (short) 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 90 + "'", int60 == 90);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1751720204 + "'", int62 == 1751720204);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readInt((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.readInt(7);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        org.mockito.asm.Attribute[] attributeArray42 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter36, attributeArray42, (int) (short) 17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2561 + "'", int34 == 2561);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(attributeArray42);
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter32.newConst((java.lang.Object) (short) 1);
        classWriter32.visitSource("", "");
        int int41 = classWriter32.newField("hi!", "", "");
        org.mockito.asm.Attribute attribute42 = null;
        org.mockito.asm.Attribute[] attributeArray43 = new org.mockito.asm.Attribute[] { attribute42 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray43, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(attributeArray43);
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        methodVisitor43.visitLabel(label47);
        java.lang.String str49 = label47.toString();
        methodVisitor16.visitLineNumber((int) (short) -1, label47);
        label47.info = (-1.0f);
        java.lang.String str53 = label47.toString();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter55.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter55.visitMethod(8, "hi!", "", "", strArray77);
        methodVisitor79.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label84 = new org.mockito.asm.Label();
        methodVisitor79.visitJumpInsn(1, label84);
        methodVisitor79.visitIntInsn((-1107296256), 12);
        label47.info = 12;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "L1628304347" + "'", str49, "L1628304347");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "L1628304347" + "'", str53, "L1628304347");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        java.lang.Object obj69 = classReader26.readConst(3, charArray67);
        int int70 = classReader26.header;
        short short72 = classReader26.readShort(40);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = classReader26.readByte(254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "hi!" + "'", obj69, "hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 90 + "'", int70 == 90);
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) 17784 + "'", short72 == (short) 17784);
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        int int13 = classWriter1.newUTF8("L1132227206");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        int int39 = classWriter19.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter19.visitAnnotation("", true);
        byte[] byteArray43 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        int int46 = classReader44.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader44, (int) '4');
        int int50 = classReader44.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader44, (int) '#');
        byte[] byteArray53 = classReader44.b;
        java.lang.String[] strArray54 = classReader44.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor55 = classWriter1.visitMethod(0, "\001", "L1628304347", "\001", strArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 51966 + "'", int46 == 51966);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        org.mockito.asm.Attribute attribute21 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        annotationVisitor24.visitEnum("L897597087", "L636727990", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor24.visitAnnotation("L976656549", "L426422007");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor49.visitCode();
        methodVisitor49.visitIincInsn(0, 5);
        methodVisitor49.visitIincInsn((int) (byte) 10, 8);
        methodVisitor49.visitVarInsn(5, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor49.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor31.visit("L59063553", (java.lang.Object) annotationVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@43a6c8f1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter18.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter26.newMethod("", "", "hi!", true);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter26.visitMethod(0, "", "", "hi!", strArray40);
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter18.visitMethod(8, "hi!", "", "", strArray40);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        methodVisitor60.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor60.visitCode();
        methodVisitor60.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(0);
        int int77 = classWriter72.newMethod("", "", "hi!", true);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter72.visitMethod(0, "", "", "hi!", strArray86);
        methodVisitor87.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label91 = new org.mockito.asm.Label();
        methodVisitor87.visitLabel(label91);
        java.lang.String str93 = label91.toString();
        methodVisitor60.visitLineNumber((int) (short) -1, label91);
        label91.info = (-1.0f);
        methodVisitor42.visitLineNumber(19, label91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter1.visitField((-1107296256), "L624707113", "L1601838046", "L1223439170", (java.lang.Object) label91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value L1898306553");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L1898306553" + "'", str93, "L1898306553");
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 65536, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65544");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L238476442", true);
        org.mockito.asm.Attribute attribute67 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        byte[] byteArray70 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L2000102916", "L2062266913", "L2062266913");
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 1, 0, 10, 76, 53, 51, 53, 51, 52, 54, 51, 50, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 10, 0, 2, 0, 11, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 13, 0, 1, 0, 14, 0, 0, 0, 4, 0, 6, 0, 7]");
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        methodVisitor25.visitMethodInsn(9, "L1928858580", "", "L579675851");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitParameterAnnotation(20, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1505866272");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int20 = classWriter1.newUTF8("L1962189950");
        java.lang.Class<?> wildcardClass21 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(202);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter45, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor62.visitAnnotation("L2062266913", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor62.visitAnnotation("L1223439170", true);
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor62.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass13 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1715729238");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader26.readUnsignedShort((-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        methodVisitor25.visitIntInsn((int) '4', 3);
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        methodVisitor45.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        methodVisitor45.visitLabel(label49);
        java.lang.String str51 = label49.toString();
        int[] intArray55 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray56 = new org.mockito.asm.Label[] {};
        methodVisitor25.visitLookupSwitchInsn(label49, intArray55, labelArray56);
        java.lang.Class<?> wildcardClass58 = intArray55.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "L667379532" + "'", str51, "L667379532");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 0);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "hi!", strArray90);
        byte[] byteArray95 = classWriter1.toByteArray();
        classWriter1.visitSource("L110679537", "L782129665");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 100, 0, 1, 0, 3, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 2, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 10, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        methodVisitor16.visitVarInsn(1, 1);
        org.mockito.asm.Label label29 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitJumpInsn((int) (byte) -1, label29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        byte[] byteArray31 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 11, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3114");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray31);
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor28.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor28.visitAnnotation("L2062266913", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor28.visitArray("L745089702");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        classWriter48.visitOuterClass("hi!", "", "");
        int int60 = classWriter48.newNameType("hi!", "hi!");
        int int62 = classWriter48.newClass("L809431533");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter68.newMethod("", "", "hi!", true);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter68.visitMethod(0, "", "", "hi!", strArray82);
        int int88 = classWriter68.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = classWriter68.visitAnnotation("", true);
        byte[] byteArray92 = classWriter68.toByteArray();
        org.mockito.asm.ClassReader classReader93 = new org.mockito.asm.ClassReader(byteArray92);
        short short95 = classReader93.readShort((int) (byte) 0);
        int int97 = classReader93.readUnsignedShort((int) ' ');
        org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter48.visitField(8, "L110679537", "L999961130", "L1013343419", (java.lang.Object) int97);
        annotationVisitor28.visit("\000", (java.lang.Object) 8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short95 + "' != '" + (short) -13570 + "'", short95 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2560 + "'", int97 == 2560);
        org.junit.Assert.assertNotNull(fieldVisitor98);
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        methodVisitor24.visitMaxs(6, (int) (short) 0);
        methodVisitor24.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor24.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor24.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField((-1), "L1700698598", "L1962189950", "L1386483578", (java.lang.Object) annotationVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@728d2744");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        java.lang.String str30 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn((-1107296256), 12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitParameterAnnotation(19, "L59063553", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter12.visitMethod(0, "", "", "hi!", strArray26);
        int int32 = classWriter12.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter12.visitAnnotation("", true);
        byte[] byteArray36 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String str38 = classReader37.getSuperName();
        char[] charArray44 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj45 = classReader37.readConst(6, charArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = classReader9.readClass(156461415, charArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 156461415");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "\001" + "'", obj45, "\001");
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(5);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor51.visitLdcInsn((java.lang.Object) classWriter57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@3863a4cc");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        classWriter36.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter36.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter50.newConst((java.lang.Object) (byte) 0);
        int int53 = classWriter36.newConst((java.lang.Object) int52);
        classWriter36.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter36.visitAnnotation("L1601838046", true);
        org.mockito.asm.Attribute attribute62 = null;
        org.mockito.asm.Attribute[] attributeArray63 = new org.mockito.asm.Attribute[] { attribute62 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter36, attributeArray63, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(attributeArray63);
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String str59 = classReader58.getSuperName();
        char[] charArray65 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj66 = classReader58.readConst(6, charArray65);
        char[] charArray74 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str75 = classReader58.readUTF8((int) '#', charArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = classReader26.readUTF8((-1), charArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + "\001" + "'", obj66, "\001");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\000" + "'", str75, "\000");
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitCode();
        org.mockito.asm.Attribute attribute27 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader26.getItem(21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L636727990", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(5);
        classWriter37.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int44 = classWriter37.newClass("");
        int int47 = classWriter37.newNameType("L1847716459", "");
        classWriter37.visitEnd();
        classWriter37.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int56 = classWriter37.newField("L529122729", "L488861128", "L976656549");
        classWriter37.visitOuterClass("L1387910543", "L897597087", "L1013343419");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor34.visit("L1013343419", (java.lang.Object) classWriter37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@318b0058");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1930348385");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        // The following exception was thrown during execution in test generation
        try {
            short short38 = classReader26.readShort((int) (short) 3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitInnerClass("hi!", "L488861128", "L624707113", 0);
        int int8 = classWriter1.newClass("L1013343419");
        org.mockito.asm.Attribute attribute9 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        int int18 = classWriter1.newMethod("L680573325", "\001", "L1847716459", false);
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        java.lang.Class<?> wildcardClass30 = methodVisitor16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L2000102916", "L636727990");
        int int68 = classWriter1.newMethod("L976656549", "L2000102916", "L1287376048", false);
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        int int31 = classWriter11.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter11.visitAnnotation("", true);
        byte[] byteArray35 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        java.lang.String str37 = classReader36.getSuperName();
        char[] charArray43 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj44 = classReader36.readConst(6, charArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = classReader8.readClass(19, charArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "\001" + "'", obj44, "\001");
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        char[] charArray35 = new char[] { 'a', 'a', '4', '#', 'a', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = classReader26.readConst(26729, charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26729");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "aa4#a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "aa4#a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, a, 4, #, a,  ]");
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.getItem((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -21316096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        int int32 = classReader26.readInt(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-889275714) + "'", int32 == (-889275714));
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int30 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String str59 = classReader58.getSuperName();
        char[] charArray65 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj66 = classReader58.readConst(6, charArray65);
        char[] charArray74 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str75 = classReader58.readUTF8((int) '#', charArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = classReader26.readClass(19, charArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26729");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + "\001" + "'", obj66, "\001");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\000" + "'", str75, "\000");
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter12.visitMethod(0, "", "", "hi!", strArray26);
        int int32 = classWriter12.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter12.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter38.visitAnnotation("hi!", false);
        annotationVisitor65.visitEnum("hi!", "", "hi!");
        annotationVisitor35.visit("", (java.lang.Object) "hi!");
        int int71 = classWriter1.newConst((java.lang.Object) "");
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readUnsignedShort(16842755);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitCode();
        org.mockito.asm.Attribute attribute83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader26.readInt(2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray13, (int) (short) 100, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 108");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L680573325", false);
        annotationVisitor28.visitEnum("L728847777", "L488861128", "L590888141");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 202);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String str42 = classReader41.getSuperName();
        char[] charArray48 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj49 = classReader41.readConst(6, charArray48);
        char[] charArray57 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str58 = classReader41.readUTF8((int) '#', charArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = classReader9.readConst(2560, charArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "\001" + "'", obj49, "\001");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\000" + "'", str58, "\000");
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.Attribute[] attributeArray32 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter31, attributeArray32, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(attributeArray32);
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1009580268");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        methodVisitor25.visitMethodInsn((int) (short) 3072, "L529122729", "L1628304347", "L1930348385");
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader14, (int) '#');
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter22.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter22.visitMethod(3, "hi!", "hi!", "hi!", strArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor47 = classWriter16.visitMethod(15, "L755844592", "L1700698598", "L264795169", strArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertNotNull(methodVisitor46);
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter1.visitAnnotation("L728847777", true);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        int int84 = classWriter64.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = classWriter64.visitAnnotation("", true);
        byte[] byteArray88 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader89 = new org.mockito.asm.ClassReader(byteArray88);
        int int91 = classReader89.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter(classReader89, (int) '4');
        int int95 = classReader89.readUnsignedShort(5);
        java.lang.String[] strArray96 = classReader89.getInterfaces();
        classWriter1.visit(12, 65210, "L976656549", "L238476442", "L976656549", strArray96);
        int int99 = classWriter1.newClass("L1075066296");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 51966 + "'", int91 == 51966);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 10 + "'", int99 == 10);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader26.getItem(14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        fieldVisitor12.visitEnd();
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldVisitor12);
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        methodVisitor25.visitMethodInsn((int) (short) 3072, "L529122729", "L1628304347", "L1930348385");
        java.lang.Class<?> wildcardClass40 = methodVisitor25.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label16 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        label16.info = strArray32;
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod((int) (short) 100, "", "hi!", "", strArray32);
        classWriter1.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray32);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        classWriter42.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter42.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(5);
        int int63 = classWriter61.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int75 = classWriter70.newMethod("", "", "hi!", true);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter70.visitMethod(0, "", "", "hi!", strArray84);
        classWriter61.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray84);
        classWriter42.visit((int) ' ', 8, "L1287376048", "L1028579140", "L680573325", strArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod(78, "", "L529122729", "", strArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodVisitor85);
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int10 = classReader9.header;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = classReader9.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 78 + "'", int10 == 78);
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1429849124");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        short short83 = classReader81.readShort((int) (byte) 0);
        int int85 = classReader81.readUnsignedShort((int) ' ');
        long long87 = classReader81.readLong((int) '#');
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter1.visitField(10, "L1847716459", "", "L749737959", (java.lang.Object) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = fieldVisitor88.visitAnnotation("L841843626", true);
        annotationVisitor91.visitEnum("L1132227206", "L999961130", "L2127085380");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) -13570 + "'", short83 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2560 + "'", int85 == 2560);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1126999590795363L + "'", long87 == 1126999590795363L);
        org.junit.Assert.assertNotNull(fieldVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitEnd();
        int int5 = classWriter1.newNameType("", "L172254079");
        org.mockito.asm.Attribute attribute6 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader26.getItem((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        java.lang.String str86 = label83.toString();
        java.lang.String str87 = label83.toString();
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] {};
        methodVisitor16.visitTableSwitchInsn((int) (short) -1, 1, label83, labelArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor16.visitParameterAnnotation(26729, "L1221801792", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L640426131" + "'", str86, "L640426131");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L640426131" + "'", str87, "L640426131");
        org.junit.Assert.assertNotNull(labelArray88);
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        methodVisitor33.visitIntInsn((-889275714), (int) '#');
        methodVisitor33.visitLdcInsn((java.lang.Object) "L242883751");
        java.lang.Class<?> wildcardClass39 = methodVisitor33.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L264795169", "L680573325");
        classWriter1.visitSource("L1013343419", "L1142940414");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter31.visitMethod(8, "hi!", "", "", strArray53);
        methodVisitor55.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor55.visitIincInsn(0, (int) (short) -1);
        methodVisitor55.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            int int63 = classWriter1.newConst((java.lang.Object) methodVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@6d0b59a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor55);
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.getItem(2);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader26.getItem((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L976656549");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter39.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        char[] charArray39 = new char[] { '4', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = classReader26.readConst((int) (short) -13570, charArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, 4]");
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter26.visitMethod(8, "hi!", "", "", strArray48);
        methodVisitor50.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        int[] intArray80 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray81 = new org.mockito.asm.Label[] {};
        methodVisitor50.visitLookupSwitchInsn(label74, intArray80, labelArray81);
        java.lang.Object obj83 = label74.info;
        methodVisitor16.visitLabel(label74);
        methodVisitor16.visitMethodInsn((int) (short) -1, "L1847716459", "L624707113", "L238476442");
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L96958126" + "'", str76, "L96958126");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray81);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitIntInsn(0, (int) (short) 0);
        org.mockito.asm.Label label33 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLineNumber(22, label33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(458753);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int8 = classWriter3.newMethod("", "", "hi!", true);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor18 = classWriter3.visitMethod(0, "", "", "hi!", strArray17);
        methodVisitor18.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label22 = new org.mockito.asm.Label();
        methodVisitor18.visitLabel(label22);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        classWriter25.visitSource("", "");
        label22.info = "";
        int int32 = label22.getOffset();
        java.lang.String str33 = label22.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classWriter1.newConst((java.lang.Object) label22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value L544695718");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodVisitor18);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "L544695718" + "'", str33, "L544695718");
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int28 = classWriter1.newUTF8("hi!");
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(5);
        classWriter12.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int19 = classWriter12.newClass("");
        int int22 = classWriter12.newNameType("L1847716459", "");
        classWriter12.visitEnd();
        classWriter12.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int31 = classWriter12.newField("L529122729", "L488861128", "L976656549");
        int int35 = classWriter12.newField("L1142940414", "L75359331", "L426422007");
        byte[] byteArray36 = classWriter12.toByteArray();
        org.mockito.asm.Attribute attribute37 = null;
        org.mockito.asm.Attribute[] attributeArray38 = new org.mockito.asm.Attribute[] { attribute37 };
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter12, attributeArray38, (int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 25, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 7, 0, 17, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 12, 0, 19, 0, 20, 9, 0, 18, 0, 21, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 23, 0, 0, 0, 4, 0, 8, 0, 10, 0, 24, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(attributeArray38);
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitOuterClass("", "L897597087", "L680573325");
        int int33 = classWriter1.newNameType("L535346328", "");
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("L1287376048", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = methodVisitor37.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter1.visitField(20, "\000", "L1009580268", "L1847716459", (java.lang.Object) methodVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@10235a23");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.getItem(2);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        org.mockito.asm.Attribute attribute39 = null;
        org.mockito.asm.Attribute[] attributeArray40 = new org.mockito.asm.Attribute[] { attribute39 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor38, attributeArray40, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(attributeArray40);
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitVarInsn((int) '#', 23);
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        org.mockito.asm.Attribute attribute30 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMaxs((int) (short) 0, 7);
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            short short41 = classReader26.readShort(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            short short9 = classReader7.readShort((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter19.visitMethod(8, "hi!", "", "", strArray41);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        methodVisitor61.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor61.visitCode();
        methodVisitor61.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(0);
        int int78 = classWriter73.newMethod("", "", "hi!", true);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter73.visitMethod(0, "", "", "hi!", strArray87);
        methodVisitor88.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label92 = new org.mockito.asm.Label();
        methodVisitor88.visitLabel(label92);
        java.lang.String str94 = label92.toString();
        methodVisitor61.visitLineNumber((int) (short) -1, label92);
        label92.info = (-1.0f);
        methodVisitor43.visitLineNumber(19, label92);
        methodVisitor17.visitLabel(label92);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(methodVisitor88);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L364320201" + "'", str94, "L364320201");
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        java.lang.Class<?> wildcardClass10 = classReader7.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int8 = classWriter3.newMethod("", "", "hi!", true);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor18 = classWriter3.visitMethod(0, "", "", "hi!", strArray17);
        methodVisitor18.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor18.visitCode();
        methodVisitor18.visitIincInsn(0, 5);
        int int28 = classWriter1.newConst((java.lang.Object) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("\000", true);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor31.visit("L2037791973", (java.lang.Object) classWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@1b08c941");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodVisitor18);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.FieldVisitor fieldVisitor10 = classWriter1.visitField((int) (byte) 1, "L110679537", "L75359331", "L238476442", (java.lang.Object) 100L);
        org.mockito.asm.Attribute attribute11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor10.visitAttribute(attribute11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor10);
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, 254);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.getItem(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        short short83 = classReader81.readShort((int) (byte) 0);
        int int85 = classReader81.readUnsignedShort((int) ' ');
        long long87 = classReader81.readLong((int) '#');
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter1.visitField(10, "L1847716459", "", "L749737959", (java.lang.Object) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = fieldVisitor88.visitAnnotation("L2000102916", true);
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor88.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) -13570 + "'", short83 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2560 + "'", int85 == 2560);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1126999590795363L + "'", long87 == 1126999590795363L);
        org.junit.Assert.assertNotNull(fieldVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        fieldVisitor31.visitEnd();
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor31.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "hi!", strArray90);
        methodVisitor94.visitTypeInsn(0, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor94.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor94.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor98);
        org.junit.Assert.assertNotNull(annotationVisitor99);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        int int31 = classReader26.readByte(8);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int61 = classReader59.readUnsignedShort((int) (byte) 0);
        short short63 = classReader59.readShort(7);
        int int64 = classReader59.header;
        int int66 = classReader59.readInt(19);
        char[] charArray71 = new char[] { '4', '#', '#' };
        java.lang.String str72 = classReader59.readUTF8(14, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = classReader26.readUTF8((int) (byte) 1, charArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 51966 + "'", int61 == 51966);
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 0 + "'", short63 == (short) 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 90 + "'", int64 == 90);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1751720204 + "'", int66 == 1751720204);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        // The following exception was thrown during execution in test generation
        try {
            short short13 = classReader7.readShort(26729);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26729");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1435737877");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readUnsignedShort((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        classWriter32.visitOuterClass("hi!", "", "");
        int int44 = classWriter32.newNameType("hi!", "hi!");
        int int47 = classWriter32.newNameType("hi!", "");
        java.lang.Object obj52 = null;
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter32.visitField(9, "L1601838046", "L2062266913", "L680573325", obj52);
        classWriter32.visitSource("L636727990", "");
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        label62.info = strArray78;
        classWriter32.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray78);
        classWriter1.visit((int) (short) 0, 2, "L636727990", "L1601838046", "L238476442", strArray78);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute86 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor53);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        int int28 = classWriter1.newMethod("L1287376048", "", "L1162526488", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 18 + "'", int28 == 18);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int61 = classReader59.readUnsignedShort((int) (byte) 0);
        short short63 = classReader59.readShort(7);
        int int64 = classReader59.header;
        int int66 = classReader59.readInt(19);
        char[] charArray71 = new char[] { '4', '#', '#' };
        java.lang.String str72 = classReader59.readUTF8(14, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = classReader26.readUTF8(4, charArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 51966 + "'", int61 == 51966);
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 0 + "'", short63 == (short) 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 90 + "'", int64 == 90);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1751720204 + "'", int66 == 1751720204);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\uaf80\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\uaf80\000\000");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "\uaf80, \000, \000]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        org.mockito.asm.Attribute attribute47 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = classReader9.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int35 = classReader26.readByte(0);
        org.mockito.asm.ClassVisitor classVisitor36 = null;
        org.mockito.asm.Attribute[] attributeArray37 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor36, attributeArray37, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 202 + "'", int35 == 202);
        org.junit.Assert.assertNotNull(attributeArray37);
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        char[] charArray18 = new char[] { 'a', 'a', 'a', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = classReader12.readConst(0, charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "aaa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "aaa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, a, a, 4]");
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        classWriter31.visitOuterClass("hi!", "", "");
        int int43 = classWriter31.newNameType("hi!", "hi!");
        int int46 = classWriter31.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        classWriter31.visit(5, 6, "", "", "", strArray67);
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter31.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter31.visitOuterClass("L680573325", "L275489687", "L1847716459");
        classWriter31.visitInnerClass("L976656549", "L535346328", "hi!", 22);
        org.mockito.asm.Attribute attribute85 = null;
        org.mockito.asm.Attribute[] attributeArray86 = new org.mockito.asm.Attribute[] { attribute85 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter31, attributeArray86, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertNotNull(attributeArray86);
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader26.readInt((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        label44.info = strArray60;
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter39.visitMethod((int) (short) 100, "", "hi!", "", strArray60);
        classWriter39.visitInnerClass("L1847716459", "", "L680573325", 9);
        org.mockito.asm.Attribute attribute69 = null;
        org.mockito.asm.Attribute[] attributeArray70 = new org.mockito.asm.Attribute[] { attribute69 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter39, attributeArray70, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNotNull(attributeArray70);
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String str62 = classReader61.getSuperName();
        char[] charArray68 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj69 = classReader61.readConst(6, charArray68);
        char[] charArray77 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str78 = classReader61.readUTF8((int) '#', charArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = classReader26.readClass((int) (byte) -1, charArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "\001" + "'", obj69, "\001");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\000" + "'", str78, "\000");
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L897597087", false);
        org.mockito.asm.Attribute attribute15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor16.visitAnnotation("L1368708044", true);
        annotationVisitor81.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L1287376048", false);
        classWriter1.visitSource("L2014806404", "L2000102916");
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitCode();
        methodVisitor16.visitFieldInsn(6, "", "L529122729", "L1075066296");
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLabel(label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor31.visitAnnotation("L535346328", false);
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor31.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 0]");
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.getItem(2);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        char[] charArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.readUTF8((-1), charArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        label56.info = strArray72;
        classWriter1.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray72);
        classWriter1.visitSource("L59063553", "L110679537");
        org.mockito.asm.Attribute attribute79 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1589078908");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        java.lang.String str30 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader26.getItem(78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 78");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        short short60 = classReader58.readShort((int) (byte) 0);
        int int62 = classReader58.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(classReader58, 0);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader58, 0);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader58, (int) (byte) 100);
        classWriter68.visitSource("", "L1013343419");
        org.mockito.asm.Attribute[] attributeArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter68, attributeArray72, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) -13570 + "'", short60 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2560 + "'", int62 == 2560);
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        long long31 = classReader26.readLong(10);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader26.readInt((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 72057624102764800L + "'", long31 == 72057624102764800L);
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readByte((int) (short) 17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17784");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readByte(1);
        int int14 = classReader7.readUnsignedShort((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter16.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter16, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 254 + "'", int12 == 254);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 256 + "'", int14 == 256);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        byte[] byteArray9 = classReader8.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 23, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        classWriter15.visitOuterClass("hi!", "", "");
        int int27 = classWriter15.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        classWriter33.visitOuterClass("hi!", "", "");
        int int45 = classWriter33.newNameType("hi!", "hi!");
        int int48 = classWriter33.newNameType("hi!", "");
        java.lang.Object obj53 = null;
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter33.visitField(9, "L1601838046", "L2062266913", "L680573325", obj53);
        classWriter33.visitSource("L636727990", "");
        org.mockito.asm.Label label63 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        label63.info = strArray79;
        classWriter33.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray79);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter15.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray79);
        byte[] byteArray84 = classWriter15.toByteArray();
        int int86 = classWriter15.newClass("L1889100462");
        int int90 = classWriter15.newField("L1368708044", "L2014806404", "L1132227206");
        org.mockito.asm.Attribute[] attributeArray91 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray91, (-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 1, 0, 10, 76, 53, 51, 53, 51, 52, 54, 51, 50, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 10, 0, 2, 0, 11, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 13, 0, 1, 0, 14, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 16 + "'", int86 == 16);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 21 + "'", int90 == 21);
        org.junit.Assert.assertNotNull(attributeArray91);
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader26.getItem(2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L579675851", "L745089702", "L59063553", 90);
        org.mockito.asm.Attribute attribute57 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(156461415);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter35, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(5);
        classWriter21.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int28 = classWriter21.newClass("");
        int int31 = classWriter21.newNameType("L1847716459", "");
        classWriter21.visitEnd();
        classWriter21.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int40 = classWriter21.newField("L529122729", "L488861128", "L976656549");
        int int44 = classWriter21.newField("L1142940414", "L75359331", "L426422007");
        byte[] byteArray45 = classWriter21.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classWriter1.newConst((java.lang.Object) byteArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@25bdcd73");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 25, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 7, 0, 17, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 12, 0, 19, 0, 20, 9, 0, 18, 0, 21, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 23, 0, 0, 0, 4, 0, 8, 0, 10, 0, 24, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitIntInsn((int) (short) -13570, 1);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn((int) ' ', "L1601838046", "L782129665", "L1715729238");
        methodVisitor25.visitInsn(51966);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int8 = classReader7.getAccess();
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter10.visitMethod(0, "", "", "hi!", strArray24);
        int int30 = classWriter10.newMethod("", "", "hi!", false);
        classWriter10.visitInnerClass("", "", "", (int) ' ');
        classWriter10.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter10.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int49 = classWriter10.newMethod("L590888141", "L959574331", "L897597087", true);
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter10, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 18 + "'", int49 == 18);
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(5, (int) ' ');
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readInt(5);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(0);
        int int19 = classWriter14.newMethod("", "", "hi!", true);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor29 = classWriter14.visitMethod(0, "", "", "hi!", strArray28);
        int int34 = classWriter14.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter14.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter14.visitAnnotation("L636727990", false);
        org.mockito.asm.Attribute[] attributeArray41 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter14, attributeArray41, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodVisitor29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(attributeArray41);
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = classReader38.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        byte[] byteArray21 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray21, (int) (byte) 10, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 206");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 4, 0, 8, 0, 10, 0, 18, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(5);
        classWriter88.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField(256, "L1700698598", "L1889100462", "L1715729238", (java.lang.Object) "hi!");
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor94.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(fieldVisitor94);
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short34 = classReader26.readShort((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(3, "hi!", "hi!", "hi!", strArray60);
        int int65 = classWriter38.newNameType("", "L636727990");
        classWriter38.visitSource("L1221801792", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter38.visitAnnotation("L1132227206", false);
        classWriter38.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter38, 104);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int5 = classWriter3.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter3.visitMethod(3, "hi!", "hi!", "hi!", strArray25);
        int int28 = classWriter1.newConst((java.lang.Object) "hi!");
        classWriter1.visitSource("L488861128", "L897597087");
        classWriter1.visitInnerClass("L624707113", "L728847777", "L1601838046", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L488861128", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("L426422007", true);
        annotationVisitor42.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray7, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 60");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        int int35 = classReader26.readUnsignedShort(19);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.readByte(16842755);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16842755");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26729 + "'", int35 == 26729);
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 202, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor58.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = methodVisitor58.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        methodVisitor80.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label84 = new org.mockito.asm.Label();
        methodVisitor80.visitLabel(label84);
        methodVisitor58.visitJumpInsn((-1), label84);
        java.lang.String str87 = label84.toString();
        methodVisitor25.visitLineNumber((int) (byte) -1, label84);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter90.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = classWriter90.visitAnnotation("L2062266913", true);
        label84.info = classWriter90;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L85690983" + "'", str87, "L85690983");
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L364320201");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label[] labelArray85 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitTableSwitchInsn(20, 3, label84, labelArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(labelArray85);
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        char[] charArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader26.readUTF8(40, charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17784");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L529122729");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 202);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = classReader9.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L2062266913", true);
        annotationVisitor9.visitEnum("L1952894981", "L364320201", "L9401833");
        org.junit.Assert.assertNotNull(annotationVisitor9);
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitCode();
        org.mockito.asm.Label label85 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLineNumber(65210, label85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L349019854" + "'", str75, "L349019854");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader26.getItem((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        java.lang.Class<?> wildcardClass36 = methodVisitor25.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn((-1107296256), 12);
        methodVisitor25.visitMaxs(82, 78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        long long31 = classReader26.readLong(12);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int60 = classReader59.getAccess();
        byte[] byteArray61 = classReader59.b;
        byte[] byteArray62 = classReader59.b;
        byte[] byteArray63 = classReader59.b;
        java.lang.String[] strArray64 = classReader59.getInterfaces();
        char[] charArray71 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj72 = classReader59.readConst((int) (short) 4, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj73 = classReader26.readConst(22, charArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1970329148719976L + "'", long31 == 1970329148719976L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + "" + "'", obj72, "");
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader30.getItem(16842755);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16842755");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        int int33 = classReader26.readByte(104);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        char[] charArray32 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = classReader26.readUTF8(254, charArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        methodVisitor43.visitLabel(label47);
        java.lang.String str49 = label47.toString();
        methodVisitor16.visitLineNumber((int) (short) -1, label47);
        label47.info = (-1.0f);
        int int53 = label47.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "L890847236" + "'", str49, "L890847236");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int30 = classReader26.getAccess();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        org.mockito.asm.Attribute attribute32 = null;
        org.mockito.asm.Attribute[] attributeArray33 = new org.mockito.asm.Attribute[] { attribute32 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor31, attributeArray33, 65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(attributeArray33);
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter33.visitAnnotation("L636727990", false);
        classWriter33.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.Attribute attribute64 = null;
        org.mockito.asm.Attribute[] attributeArray65 = new org.mockito.asm.Attribute[] { attribute64 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray65, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(attributeArray65);
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor16.visitParameterAnnotation(6, "L1611208075", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        annotationVisitor74.visitEnum("L426422007", "L1287376048", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor74.visitAnnotation("L1936126716", "L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = annotationVisitor81.visitArray("L1435737877");
        annotationVisitor81.visitEnum("L1589078908", "hi!", "L364320201");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitVarInsn(5, 0);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        methodVisitor48.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor48.visitCode();
        methodVisitor48.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        java.lang.String str81 = label79.toString();
        methodVisitor48.visitLineNumber((int) (short) -1, label79);
        label79.info = (-1.0f);
        methodVisitor16.visitLabel(label79);
        java.lang.String str86 = label79.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1566032477" + "'", str81, "L1566032477");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L1566032477" + "'", str86, "L1566032477");
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        java.lang.Object obj32 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn(obj32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter29.newMethod("", "", "hi!", true);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter29.visitMethod(0, "", "", "hi!", strArray43);
        int int49 = classWriter29.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter29.visitAnnotation("", true);
        byte[] byteArray53 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        java.lang.String str55 = classReader54.getSuperName();
        char[] charArray61 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj62 = classReader54.readConst(6, charArray61);
        char[] charArray70 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str71 = classReader54.readUTF8((int) '#', charArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader26.readUTF8((int) (byte) 0, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "\001" + "'", obj62, "\001");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\000" + "'", str71, "\000");
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(5);
        classWriter38.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray43 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        int int46 = classReader44.readUnsignedShort((int) '#');
        int int48 = classReader44.readInt(7);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader44, (int) '4');
        classWriter50.visitEnd();
        org.mockito.asm.Attribute[] attributeArray52 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter50, attributeArray52, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12592 + "'", int46 == 12592);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1793 + "'", int48 == 1793);
        org.junit.Assert.assertNotNull(attributeArray52);
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        annotationVisitor21.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String str66 = classReader65.getSuperName();
        char[] charArray72 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj73 = classReader65.readConst(6, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = classReader26.readConst(202, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\001" + "'", obj73, "\001");
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitMethodInsn((int) (byte) 1, "L728847777", "L680573325", "L238476442");
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        short short83 = classReader81.readShort((int) (byte) 0);
        int int85 = classReader81.readUnsignedShort((int) ' ');
        long long87 = classReader81.readLong((int) '#');
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter1.visitField(10, "L1847716459", "", "L749737959", (java.lang.Object) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = fieldVisitor88.visitAnnotation("L2000102916", true);
        fieldVisitor88.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) -13570 + "'", short83 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2560 + "'", int85 == 2560);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1126999590795363L + "'", long87 == 1126999590795363L);
        org.junit.Assert.assertNotNull(fieldVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "hi!", strArray90);
        methodVisitor94.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor94.visitParameterAnnotation(11, "L890847236", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.Label label18 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter20.visitMethod(0, "", "", "hi!", strArray34);
        label18.info = strArray34;
        classWriter1.visit(26, (int) (byte) 10, "L2022616480", "L426422007", "L2089731244", strArray34);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        classWriter44.visitOuterClass("hi!", "", "");
        int int56 = classWriter44.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        int int83 = classWriter63.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter63.visitAnnotation("", true);
        byte[] byteArray87 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        short short90 = classReader88.readShort((int) (byte) 0);
        int int92 = classReader88.readUnsignedShort((int) ' ');
        int int94 = classReader88.readInt(0);
        java.lang.String[] strArray95 = classReader88.getInterfaces();
        classWriter44.visit(1, 18, "L59063553", "", "L426422007", strArray95);
        classWriter1.visit(8, (int) (byte) 100, "L2039587225", "L1009580268", "L590888141", strArray95);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) -13570 + "'", short90 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2560 + "'", int92 == 2560);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-889275714) + "'", int94 == (-889275714));
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitVarInsn(22, (int) (short) 3072);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor25.visitParameterAnnotation(156461415, "L3043237", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitCode();
        methodVisitor16.visitFieldInsn(22, "L529122729", "L110679537", "L75359331");
        methodVisitor16.visitFieldInsn((int) (short) 3072, "L1429849124", "L1142940414", "");
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("L1221801792", (int) (short) 1);
        org.mockito.asm.Label label23 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int30 = classWriter25.newMethod("", "", "hi!", true);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter25.visitMethod(0, "", "", "hi!", strArray39);
        label23.info = strArray39;
        org.mockito.asm.Label[] labelArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitTableSwitchInsn(26, (int) (short) 0, label23, labelArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L745089702");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        char[] charArray38 = new char[] { '4', '#', '#' };
        java.lang.String str39 = classReader26.readUTF8(14, charArray38);
        byte[] byteArray40 = classReader26.b;
        java.lang.String str41 = classReader26.getSuperName();
        java.lang.String str42 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        classWriter44.visitOuterClass("hi!", "", "");
        int int56 = classWriter44.newNameType("hi!", "hi!");
        int int59 = classWriter44.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter66.visitMethod(0, "", "", "hi!", strArray80);
        classWriter44.visit(5, 6, "", "", "", strArray80);
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter44.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter44.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray93 = classWriter44.toByteArray();
        classWriter44.visitEnd();
        org.mockito.asm.Attribute[] attributeArray95 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter44, attributeArray95, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(fieldVisitor88);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(attributeArray95);
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(0);
        classWriter88.visitOuterClass("L1847716459", "hi!", "L680573325");
        methodVisitor16.visitLdcInsn((java.lang.Object) "hi!");
        methodVisitor16.visitMultiANewArrayInsn("hi!", 1);
        methodVisitor16.visitVarInsn(23, 20);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader26.readByte((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitTypeInsn(3, "L1162526488");
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter51.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter59.visitMethod(0, "", "", "hi!", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter51.visitMethod(8, "hi!", "", "", strArray73);
        int int80 = classWriter51.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter51.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) classWriter51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@21deb53d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        java.lang.Class<?> wildcardClass56 = methodVisitor51.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L3043237");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1889100462");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        java.lang.String str64 = classReader63.getSuperName();
        char[] charArray70 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj71 = classReader63.readConst(6, charArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader26.readUTF8(24, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "\001" + "'", obj71, "\001");
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.Label label25 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLineNumber(875903244, label25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            long long31 = classReader26.readLong(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "hi!", strArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor94.visitParameterAnnotation(0, "L1287376048", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        methodVisitor16.visitIntInsn(6, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor16.visitParameterAnnotation(90, "L2127085380", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        short short32 = classReader26.readShort(12);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader26.readUnsignedShort((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 7 + "'", short32 == (short) 7);
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader26.readInt((int) (short) 3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 1698786926);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter22.newMethod("", "", "hi!", true);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter22.visitMethod(0, "", "", "hi!", strArray36);
        label20.info = strArray36;
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter15.visitMethod((int) (short) 100, "", "hi!", "", strArray36);
        classWriter15.visitInnerClass("L1847716459", "", "L680573325", 9);
        int int46 = classWriter15.newClass("");
        org.mockito.asm.Attribute[] attributeArray47 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader9.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray47, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(attributeArray47);
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor25.visitAnnotation("L419471195", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitParameterAnnotation(0, "L264795169", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        int int29 = classWriter25.newUTF8("hi!");
        classWriter25.visitInnerClass("L2000102916", "L2062266913", "L59063553", (int) (short) 100);
        classWriter25.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classWriter1.newConst((java.lang.Object) classWriter25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@6c46043a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        int int54 = classReader53.header;
        // The following exception was thrown during execution in test generation
        try {
            short short56 = classReader53.readShort(65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 82 + "'", int54 == 82);
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 100, 100]");
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("L1589078908", "", "L1009580268", (int) (short) 10);
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        fieldVisitor62.visitEnd();
        org.mockito.asm.Attribute attribute64 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor62.visitAttribute(attribute64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L579675851");
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        methodVisitor76.visitFieldInsn(8, "hi!", "", "");
        methodVisitor76.visitMethodInsn((int) '#', "hi!", "", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor87 = classWriter1.visitField(0, "L1028579140", "L579675851", "L1028579140", (java.lang.Object) methodVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@2fb7b2f3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        int int35 = classReader26.readUnsignedShort(19);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter37.visitAnnotation("L636727990", false);
        classWriter37.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter37.visitAnnotation("L535346328", true);
        classWriter37.visitOuterClass("L1429849124", "L1583234446", "L782129665");
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter37, attributeArray75, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26729 + "'", int35 == 26729);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(attributeArray75);
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        long long37 = classReader26.readLong(8);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.readUnsignedShort((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2815849279193089L + "'", long37 == 2815849279193089L);
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1292845306", false);
        annotationVisitor28.visitEnum("L367225907", "L1847716459", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        byte[] byteArray15 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader12.readByte((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1307358075");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        long long35 = classReader26.readLong(7);
        byte[] byteArray36 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray36, 1793, 78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1801");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L367225907");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 458753);
        int int41 = classReader26.getItem(4);
        java.lang.String[] strArray42 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        int int71 = classReader69.readUnsignedShort((int) (byte) 0);
        java.lang.String str72 = classReader69.getSuperName();
        long long74 = classReader69.readLong(12);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(classReader69, 18);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter76.visitAnnotation("L976656549", true);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter76, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 23 + "'", int41 == 23);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 51966 + "'", int71 == 51966);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1970329148719976L + "'", long74 == 1970329148719976L);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label42 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        label42.info = strArray58;
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod((int) (short) 100, "", "hi!", "", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter37.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor67.visitAnnotation("L535346328", false);
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter1.visitField(7, "L1715729238", "L693982720", "L1490365060", (java.lang.Object) false);
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(fieldVisitor74);
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(21);
        byte[] byteArray13 = classWriter12.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor14 = classWriter1.visitField(65210, "L728847777", "L1287376048", "L1368708044", (java.lang.Object) classWriter12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@4b2aa567");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(202);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter7.newMethod("", "", "hi!", true);
        classWriter7.visitOuterClass("hi!", "", "");
        int int19 = classWriter7.newNameType("hi!", "hi!");
        int int21 = classWriter7.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label32 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        label32.info = strArray48;
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod((int) (short) 100, "", "hi!", "", strArray48);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter27.visitAnnotation("L1847716459", false);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        int int80 = classWriter60.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter60.visitAnnotation("", true);
        byte[] byteArray84 = classWriter60.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        short short87 = classReader85.readShort((int) (byte) 0);
        int int89 = classReader85.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter91 = new org.mockito.asm.ClassWriter(classReader85, 0);
        java.lang.String[] strArray92 = classReader85.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter27.visitMethod(2560, "L1028579140", "L59063553", "hi!", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter7.visitMethod((int) (byte) 1, "L897597087", "L809431533", "L1221801792", strArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor95 = classWriter1.visitMethod((int) (short) 7, "L1111133036", "L1086414642", "L831655905", strArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short87 + "' != '" + (short) -13570 + "'", short87 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2560 + "'", int89 == 2560);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor93);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        methodVisitor51.visitIntInsn(4, 12592);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter60.newConst((java.lang.Object) (short) 1);
        classWriter60.visitSource("", "L2000102916");
        int int70 = classWriter60.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray71 = classWriter60.toByteArray();
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(0);
        int int84 = classWriter79.newMethod("", "", "hi!", true);
        java.lang.String[] strArray93 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter79.visitMethod(0, "", "", "hi!", strArray93);
        label77.info = strArray93;
        classWriter60.visit(26, (int) (byte) 10, "L2022616480", "L426422007", "L2089731244", strArray93);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor51.visitLdcInsn((java.lang.Object) classWriter60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@583062a9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter14.newConst((java.lang.Object) (short) 1);
        int int18 = classWriter14.newUTF8("hi!");
        int int23 = classWriter14.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        label34.info = strArray50;
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter29.visitMethod((int) (short) 100, "", "hi!", "", strArray50);
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter14.visitMethod(10, "L809431533", "L2062266913", "", strArray50);
        classWriter14.visitInnerClass("L488861128", "L242883751", "L1287376048", (int) (short) -1);
        byte[] byteArray60 = classWriter14.toByteArray();
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter67.visitMethod(0, "", "", "hi!", strArray81);
        int int87 = classWriter67.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = classWriter67.visitAnnotation("", true);
        byte[] byteArray91 = classWriter67.toByteArray();
        org.mockito.asm.ClassReader classReader92 = new org.mockito.asm.ClassReader(byteArray91);
        short short94 = classReader92.readShort((int) (byte) 0);
        java.lang.String str95 = classReader92.getSuperName();
        java.lang.String[] strArray96 = classReader92.getInterfaces();
        classWriter14.visit((int) ' ', 254, "L1028579140", "L590888141", "", strArray96);
        int int98 = classWriter1.newConst((java.lang.Object) "L1028579140");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 0, 12, 0, 4, 0, 4, 11, 0, 3, 0, 5, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 4, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 10, 1, 0, 10, 76, 50, 52, 50, 56, 56, 51, 55, 53, 49, 7, 0, 12, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 7, 0, 8, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 9, 0, 9, 0, 9, 0, 9, 0, 16, 0, 0, 0, 2, 0, 4, 0, 1, 0, 17, 0, 0, 0, 10, 0, 1, 0, 11, 0, 13, 0, 14, -1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short94 + "' != '" + (short) -13570 + "'", short94 == (short) -13570);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 7 + "'", int98 == 7);
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitSource("L636727990", "");
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        label31.info = strArray47;
        classWriter1.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray47);
        classWriter1.visitSource("L529122729", "L2037791973");
        classWriter1.visitInnerClass("L1413182688", "L419471195", "L71945869", (int) ' ');
        org.mockito.asm.Attribute attribute59 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.getItem(872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 872");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        int int32 = classReader26.readInt(0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int34 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            short short36 = classReader26.readShort(65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-889275714) + "'", int32 == (-889275714));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        classWriter27.visitOuterClass("hi!", "", "");
        classWriter27.visitEnd();
        java.lang.String[] strArray64 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter27.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("L1004763019", false);
        classWriter1.visitInnerClass("L1004763019", "L1292845306", "L782129665", 19);
        java.lang.Class<?> wildcardClass75 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int5 = classWriter3.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter3.visitMethod(3, "hi!", "hi!", "hi!", strArray25);
        int int28 = classWriter1.newConst((java.lang.Object) "hi!");
        classWriter1.visitSource("L488861128", "L897597087");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1132227206", false);
        annotationVisitor34.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.getItem(0);
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readByte(4);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label41 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        label41.info = strArray57;
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod((int) (short) 100, "", "hi!", "", strArray57);
        classWriter36.visitInnerClass("L1847716459", "", "L680573325", 9);
        int int67 = classWriter36.newClass("");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter36, (-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        short short31 = classReader26.readShort(8);
        int int33 = classReader26.readByte(19);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        int int62 = classReader61.getAccess();
        byte[] byteArray63 = classReader61.b;
        byte[] byteArray64 = classReader61.b;
        byte[] byteArray65 = classReader61.b;
        java.lang.String[] strArray66 = classReader61.getInterfaces();
        char[] charArray73 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj74 = classReader61.readConst((int) (short) 4, charArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = classReader26.readClass(20, charArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26913");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 10 + "'", short31 == (short) 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 104 + "'", int33 == 104);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "" + "'", obj74, "");
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitTypeInsn(11, "L1429849124");
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readInt(5);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader7.getItem((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMultiANewArrayInsn("L238476442", 23);
        org.mockito.asm.Label label31 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitJumpInsn(0, label31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        byte[] byteArray36 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray36, (int) (short) -13570, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13562");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        long long74 = classReader68.readLong((int) '#');
        int int76 = classReader68.getItem(0);
        java.lang.String str77 = classReader68.getSuperName();
        short short79 = classReader68.readShort(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter1.visitField((int) (short) -13570, "L529122729", "L75359331", "L2037791973", (java.lang.Object) (short) 0);
        int int85 = classWriter1.newNameType("L9401833", "L667379532");
        int int89 = classWriter1.newField("L1028579140", "L419471195", "L1611208075");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1126999590795363L + "'", long74 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 1792 + "'", short79 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 20 + "'", int85 == 20);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 26 + "'", int89 == 26);
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitMaxs(100, (int) (short) 0);
        methodVisitor25.visitCode();
        methodVisitor25.visitMaxs(8, 21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }
}

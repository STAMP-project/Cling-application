import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test07501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07501");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitInnerClass("L1497855016", "L2037791973", "L1028579140", 11);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter1.visitAnnotation("L1221801792", true);
        int int74 = classWriter1.newConst((java.lang.Object) 1126999590795363L);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(5);
        classWriter81.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray86 = classWriter81.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        int int89 = classReader87.readUnsignedShort((int) '#');
        int int91 = classReader87.readInt(7);
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter(classReader87, (int) '4');
        int int95 = classWriter93.newUTF8("L529122729");
        int int97 = classWriter93.newClass("L1292845306");
        byte[] byteArray98 = classWriter93.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor99 = classWriter1.visitField(29, "L495956935", "L1262041297", "L955490278", (java.lang.Object) classWriter93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@6e6f95bb");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 18 + "'", int74 == 18);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 12592 + "'", int89 == 12592);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1793 + "'", int91 == 1793);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 7 + "'", int95 == 7);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 9 + "'", int97 == 9);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 1, 0, 11, 76, 49, 50, 57, 50, 56, 52, 53, 51, 48, 54, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07502");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn(6, "L791392221", "L1403549550", "L560005029");
        methodVisitor25.visitFieldInsn(40, "L550782947", "L474216599", "L2137693765");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test07503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07503");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        classWriter1.visitOuterClass("L1268109548", "L1017623370", "");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        classWriter27.visitOuterClass("hi!", "", "");
        int int39 = classWriter27.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        int int66 = classWriter46.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter46.visitAnnotation("", true);
        byte[] byteArray70 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        short short73 = classReader71.readShort((int) (byte) 0);
        int int75 = classReader71.readUnsignedShort((int) ' ');
        int int77 = classReader71.readInt(0);
        java.lang.String[] strArray78 = classReader71.getInterfaces();
        classWriter27.visit(1, 18, "L59063553", "", "L426422007", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter1.visitMethod(0, "L1715729238", "L624707113", "L76446579", strArray78);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor80.visitAnnotationDefault();
        methodVisitor80.visitIntInsn(24, 201326848);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor80.visitAnnotation("L1630369841", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) -13570 + "'", short73 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2560 + "'", int75 == 2560);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-889275714) + "'", int77 == (-889275714));
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test07504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07504");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L242883751", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("L1628304347", false);
        classWriter1.visitEnd();
        int int34 = classWriter1.newUTF8("");
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
    }

    @Test
    public void test07505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07505");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1132227206", false);
        classWriter1.visitOuterClass("L1611208075", "L1928858580", "L1715729238");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        classWriter44.visitOuterClass("hi!", "", "");
        int int56 = classWriter44.newNameType("hi!", "hi!");
        int int59 = classWriter44.newNameType("hi!", "");
        java.lang.Object obj64 = null;
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter44.visitField(9, "L1601838046", "L2062266913", "L680573325", obj64);
        classWriter44.visitSource("L636727990", "");
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        label74.info = strArray90;
        classWriter44.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 0, "L128451051", "L538737171", "L2117999297", strArray90);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1033617867", "L130127010", "L537907644");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test07506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07506");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.header;
        int int41 = classReader26.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 3072);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) -326);
        int int47 = classReader26.readUnsignedShort(10);
        int int49 = classReader26.readInt(27);
        // The following exception was thrown during execution in test generation
        try {
            short short51 = classReader26.readShort(1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1034");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 256 + "'", int47 == 256);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 184549888 + "'", int49 == 184549888);
    }

    @Test
    public void test07507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07507");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitSource("L1889100462", "L1769475365");
        classWriter1.visitOuterClass("\000", "L1967552389", "L1268109548");
        byte[] byteArray15 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter22.newMethod("", "", "hi!", true);
        classWriter22.visitOuterClass("hi!", "", "");
        int int34 = classWriter22.newNameType("hi!", "hi!");
        int int37 = classWriter22.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        classWriter22.visit(5, 6, "", "", "", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter22.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter22.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray71 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        java.lang.String[] strArray73 = classReader72.getInterfaces();
        classWriter1.visit(38, (int) (short) 26729, "L224623650", "L836032224", "L884076874", strArray73);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter1.visitAnnotation("L129454114", false);
        classWriter1.visitOuterClass("L1304396351", "L1201574820", "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 3, 0, 0, 0, 0, 1, 0, 0, 1, 0, 11, 76, 49, 56, 56, 57, 49, 48, 48, 52, 54, 50, 1, 0, 2, -64, -128, 7, 0, 4, 1, 0, 11, 76, 49, 57, 54, 55, 53, 53, 50, 51, 56, 57, 1, 0, 11, 76, 49, 50, 54, 56, 49, 48, 57, 53, 52, 56, 12, 0, 6, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 11, 76, 49, 55, 54, 57, 52, 55, 53, 51, 54, 53, 0, 11, 0, 0, 0, 4, 0, 5, 0, 8]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(fieldVisitor66);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test07508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07508");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter43.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter43.visitMethod(8, "hi!", "", "", strArray65);
        classWriter43.visitOuterClass("hi!", "", "");
        classWriter43.visitEnd();
        java.lang.String[] strArray80 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter43.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter17.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter1.visitMethod(2561, "L749737959", "L2062266913", "L1368708044", strArray80);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor83.visitAnnotationDefault();
        methodVisitor83.visitMethodInsn((int) (short) 1792, "L1283200231", "L1490365060", "L745089702");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor83.visitAnnotation("", false);
        methodVisitor83.visitFieldInsn(1694564377, "", "L588233343", "L1148690681");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test07509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07509");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int5 = classWriter3.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter3.visitMethod(3, "hi!", "hi!", "hi!", strArray25);
        int int28 = classWriter1.newConst((java.lang.Object) "hi!");
        classWriter1.visitSource("L488861128", "L897597087");
        classWriter1.visitInnerClass("L624707113", "L728847777", "L1601838046", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L488861128", true);
        int int42 = classWriter1.newNameType("L318261776", "L684697689");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        int int75 = classReader73.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader73, (int) '4');
        long long79 = classReader73.readLong(2);
        int int80 = classReader73.getAccess();
        byte[] byteArray81 = classReader73.b;
        int int83 = classReader73.readInt(12);
        java.lang.String str84 = classReader73.getSuperName();
        java.lang.String[] strArray85 = classReader73.getInterfaces();
        java.lang.String[] strArray86 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter1.visitMethod(4, "L330454166", "L809431533", "L1967259122", strArray86);
        int int90 = classWriter1.newNameType("L1899113546", "L379676708");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 51966 + "'", int75 == 51966);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-4990551337079930870L) + "'", long79 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 458753 + "'", int83 == 458753);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 16 + "'", int90 == 16);
    }

    @Test
    public void test07510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07510");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("L1601838046", "L75359331", "L1847716459", 4);
        classWriter1.visitSource("L1490365060", "L1889100462");
        byte[] byteArray22 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L1545548548", "L428215077", "L1439212246", 12850);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 54, 48, 49, 56, 51, 56, 48, 52, 54, 7, 0, 9, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 7, 0, 11, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 11, 76, 49, 52, 57, 48, 51, 54, 53, 48, 54, 48, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 15, 0, 0, 0, 2, 0, 14, 0, 16, 0, 0, 0, 11, 76, 49, 56, 56, 57, 49, 48, 48, 52, 54, 50, 0, 17, 0, 0, 0, 4, 0, 6, 0, 7, 0, 18, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, 0, 4]");
    }

    @Test
    public void test07511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07511");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor17.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
    }

    @Test
    public void test07512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07512");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(156461415, "L136145448");
        methodVisitor25.visitIincInsn((int) (byte) -1, 16);
        methodVisitor25.visitMethodInsn((int) (short) 12848, "L1723151786", "L1823521374", "L1058109766");
        methodVisitor25.visitIincInsn(0, 33);
        methodVisitor25.visitMultiANewArrayInsn("L906648802", (int) (short) 2048);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test07513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07513");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        methodVisitor25.visitVarInsn((-889275714), 1793);
        methodVisitor25.visitMultiANewArrayInsn("L975788322", 23);
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test07514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07514");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        byte[] byteArray9 = classReader8.b;
        int int10 = classReader8.header;
        java.lang.String[] strArray11 = classReader8.getInterfaces();
        byte[] byteArray12 = classReader8.b;
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray12, 3, 5);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader16.readUnsignedShort((int) (short) 780);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07515");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn((int) (short) -13570, "", "L767455006", "L1766371387");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test07516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07516");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        byte[] byteArray12 = classReader9.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = classReader9.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test07517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07517");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitMultiANewArrayInsn("L897597087", 100);
        methodVisitor16.visitIincInsn((int) (short) 2387, (-889275714));
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        label35.info = strArray51;
        java.lang.Object obj54 = label35.info;
        java.lang.String str55 = label35.toString();
        methodVisitor16.visitLineNumber(0, label35);
        methodVisitor16.visitFieldInsn(1698786926, "L170800745", "L1681302154", "L295718540");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L1768723690" + "'", str55, "L1768723690");
    }

    @Test
    public void test07518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07518");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("L1589078908", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(5);
        classWriter26.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int33 = classWriter26.newClass("");
        int int36 = classWriter26.newNameType("L1847716459", "");
        classWriter26.visitEnd();
        byte[] byteArray38 = classWriter26.toByteArray();
        int int43 = classWriter26.newMethod("L680573325", "\001", "L1847716459", false);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "L1969123537");
        int int48 = classWriter1.newConst((java.lang.Object) "");
        int int50 = classWriter1.newUTF8("L1750086343");
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        long long83 = classReader81.readLong(4);
        byte[] byteArray84 = classReader81.b;
        byte[] byteArray85 = classReader81.b;
        byte[] byteArray86 = classReader81.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor87 = classWriter1.visitField(167, "L1921493771", "L648070744", "L136145448", (java.lang.Object) byteArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@108e8a74");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 655616L + "'", long83 == 655616L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07519");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor24.visitArray("L488861128");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = annotationVisitor24.visitAnnotation("L1148756334", "L152223686");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test07520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07520");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        byte[] byteArray63 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        int int66 = classReader64.readUnsignedShort((int) (byte) 0);
        short short68 = classReader64.readShort(7);
        int int69 = classReader64.header;
        java.lang.String[] strArray70 = classReader64.getInterfaces();
        classWriter1.visit(65210, (-1107296256), "L488861128", "L1111133036", "L149220781", strArray70);
        classWriter1.visitSource("L334680853", "L1511591972");
        int int76 = classWriter1.newClass("L607357044");
        byte[] byteArray77 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 51966 + "'", int66 == 51966);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) 0 + "'", short68 == (short) 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 90 + "'", int69 == 90);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 17 + "'", int76 == 17);
        org.junit.Assert.assertNotNull(byteArray77);
    }

    @Test
    public void test07521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07521");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte(8);
        long long38 = classReader26.readLong(30);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1136895056675841L + "'", long38 == 1136895056675841L);
    }

    @Test
    public void test07522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07522");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 9);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        long long42 = classReader26.readLong((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = classReader26.readInt((-1161953280));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-3819410108757049344L) + "'", long42 == (-3819410108757049344L));
    }

    @Test
    public void test07523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07523");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        int int39 = classReader26.getAccess();
        int int40 = classReader26.header;
        java.lang.String[] strArray41 = classReader26.getInterfaces();
        int int43 = classReader26.readUnsignedShort(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51966 + "'", int43 == 51966);
    }

    @Test
    public void test07524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07524");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        byte[] byteArray63 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        int int66 = classReader64.readUnsignedShort((int) (byte) 0);
        short short68 = classReader64.readShort(7);
        int int69 = classReader64.header;
        java.lang.String[] strArray70 = classReader64.getInterfaces();
        classWriter1.visit(65210, (-1107296256), "L488861128", "L1111133036", "L149220781", strArray70);
        int int75 = classWriter1.newField("L419471195", "L1715729238", "L1601838046");
        classWriter1.visitInnerClass("L430363814", "L2000102916", "L1899113546", 1793);
        int int82 = classWriter1.newUTF8("L1762162347");
        classWriter1.visitOuterClass("", "", "L1046040632");
        int int91 = classWriter1.newMethod("L799761587", "L284303737", "L2015149232", false);
        byte[] byteArray92 = classWriter1.toByteArray();
        int int95 = classWriter1.newNameType("L1261572287", "L1914204888");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 51966 + "'", int66 == 51966);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) 0 + "'", short68 == (short) 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 90 + "'", int69 == 90);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20 + "'", int75 == 20);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 26 + "'", int82 == 26);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 34 + "'", int91 == 34);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 42 + "'", int95 == 42);
    }

    @Test
    public void test07525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07525");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitOuterClass("L9401833", "L1142940414", "L128451051");
        byte[] byteArray66 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        java.lang.String str68 = classReader67.getClassName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 17, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 8, 76, 57, 52, 48, 49, 56, 51, 51, 7, 0, 9, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 1, 0, 10, 76, 49, 50, 56, 52, 53, 49, 48, 53, 49, 12, 0, 11, 0, 12, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 14, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 15, 0, 0, 0, 2, 0, 3, 0, 2, 0, 15, 0, 0, 0, 2, 0, 3, 0, 16, 0, 0, 0, 4, 0, 10, 0, 13]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "L2000102916" + "'", str68, "L2000102916");
    }

    @Test
    public void test07526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07526");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        java.lang.String str30 = classReader26.getSuperName();
        java.lang.String str31 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray34 = classWriter33.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07527");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("L1142940414", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("", false);
        classWriter1.visitInnerClass("L278038742", "L332181902", "L569030566", 100);
        classWriter1.visitSource("L1429849124", "L1969123537");
        int int30 = classWriter1.newClass("L75172810");
        int int32 = classWriter1.newUTF8("L1338797504");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        short short65 = classReader63.readShort((int) (byte) 0);
        int int67 = classReader63.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader63, 0);
        java.lang.String[] strArray70 = classReader63.getInterfaces();
        byte[] byteArray71 = classReader63.b;
        java.lang.String str72 = classReader63.getSuperName();
        long long74 = classReader63.readLong(14);
        java.lang.String str75 = classReader63.getSuperName();
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader63, 16);
        java.lang.String[] strArray78 = classReader63.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(1751720204, "", "L120713780", "L123678575", strArray78);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor79.visitAnnotation("L95180820", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 7, 0, 10, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) -13570 + "'", short65 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2560 + "'", int67 == 2560);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 282574545512737L + "'", long74 == 282574545512737L);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test07528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07528");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader33, 0);
        int int43 = classReader33.getItem(2);
        java.lang.String[] strArray44 = classReader33.getInterfaces();
        classWriter1.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray44);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        int int72 = classWriter52.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter52.visitAnnotation("", true);
        byte[] byteArray76 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        short short79 = classReader77.readShort((int) (byte) 0);
        java.lang.String[] strArray80 = classReader77.getInterfaces();
        java.lang.String[] strArray81 = classReader77.getInterfaces();
        classWriter1.visit((int) 'a', (int) '4', "L1510326766", "L4531833", "L172254079", strArray81);
        classWriter1.visitSource("L215906456", "L1247930698");
        classWriter1.visitOuterClass("L1403549550", "L1501531883", "L2089731244");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) -13570 + "'", short79 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test07529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07529");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L275489687", true);
        annotationVisitor58.visitEnum("L2000102916", "L1889100462", "L4531833");
        annotationVisitor58.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
    }

    @Test
    public void test07530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07530");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        int int11 = classWriter1.newMethod("L1013343419", "\001", "L488861128", true);
        int int15 = classWriter1.newField("L1962189950", "L1283200231", "L1387910543");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L1132227206", false);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(5);
        classWriter21.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int28 = classWriter21.newClass("");
        int int31 = classWriter21.newNameType("L1847716459", "");
        classWriter21.visitEnd();
        classWriter21.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int40 = classWriter21.newField("L529122729", "L488861128", "L976656549");
        byte[] byteArray41 = classWriter21.toByteArray();
        classWriter21.visitSource("L667379532", "L1962189950");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        int int70 = classWriter50.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter50.visitAnnotation("", true);
        byte[] byteArray74 = classWriter50.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter50.visitAnnotation("L1292845306", false);
        java.lang.Object obj82 = null;
        org.mockito.asm.FieldVisitor fieldVisitor83 = classWriter50.visitField((int) (byte) 10, "L30632432", "L275489687", "L667379532", obj82);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter50.visitAnnotation("L1471680267", false);
        classWriter50.visitSource("L266022393", "L982702597");
        org.mockito.asm.FieldVisitor fieldVisitor90 = classWriter21.visitField((int) (short) 100, "L1396464054", "L1931763549", "L859506825", (java.lang.Object) "L982702597");
        int int94 = classWriter21.newField("L749100806", "L1047734516", "L636727990");
        annotationVisitor18.visit("L1768723690", (java.lang.Object) "L749100806");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 17 + "'", int15 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 4, 0, 8, 0, 10, 0, 18, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(fieldVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(fieldVisitor90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 30 + "'", int94 == 30);
    }

    @Test
    public void test07531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07531");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor16.visitAnnotation("L1013343419", true);
        methodVisitor16.visitEnd();
        methodVisitor16.visitMaxs(61, 25857);
        org.mockito.asm.Attribute attribute93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1160632642" + "'", str75, "L1160632642");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test07532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07532");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        methodVisitor16.visitIntInsn(1, 0);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMethodInsn((int) '4', "L729032685", "L182578583", "L495956935");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test07533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07533");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        classWriter34.visitOuterClass("L1601838046", "L110679537", "L976656549");
        int int41 = classWriter34.newNameType("L1142940414", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter34.visitAnnotation("L1287376048", true);
        annotationVisitor44.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = annotationVisitor44.visitAnnotation("L293536740", "L363565416");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test07534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07534");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        classWriter1.visitSource("L40714478", "L674940947");
        classWriter1.visitOuterClass("L912963918", "L2022616480", "L2105621899");
        classWriter1.visitSource("L1771090025", "L904728265");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        int int69 = classWriter49.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter49.visitAnnotation("", true);
        byte[] byteArray73 = classWriter49.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        int int76 = classReader74.readUnsignedShort((int) (byte) 0);
        short short78 = classReader74.readShort(7);
        int int79 = classReader74.header;
        int int81 = classReader74.readInt(19);
        int int83 = classReader74.readUnsignedShort(19);
        int int85 = classReader74.readUnsignedShort(38);
        java.lang.String[] strArray86 = classReader74.getInterfaces();
        classWriter1.visit(30, 67764226, "L646968272", "L1574467454", "L1244303585", strArray86);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 51966 + "'", int76 == 51966);
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 0 + "'", short78 == (short) 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 90 + "'", int79 == 90);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1751720204 + "'", int81 == 1751720204);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 26729 + "'", int83 == 26729);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(strArray86);
    }

    @Test
    public void test07535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07535");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1139264300");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07536");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 4);
        classWriter39.visitOuterClass("L1169247122", "L2059908172", "L683506282");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test07537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07537");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitInsn(0);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn(104, 40);
        methodVisitor16.visitIntInsn(554434561, 40);
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07538");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        byte[] byteArray47 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L482405892", "L834028108", "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 8, 3, 0, 0, 0, 1, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 4, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test07539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07539");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        byte[] byteArray31 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader32.getItem((int) (short) 780);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 780");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test07540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07540");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        classWriter67.visitOuterClass("hi!", "", "");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn(16842755, (int) (short) 7);
        methodVisitor16.visitIntInsn(1763773440, 34);
        methodVisitor16.visitMethodInsn(12592, "L1669912474", "L1201220466", "L1438974949");
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
    }

    @Test
    public void test07541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07541");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        classWriter1.visitInnerClass("L1017623370", "L1178822359", "L680573325", (int) '#');
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        int int61 = classWriter41.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter41.visitAnnotation("", true);
        byte[] byteArray65 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        short short68 = classReader66.readShort((int) (byte) 0);
        int int70 = classReader66.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(classReader66, 0);
        java.lang.String[] strArray73 = classReader66.getInterfaces();
        byte[] byteArray74 = classReader66.b;
        java.lang.String str75 = classReader66.getSuperName();
        byte[] byteArray76 = classReader66.b;
        java.lang.String[] strArray77 = classReader66.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter1.visitMethod(875903244, "hi!", "L1611208075", "L826610285", strArray77);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor78.visitAnnotation("L680573325", false);
        methodVisitor78.visitIincInsn(13876, (int) (short) 780);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) -13570 + "'", short68 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2560 + "'", int70 == 2560);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test07542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07542");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor24.visitArray("L488861128");
        java.lang.Class<?> wildcardClass27 = annotationVisitor26.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test07543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07543");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L809431533", "L636727990", "L636727990");
        classWriter1.visitInnerClass("L1847716459", "L976656549", "L2062266913", 9);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        classWriter1.visit((int) ' ', 2, "", "L71945869", "L667379532", strArray58);
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField((int) (byte) 10, "L826610285", "L805282072", "L1471680267", (java.lang.Object) "L1899714602");
        classWriter1.visitSource("L798145900", "L1137416384");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(fieldVisitor67);
    }

    @Test
    public void test07544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07544");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor28.visitAnnotation("L999961130", "L831655905");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = annotationVisitor41.visitAnnotation("L1769475365", "L1002757230");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = annotationVisitor44.visitAnnotation("L203863779", "L446511586");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = annotationVisitor47.visitArray("L1919588599");
        annotationVisitor47.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test07545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07545");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        int int55 = classReader53.readByte(7);
        java.lang.String[] strArray56 = classReader53.getInterfaces();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader53, (int) (short) 8460);
        java.lang.Class<?> wildcardClass59 = classWriter58.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test07546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07546");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        byte[] byteArray12 = classWriter11.toByteArray();
        int int14 = classWriter11.newUTF8("L537907644");
        classWriter11.visitOuterClass("L1028579140", "L683506282", "L1952894981");
        classWriter11.visitInnerClass("L331709749", "L382977303", "L223304185", 129);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter11.visitAnnotation("L1400392501", false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test07547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07547");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readInt(3);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        int int59 = classReader58.getAccess();
        byte[] byteArray60 = classReader58.b;
        byte[] byteArray61 = classReader58.b;
        byte[] byteArray62 = classReader58.b;
        java.lang.String[] strArray63 = classReader58.getInterfaces();
        char[] charArray70 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj71 = classReader58.readConst((int) (short) 4, charArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader26.readClass(82, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28532");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1107296256) + "'", int30 == (-1107296256));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "" + "'", obj71, "");
    }

    @Test
    public void test07548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07548");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        int int6 = classWriter1.newMethod("L809431533", "L242883751", "L535346328", true);
        int int8 = classWriter1.newClass("L781112982");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int19 = classWriter15.newUTF8("");
        classWriter15.visitEnd();
        classWriter15.visitEnd();
        classWriter15.visitSource("L1889100462", "L1769475365");
        classWriter15.visitInnerClass("\000", "L4531833", "L1669912474", 26);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter70.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(0);
        int int83 = classWriter78.newMethod("", "", "hi!", true);
        java.lang.String[] strArray92 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter78.visitMethod(0, "", "", "hi!", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter70.visitMethod(8, "hi!", "", "", strArray92);
        classWriter35.visit(8, 8, "L2000102916", "", "hi!", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter15.visitMethod((int) (short) 3, "", "L1745031302", "L791392221", strArray92);
        classWriter1.visit((int) (short) 780, 67764226, "L1550989705", "L343526401", "L2032268392", strArray92);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor93);
        org.junit.Assert.assertNotNull(methodVisitor94);
        org.junit.Assert.assertNotNull(methodVisitor96);
    }

    @Test
    public void test07549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07549");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        classWriter34.visitOuterClass("L4531833", "L1700698598", "L664111037");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(5);
        classWriter44.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int51 = classWriter44.newClass("");
        int int54 = classWriter44.newNameType("L1847716459", "");
        classWriter44.visitEnd();
        byte[] byteArray56 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        int int59 = classReader57.readByte((int) (byte) 0);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter34.visitField(512, "L1372769316", "L1019177379", "L9401833", (java.lang.Object) int59);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = fieldVisitor60.visitAnnotation("L288690232", true);
        org.mockito.asm.Attribute attribute64 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor60.visitAttribute(attribute64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 202 + "'", int59 == 202);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor63);
    }

    @Test
    public void test07550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07550");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitCode();
        methodVisitor16.visitTypeInsn(2560, "L1009580268");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor16.visitAnnotation("L161967399", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = annotationVisitor31.visitAnnotation("L2010256722", "L242883751");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test07551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07551");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1292845306", false);
        java.lang.Object obj33 = null;
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 10, "L30632432", "L275489687", "L667379532", obj33);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor34.visitAnnotation("L5757740", true);
        fieldVisitor34.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test07552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07552");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("", true);
        byte[] byteArray79 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        short short82 = classReader80.readShort((int) (byte) 0);
        int int84 = classReader80.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader80, 0);
        java.lang.String[] strArray87 = classReader80.getInterfaces();
        byte[] byteArray88 = classReader80.b;
        java.lang.String str89 = classReader80.getSuperName();
        long long91 = classReader80.readLong(14);
        java.lang.String str92 = classReader80.getSuperName();
        int int93 = classReader80.header;
        int int94 = classReader80.getAccess();
        byte[] byteArray95 = classReader80.b;
        label51.info = classReader80;
        // The following exception was thrown during execution in test generation
        try {
            int int98 = classReader80.readUnsignedShort(184549888);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) -13570 + "'", short82 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2560 + "'", int84 == 2560);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 282574545512737L + "'", long91 == 282574545512737L);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 90 + "'", int93 == 90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07553");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int38 = classReader26.header;
        long long40 = classReader26.readLong(33);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = classReader26.readLong((int) (short) 2048);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 562967150070341L + "'", long40 == 562967150070341L);
    }

    @Test
    public void test07554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07554");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L488861128", "L728847777", "L1287376048");
        classWriter1.visitEnd();
        int int67 = classWriter1.newClass("L590888141");
        int int72 = classWriter1.newMethod("L749100806", "L749100806", "L264795169", false);
        classWriter1.visitSource("L1847716459", "L407879786");
        int int77 = classWriter1.newUTF8("L724436236");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 14 + "'", int67 == 14);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 19 + "'", int72 == 19);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 21 + "'", int77 == 21);
    }

    @Test
    public void test07555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07555");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter26.newMethod("", "", "hi!", true);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter26.visitMethod(0, "", "", "hi!", strArray40);
        int int46 = classWriter26.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter26.visitAnnotation("", true);
        byte[] byteArray50 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        short short53 = classReader51.readShort((int) (byte) 0);
        int int55 = classReader51.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader51, 0);
        java.lang.String[] strArray58 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter19.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray58);
        classWriter1.visit((int) (short) 17784, 65536, "", "hi!", "L1930348385", strArray58);
        byte[] byteArray61 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray61, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) -13570 + "'", short53 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2560 + "'", int55 == 2560);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 69, 120, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 49, 57, 51, 48, 51, 52, 56, 51, 56, 53, 7, 0, 6, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 2, 0, 3, 0, 9, 0, 0, 0, 4, 0, 2, 0, 5, 0, 10, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test07556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07556");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        long long31 = classReader26.readLong(12);
        long long33 = classReader26.readLong((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        short short62 = classReader60.readShort((int) (byte) 0);
        int int64 = classReader60.readUnsignedShort((int) ' ');
        long long66 = classReader60.readLong((int) '#');
        int int68 = classReader60.getItem(0);
        java.lang.String str69 = classReader60.getSuperName();
        short short71 = classReader60.readShort(13);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader60, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader60, 51966);
        int int76 = classReader60.header;
        int int78 = classReader60.readUnsignedShort(40);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader60, 1869898100);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter80, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1970329148719976L + "'", long31 == 1970329148719976L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-91551935198396416L) + "'", long33 == (-91551935198396416L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) -13570 + "'", short62 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2560 + "'", int64 == 2560);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1126999590795363L + "'", long66 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) 1792 + "'", short71 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 90 + "'", int76 == 90);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 17784 + "'", int78 == 17784);
    }

    @Test
    public void test07557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07557");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn(3, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor16.visitAnnotation("L387862364", false);
        methodVisitor16.visitMaxs(110, 141);
        methodVisitor16.visitIincInsn(104, 3072);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test07558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07558");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter1.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int40 = classWriter1.newMethod("L590888141", "L959574331", "L897597087", true);
        classWriter1.visitSource("L560005029", "L989364881");
        int int45 = classWriter1.newClass("L1130683384");
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 18 + "'", int40 == 18);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21 + "'", int45 == 21);
    }

    @Test
    public void test07559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07559");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        methodVisitor17.visitIntInsn(104, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter22.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter22.visitMethod(8, "hi!", "", "", strArray44);
        methodVisitor46.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = methodVisitor46.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        methodVisitor68.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor68.visitLabel(label72);
        methodVisitor46.visitJumpInsn((-1), label72);
        java.lang.String str75 = label72.toString();
        java.lang.String str76 = label72.toString();
        methodVisitor17.visitLabel(label72);
        label72.info = "L644674685";
        int int80 = label72.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1966632260" + "'", str75, "L1966632260");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L1966632260" + "'", str76, "L1966632260");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test07560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07560");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        methodVisitor43.visitLabel(label47);
        java.lang.String str49 = label47.toString();
        methodVisitor16.visitLineNumber((int) (short) -1, label47);
        label47.info = (-1.0f);
        java.lang.Object obj53 = label47.info;
        java.lang.String str54 = label47.toString();
        java.lang.String str55 = label47.toString();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter57.newMethod("", "", "hi!", true);
        int int67 = classWriter57.newMethod("L1013343419", "\001", "L488861128", true);
        int int71 = classWriter57.newField("L1962189950", "L1283200231", "L1387910543");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter57.visitAnnotation("L1611208075", true);
        label47.info = classWriter57;
        int int79 = classWriter57.newField("L1669249456", "L1169320665", "L124220740");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "L245209857" + "'", str49, "L245209857");
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + (-1.0f) + "'", obj53, (-1.0f));
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L245209857" + "'", str54, "L245209857");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L245209857" + "'", str55, "L245209857");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 11 + "'", int67 == 11);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 17 + "'", int71 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 24 + "'", int79 == 24);
    }

    @Test
    public void test07561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07561");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitMethodInsn(5, "L152278810", "L1808974214", "L946793861");
        methodVisitor16.visitMultiANewArrayInsn("L953714147", (int) (short) -17730);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor16.visitParameterAnnotation((int) (short) 21359, "L1014361754", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test07562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07562");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 1698786926);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(classReader9, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        int int41 = classWriter21.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter21.visitAnnotation("", true);
        byte[] byteArray45 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray45, 0, 202);
        int int51 = classReader49.readInt((int) (short) 100);
        int int52 = classReader49.header;
        int int54 = classReader49.readInt(20);
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter15.visitField((int) (short) 100, "L500283939", "L897597087", "\001", (java.lang.Object) 20);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L397385256", false);
        org.mockito.asm.Attribute attribute59 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor55.visitAttribute(attribute59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 65536 + "'", int51 == 65536);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 90 + "'", int52 == 90);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1763773440 + "'", int54 == 1763773440);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
    }

    @Test
    public void test07563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07563");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        int int63 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.Attribute attribute64 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
    }

    @Test
    public void test07564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07564");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader14, 13);
        long long18 = classReader14.readLong(29);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        int int41 = classWriter21.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter21.visitAnnotation("", true);
        byte[] byteArray45 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        int int48 = classReader46.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader46, (int) '4');
        int int52 = classReader46.readUnsignedShort(5);
        int int54 = classReader46.getItem(1);
        byte[] byteArray55 = classReader46.b;
        int int57 = classReader46.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader46, (int) '4');
        char[] charArray61 = new char[] {};
        java.lang.String str62 = classReader46.readUTF8(100, charArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = classReader14.readUTF8(19506, charArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3546642118308083252L + "'", long18 == 3546642118308083252L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 51966 + "'", int48 == 51966);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 256 + "'", int57 == 256);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test07565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07565");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        int int65 = classWriter45.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter45.visitAnnotation("", true);
        byte[] byteArray69 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        short short72 = classReader70.readShort((int) (byte) 0);
        int int74 = classReader70.readUnsignedShort((int) ' ');
        long long76 = classReader70.readLong((int) '#');
        int int78 = classReader70.getItem(0);
        java.lang.String str79 = classReader70.getSuperName();
        long long81 = classReader70.readLong((int) (short) 3);
        int int83 = classReader70.readInt(63);
        org.mockito.asm.FieldVisitor fieldVisitor84 = classWriter39.visitField((int) (short) 7, "L1927659804", "L1334226032", "L2132845283", (java.lang.Object) int83);
        fieldVisitor84.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) -13570 + "'", short72 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2560 + "'", int74 == 2560);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1126999590795363L + "'", long76 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-4755801206503241215L) + "'", long81 == (-4755801206503241215L));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1659509 + "'", int83 == 1659509);
        org.junit.Assert.assertNotNull(fieldVisitor84);
    }

    @Test
    public void test07566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07566");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        methodVisitor25.visitIincInsn((int) (short) 4, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotation("L590059745", true);
        methodVisitor25.visitMethodInsn(512, "L1048424892", "", "L579675851");
        methodVisitor25.visitMaxs((int) (short) 3072, (int) (byte) 10);
        methodVisitor25.visitVarInsn((int) (short) 100, 47806);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test07567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07567");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        byte[] byteArray15 = classReader14.b;
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        classWriter18.visitOuterClass("hi!", "", "");
        int int30 = classWriter18.newNameType("hi!", "hi!");
        int int33 = classWriter18.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        classWriter18.visit(5, 6, "", "", "", strArray54);
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter18.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter18.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray67 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int69 = classReader68.header;
        char[] charArray77 = new char[] { ' ', 'a', '#', '4', '4', 'a' };
        java.lang.String str78 = classReader68.readUTF8(12, charArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = classReader14.readUTF8(201326848, charArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 163 + "'", int69 == 163);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "\000a#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "\000a#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[\000, a, #, 4, 4, a]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\000" + "'", str78, "\000");
    }

    @Test
    public void test07568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07568");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        int int36 = classWriter31.newMethod("L1936126716", "L59063553", "L3043237", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        int int69 = classReader67.readUnsignedShort((int) (byte) 0);
        short short71 = classReader67.readShort(7);
        int int72 = classReader67.header;
        int int73 = classReader67.getAccess();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader67, 23);
        int int77 = classReader67.readByte(90);
        int int78 = classReader67.getAccess();
        int int80 = classReader67.readByte(100);
        org.mockito.asm.FieldVisitor fieldVisitor81 = classWriter31.visitField(1792, "L2078535908", "L242883751", "L1789245551", (java.lang.Object) int80);
        int int85 = classWriter31.newField("L579675851", "L4531833", "L684697689");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter31.visitAnnotation("L959183788", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = annotationVisitor88.visitArray("L331709749");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 51966 + "'", int69 == 51966);
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) 0 + "'", short71 == (short) 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 90 + "'", int72 == 90);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 25 + "'", int85 == 25);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test07569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07569");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        methodVisitor51.visitMethodInsn((int) '4', "L809431533", "L897597087", "L636727990");
        methodVisitor51.visitMethodInsn(16, "L1221801792", "L728847777", "L1208026886");
        methodVisitor51.visitCode();
        methodVisitor51.visitMethodInsn((int) (short) 1025, "L318261776", "L1208026886", "L869352649");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
    }

    @Test
    public void test07570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07570");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(16);
    }

    @Test
    public void test07571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07571");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter26.visitMethod(8, "hi!", "", "", strArray48);
        methodVisitor50.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        int[] intArray80 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray81 = new org.mockito.asm.Label[] {};
        methodVisitor50.visitLookupSwitchInsn(label74, intArray80, labelArray81);
        java.lang.Object obj83 = label74.info;
        methodVisitor16.visitLabel(label74);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = classWriter86.visitAnnotation("hi!", false);
        label74.info = classWriter86;
        java.lang.String str91 = label74.toString();
        java.lang.Object obj92 = label74.info;
        java.lang.String str93 = label74.toString();
        int int94 = label74.getOffset();
        java.lang.Object obj95 = label74.info;
        int int96 = label74.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L199831982" + "'", str76, "L199831982");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray81);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(annotationVisitor89);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L199831982" + "'", str91, "L199831982");
        org.junit.Assert.assertNotNull(obj92);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L199831982" + "'", str93, "L199831982");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test07572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07572");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        int int11 = classWriter1.newMethod("L1013343419", "\001", "L488861128", true);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        int int14 = classReader13.getAccess();
        java.lang.String[] strArray15 = classReader13.getInterfaces();
        java.lang.String str16 = classReader13.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 1, 0, 11, 76, 49, 48, 49, 51, 51, 52, 51, 52, 49, 57, 7, 0, 6, 1, 0, 1, 1, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 12, 0, 8, 0, 9, 11, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test07573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07573");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        int int13 = classReader7.readByte(0);
        int int14 = classReader7.header;
        int int15 = classReader7.header;
        int int17 = classReader7.readInt(61);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader7.readUnsignedShort(67174410);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 202 + "'", int13 == 202);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 78 + "'", int14 == 78);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 78 + "'", int15 == 78);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1000814 + "'", int17 == 1000814);
    }

    @Test
    public void test07574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07574");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor49.visitCode();
        methodVisitor49.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        methodVisitor76.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor76.visitLabel(label80);
        java.lang.String str82 = label80.toString();
        methodVisitor49.visitLineNumber((int) (short) -1, label80);
        label80.info = (-1.0f);
        java.lang.String str86 = label80.toString();
        methodVisitor25.visitLabel(label80);
        java.lang.String str88 = label80.toString();
        java.lang.String str89 = label80.toString();
        java.lang.Object obj90 = null;
        label80.info = obj90;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L418857710" + "'", str82, "L418857710");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L418857710" + "'", str86, "L418857710");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L418857710" + "'", str88, "L418857710");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "L418857710" + "'", str89, "L418857710");
    }

    @Test
    public void test07575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07575");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        classWriter1.visitSource("L1140828792", "L467340186");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        int int41 = classWriter21.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter21.visitAnnotation("", true);
        byte[] byteArray45 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        short short48 = classReader46.readShort((int) (byte) 0);
        int int50 = classReader46.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader46, 0);
        java.lang.String[] strArray53 = classReader46.getInterfaces();
        int int55 = classReader46.readInt((int) '4');
        java.lang.String[] strArray56 = classReader46.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter1.visitMethod(1659509, "L1168665692", "L71945869", "L1579135061", strArray56);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1340994920", "L1705966817", "L200807331");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -13570 + "'", short48 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2560 + "'", int50 == 2560);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 156461415 + "'", int55 == 156461415);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
    }

    @Test
    public void test07576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07576");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L1208026886", true);
        annotationVisitor4.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
    }

    @Test
    public void test07577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07577");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1853844875");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07578");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor15.visitAnnotation("L275489687", "L275489687");
        annotationVisitor15.visitEnum("L897597087", "L238476442", "L59063553");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor15.visitAnnotation("L1847716459", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor25.visitAnnotation("L1368800213", "L387862364");
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07579");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitFieldInsn(655616, "L461483604", "L866013370", "L1009580268");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1737122747" + "'", str75, "L1737122747");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test07580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07580");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L916243867", true);
        classWriter1.visitEnd();
        int int7 = classWriter1.newClass("L1899714602");
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("L473507854", true);
        org.mockito.asm.Attribute attribute11 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor10);
    }

    @Test
    public void test07581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07581");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L275489687", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = annotationVisitor58.visitArray("L149220781");
        annotationVisitor58.visitEnum("L2034910382", "\001", "L85690983");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = annotationVisitor58.visitAnnotation("L1104868738", "L1952977388");
        annotationVisitor58.visitEnum("L1899714602", "L797327892", "L1521482602");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = annotationVisitor58.visitArray("L578058094");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test07582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07582");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L720530545");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07583");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitOuterClass("", "L897597087", "L680573325");
        int int33 = classWriter1.newNameType("L1936126716", "L1413182688");
        int int35 = classWriter1.newUTF8("L1352784969");
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 13 + "'", int35 == 13);
    }

    @Test
    public void test07584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07584");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        int int6 = classWriter1.newMethod("L809431533", "L242883751", "L535346328", true);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(51966);
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) -1, "L1726462062", "L1413182688", "L2039587225", (java.lang.Object) 51966);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L1036976475", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor16.visitArray("L230654417");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = annotationVisitor16.visitArray("L1708839909");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor20.visitArray("");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test07585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07585");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn((int) 'a', (int) '4');
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMultiANewArrayInsn("L671718527", (int) (short) 1792);
        methodVisitor16.visitMultiANewArrayInsn("L214240977", 13876);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07586");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        int int35 = classReader26.readUnsignedShort(19);
        int int37 = classReader26.readUnsignedShort(38);
        java.lang.String[] strArray38 = classReader26.getInterfaces();
        byte[] byteArray39 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray39, (int) (short) 3072, 1698786926);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26729 + "'", int35 == 26729);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07587");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 26729);
        classWriter1.visitInnerClass("L1223439170", "L2039247828", "L1899714602", 6);
        classWriter1.visitOuterClass("L1223439170", "L1601838046", "L170800745");
        int int13 = classWriter1.newNameType("L1201220466", "L2133049941");
        classWriter1.visitInnerClass("L217194082", "L1502885011", "L1128221601", (int) '#');
        int int23 = classWriter1.newMethod("", "L720530545", "L1276500066", true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
    }

    @Test
    public void test07588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07588");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter26.newMethod("", "", "hi!", true);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter26.visitMethod(0, "", "", "hi!", strArray40);
        int int46 = classWriter26.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter26.visitAnnotation("", true);
        byte[] byteArray50 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        short short53 = classReader51.readShort((int) (byte) 0);
        int int55 = classReader51.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader51, 0);
        java.lang.String[] strArray58 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter19.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray58);
        classWriter1.visit((int) (short) 17784, 65536, "", "hi!", "L1930348385", strArray58);
        byte[] byteArray61 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray61, 33, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) -13570 + "'", short53 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2560 + "'", int55 == 2560);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 69, 120, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 49, 57, 51, 48, 51, 52, 56, 51, 56, 53, 7, 0, 6, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 2, 0, 3, 0, 9, 0, 0, 0, 4, 0, 2, 0, 5, 0, 10, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test07589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07589");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        classWriter1.visitSource("L1223439170", "L1936126716");
        classWriter1.visitOuterClass("L1162526488", "L1429849124", "L2034910382");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
    }

    @Test
    public void test07590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07590");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        byte[] byteArray32 = classWriter31.toByteArray();
        classWriter31.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter31.visitAnnotation("L4531833", false);
        int int38 = classWriter31.newUTF8("L1047734516");
        int int43 = classWriter31.newMethod("L1189635920", "L1589078908", "L436849750", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 17 + "'", int43 == 17);
    }

    @Test
    public void test07591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07591");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.header;
        int int34 = classReader26.header;
        int int36 = classReader26.readInt(51);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader26.readUnsignedShort((int) (short) -17730);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 611177 + "'", int36 == 611177);
    }

    @Test
    public void test07592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07592");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.Label label40 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        label40.info = strArray56;
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((int) (byte) 100, "L897597087", "L749737959", "L488861128", strArray56);
        classWriter1.visitEnd();
        int int64 = classWriter1.newField("L1283200231", "L1505866272", "L1058109766");
        int int66 = classWriter1.newClass("L1002757230");
        org.mockito.asm.Attribute attribute67 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20 + "'", int64 == 20);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
    }

    @Test
    public void test07593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07593");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        int int24 = classWriter1.newField("L1142940414", "L75359331", "L426422007");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter27.visitAnnotation("hi!", false);
        int int58 = classWriter27.newField("L809431533", "L636727990", "L636727990");
        classWriter27.visitInnerClass("L1847716459", "L976656549", "L2062266913", 9);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int75 = classWriter70.newMethod("", "", "hi!", true);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter70.visitMethod(0, "", "", "hi!", strArray84);
        classWriter27.visit((int) ' ', 2, "", "L71945869", "L667379532", strArray84);
        classWriter27.visitEnd();
        int int91 = classWriter27.newField("L124447396", "L728847777", "L1040125103");
        int int92 = classWriter1.newConst((java.lang.Object) "L1040125103");
        classWriter1.visitOuterClass("L1877128533", "L888820821", "L2012296629");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 25, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 7, 0, 17, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 12, 0, 19, 0, 20, 9, 0, 18, 0, 21, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 23, 0, 0, 0, 4, 0, 8, 0, 10, 0, 24, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodVisitor85);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 23 + "'", int91 == 23);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 26 + "'", int92 == 26);
    }

    @Test
    public void test07594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07594");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 202);
        int int14 = classReader9.header;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader9.getItem((int) (short) 2892);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2892");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 78 + "'", int14 == 78);
    }

    @Test
    public void test07595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07595");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        byte[] byteArray9 = classReader8.b;
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader8, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07596");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(611177);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int9 = classWriter7.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter7.visitMethod(3, "hi!", "hi!", "hi!", strArray29);
        byte[] byteArray32 = classWriter7.toByteArray();
        int int34 = classWriter7.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        classWriter40.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter40.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(5);
        int int61 = classWriter59.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter68.newMethod("", "", "hi!", true);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter68.visitMethod(0, "", "", "hi!", strArray82);
        classWriter59.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray82);
        classWriter40.visit((int) ' ', 8, "L1287376048", "L1028579140", "L680573325", strArray82);
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter7.visitMethod(256, "L890847236", "L529122729", "L1566032477", strArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor87 = classWriter1.visitMethod(11, "L1137416384", "L326287770", "L1482145872", strArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(methodVisitor86);
    }

    @Test
    public void test07597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07597");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitMaxs(13, 254);
        methodVisitor25.visitFieldInsn(65536, "L95180820", "L1028510473", "L1774908040");
        methodVisitor25.visitVarInsn(28, 4);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = methodVisitor25.visitAnnotation("L266472455", true);
        methodVisitor25.visitFieldInsn((int) (short) -326, "L1093182174", "L828384535", "L940801507");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor55 = methodVisitor25.visitParameterAnnotation(1659509, "L161563611", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor46);
    }

    @Test
    public void test07598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07598");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        long long37 = classReader26.readLong(8);
        int int39 = classReader26.getItem(3);
        long long41 = classReader26.readLong(8);
        byte[] byteArray42 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray42, 78, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2815849279193089L + "'", long37 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2815849279193089L + "'", long41 == 2815849279193089L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07599");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        int int44 = classWriter1.newMethod("L1969123537", "L1221492672", "L128451051", false);
        classWriter1.visitOuterClass("L716527799", "L2014806404", "");
        int int50 = classWriter1.newUTF8("L202540477");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20 + "'", int50 == 20);
    }

    @Test
    public void test07600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07600");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int65 = classWriter1.newNameType("L275489687", "L755844592");
        byte[] byteArray66 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        int int69 = classReader67.readInt((int) '4');
        byte[] byteArray70 = classReader67.b;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 16779852 + "'", int69 == 16779852);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
    }

    @Test
    public void test07601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07601");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        long long31 = classReader26.readLong(12);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 18);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter33.visitAnnotation("L976656549", true);
        classWriter33.visitEnd();
        int int39 = classWriter33.newUTF8("L2107677922");
        classWriter33.visitInnerClass("L1680082145", "L1912967891", "L419471195", 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1970329148719976L + "'", long31 == 1970329148719976L);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
    }

    @Test
    public void test07602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07602");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        java.lang.Class<?> wildcardClass70 = methodVisitor69.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test07603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07603");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        annotationVisitor35.visitEnum("L1068224943", "L1058656014", "L2132185573");
        annotationVisitor35.visitEnum("", "L570733821", "L139573601");
        annotationVisitor35.visit("L15843493", (java.lang.Object) "L2079092351");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test07604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07604");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        java.lang.String str32 = label31.toString();
        methodVisitor25.visitJumpInsn(0, label31);
        java.lang.String str34 = label31.toString();
        java.lang.String str35 = label31.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = label31.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "L1464356276" + "'", str32, "L1464356276");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "L1464356276" + "'", str34, "L1464356276");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "L1464356276" + "'", str35, "L1464356276");
    }

    @Test
    public void test07605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07605");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(202);
        classWriter1.visitInnerClass("L1674107149", "L280564832", "L310679005", 611177);
    }

    @Test
    public void test07606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07606");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor16.visitAnnotation("L1368708044", true);
        methodVisitor16.visitVarInsn(202, 458753);
        methodVisitor16.visitLdcInsn((java.lang.Object) "L552318631");
        methodVisitor16.visitMaxs(104, 875903244);
        methodVisitor16.visitMaxs(6, (int) (short) 4);
        methodVisitor16.visitMethodInsn(61, "L959183788", "L364320201", "L964574936");
        methodVisitor16.visitLdcInsn((java.lang.Object) "L374960086");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test07607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07607");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        classWriter35.visitEnd();
        java.lang.String[] strArray72 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter35.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter9.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod(78, "L1936126716", "L1386483578", "L728847777", strArray72);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor75.visitAnnotationDefault();
        methodVisitor75.visitFieldInsn(12592, "L1581248331", "L1169320665", "L1423401218");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor75.visitAnnotation("L1397998158", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test07608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07608");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(26, "L1370122910");
        methodVisitor25.visitIntInsn((int) (short) 2560, (int) '#');
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter42.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter42.visitMethod(8, "hi!", "", "", strArray64);
        methodVisitor66.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor66.visitAnnotationDefault();
        methodVisitor66.visitMaxs((int) ' ', (int) '4');
        methodVisitor66.visitVarInsn(22, (int) (short) 3072);
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        java.lang.String str79 = label78.toString();
        methodVisitor66.visitJumpInsn(20, label78);
        methodVisitor25.visitJumpInsn(1763773440, label78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L336638382" + "'", str79, "L336638382");
    }

    @Test
    public void test07609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07609");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        int int38 = classReader26.readByte((int) (byte) 10);
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        short short69 = classReader67.readShort((int) (byte) 0);
        int int71 = classReader67.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader67, 0);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader67, 0);
        int int77 = classReader67.readByte((int) (byte) 10);
        char[] charArray82 = new char[] { '#', '4', '4' };
        java.lang.String str83 = classReader67.readUTF8(100, charArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = classReader26.readConst(0, charArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) -13570 + "'", short69 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2560 + "'", int71 == 2560);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test07610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07610");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        char[] charArray38 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj39 = classReader26.readConst((int) (short) 4, charArray38);
        java.lang.String str40 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 51966);
        int int46 = classWriter42.newField("L2074241587", "L650167216", "L146399554");
        int int48 = classWriter42.newClass("");
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter54.newConst((java.lang.Object) (short) 1);
        classWriter54.visitSource("", "L2000102916");
        int int64 = classWriter54.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray65 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray65);
        java.lang.String[] strArray68 = classReader67.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor69 = classWriter42.visitMethod(17, "L415508906", "", "L1731693361", strArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "" + "'", obj39, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 7 + "'", int64 == 7);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test07611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07611");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        java.lang.String str55 = label51.toString();
        java.lang.String str56 = label51.toString();
        java.lang.Object obj57 = label51.info;
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(5);
        classWriter59.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int66 = classWriter59.newClass("");
        int int69 = classWriter59.newNameType("L1847716459", "");
        classWriter59.visitEnd();
        classWriter59.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int78 = classWriter59.newField("L529122729", "L488861128", "L976656549");
        classWriter59.visitOuterClass("L1387910543", "L897597087", "L1013343419");
        label51.info = "L897597087";
        java.lang.String str84 = label51.toString();
        java.lang.String str85 = label51.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L552996760" + "'", str54, "L552996760");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L552996760" + "'", str55, "L552996760");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L552996760" + "'", str56, "L552996760");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 16 + "'", int78 == 16);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L552996760" + "'", str84, "L552996760");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L552996760" + "'", str85, "L552996760");
    }

    @Test
    public void test07612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07612");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 100);
        classWriter14.visitSource("L1952894981", "L1611208075");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray27 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray27, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray27);
        byte[] byteArray32 = classReader31.b;
        int int33 = classReader31.header;
        java.lang.String[] strArray34 = classReader31.getInterfaces();
        classWriter14.visit(17784, 18, "L418802221", "L1541209207", "L1004763019", strArray34);
        java.lang.Object obj36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classWriter14.newConst(obj36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test07613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07613");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        methodVisitor25.visitIntInsn((int) (short) 100, (int) 'a');
        methodVisitor25.visitMaxs(3, (int) '#');
        methodVisitor25.visitInsn((int) (short) 3);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        methodVisitor57.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor57.visitCode();
        methodVisitor57.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        methodVisitor84.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label88 = new org.mockito.asm.Label();
        methodVisitor84.visitLabel(label88);
        java.lang.String str90 = label88.toString();
        methodVisitor57.visitLineNumber((int) (short) -1, label88);
        label88.info = (-1.0f);
        java.lang.String str94 = label88.toString();
        methodVisitor25.visitLabel(label88);
        methodVisitor25.visitMaxs(7, 67174410);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L1132979069" + "'", str90, "L1132979069");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L1132979069" + "'", str94, "L1132979069");
    }

    @Test
    public void test07614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07614");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L396424273", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = annotationVisitor58.visitAnnotation("L1002757230", "L2008726138");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor61);
    }

    @Test
    public void test07615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07615");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        java.lang.String str55 = label51.toString();
        java.lang.String str56 = label51.toString();
        java.lang.Object obj57 = label51.info;
        java.lang.Object obj58 = label51.info;
        java.lang.String str59 = label51.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L400827925" + "'", str54, "L400827925");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L400827925" + "'", str55, "L400827925");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L400827925" + "'", str56, "L400827925");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "L400827925" + "'", str59, "L400827925");
    }

    @Test
    public void test07616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07616");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader14, 82);
        short short18 = classReader14.readShort(78);
        int int19 = classReader14.getAccess();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 25445 + "'", short18 == (short) 25445);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test07617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07617");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        java.lang.String str36 = classReader26.getSuperName();
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor38, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test07618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07618");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        int int39 = classReader26.readInt(3);
        int int40 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.getItem(105);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 105");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1107296256) + "'", int39 == (-1107296256));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test07619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07619");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitTypeInsn(19, "L488861128");
        methodVisitor25.visitIincInsn(0, 26729);
        methodVisitor25.visitVarInsn(10, 19);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotation("L1132227206", true);
        methodVisitor25.visitMultiANewArrayInsn("L620334303", 256);
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test07620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07620");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        int int38 = classReader26.getItem(1);
        int int40 = classReader26.readInt((int) (short) 100);
        int int42 = classReader26.readInt((int) (short) 1);
        short short44 = classReader26.readShort(0);
        java.lang.String[] strArray45 = classReader26.getInterfaces();
        int int46 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int48 = classReader26.getItem((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -21316096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65536 + "'", int40 == 65536);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-21316096) + "'", int42 == (-21316096));
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -13570 + "'", short44 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 90 + "'", int46 == 90);
    }

    @Test
    public void test07621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07621");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        methodVisitor34.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label38 = new org.mockito.asm.Label();
        methodVisitor34.visitLabel(label38);
        java.lang.String str40 = label38.toString();
        label38.info = ' ';
        java.lang.Object obj43 = label38.info;
        methodVisitor16.visitLabel(label38);
        org.mockito.asm.Label label45 = new org.mockito.asm.Label();
        java.lang.String str46 = label45.toString();
        label45.info = "L2014806404";
        label38.info = label45;
        int int50 = label38.getOffset();
        java.lang.String str51 = label38.toString();
        java.lang.String str52 = label38.toString();
        java.lang.Object obj53 = label38.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "L989601373" + "'", str40, "L989601373");
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + ' ' + "'", obj43, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "L1163602248" + "'", str46, "L1163602248");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "L989601373" + "'", str51, "L989601373");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L989601373" + "'", str52, "L989601373");
        org.junit.Assert.assertNotNull(obj53);
// flaky:         org.junit.Assert.assertEquals(obj53.toString(), "L1163602248");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "L1163602248");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "L1163602248");
    }

    @Test
    public void test07622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07622");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L4531833", "L4531833", "L1009580268");
        int int24 = classWriter1.newClass("");
        classWriter1.visitSource("L680573325", "L1847716459");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod(78, "L1498837454", "", "L2000102916", strArray90);
        methodVisitor94.visitIntInsn(190, 12336);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor94.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test07623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07623");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitFieldInsn(117440769, "L302994160", "L1794533852", "L168484184");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
    }

    @Test
    public void test07624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07624");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        long long34 = classReader26.readLong(6);
        java.lang.String str35 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 42966450183L + "'", long34 == 42966450183L);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test07625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07625");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        fieldVisitor31.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = fieldVisitor31.visitAnnotation("L1269304540", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = fieldVisitor31.visitAnnotation("L1169051836", false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test07626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07626");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitTypeInsn(19, "L488861128");
        methodVisitor25.visitCode();
        methodVisitor25.visitIincInsn((int) (short) 1, 19506);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(5);
        classWriter38.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int45 = classWriter38.newClass("");
        int int48 = classWriter38.newNameType("L1847716459", "");
        classWriter38.visitEnd();
        classWriter38.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int57 = classWriter38.newField("L529122729", "L488861128", "L976656549");
        int int61 = classWriter38.newField("L1142940414", "L75359331", "L426422007");
        byte[] byteArray62 = classWriter38.toByteArray();
        int int66 = classWriter38.newField("L569030566", "L749100806", "L1762162347");
        methodVisitor25.visitLdcInsn((java.lang.Object) "L749100806");
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 25, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 7, 0, 17, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 12, 0, 19, 0, 20, 9, 0, 18, 0, 21, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 23, 0, 0, 0, 4, 0, 8, 0, 10, 0, 24, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 30 + "'", int66 == 30);
    }

    @Test
    public void test07627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07627");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        classWriter31.visitOuterClass("L75359331", "L1969123537", "L841843626");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(8, "hi!", "", "", strArray59);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter37.visitAnnotation("hi!", false);
        byte[] byteArray65 = classWriter37.toByteArray();
        int int67 = classWriter37.newUTF8("L488861128");
        classWriter37.visitOuterClass("", "L976656549", "L1669912474");
        int int73 = classWriter37.newClass("L1471680267");
        classWriter37.visitInnerClass("L976656549", "L1628304347", "L81546457", 63);
        int int81 = classWriter37.newNameType("L946793861", "L146399554");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter37.visitAnnotation("L1435737877", true);
        int int88 = classWriter37.newField("L2143784896", "L725967670", "L135718477");
        int int89 = classWriter31.newConst((java.lang.Object) "L135718477");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 13 + "'", int73 == 13);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20 + "'", int81 == 20);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 27 + "'", int88 == 27);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 16 + "'", int89 == 16);
    }

    @Test
    public void test07628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07628");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1086414642", false);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int11 = classWriter9.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter9.visitMethod(8, "hi!", "", "", strArray31);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter9.visitAnnotation("hi!", false);
        byte[] byteArray37 = classWriter9.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        annotationVisitor6.visit("L684697689", (java.lang.Object) byteArray37);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray37);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        int int42 = classReader40.header;
        byte[] byteArray43 = classReader40.b;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 82 + "'", int42 == 82);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test07629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07629");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("L1287376048", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        int int40 = classReader38.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader38, (int) '4');
        int int44 = classReader38.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader38, (int) '#');
        short short48 = classReader38.readShort(0);
        int int50 = classReader38.getItem(1);
        int int52 = classReader38.readInt((int) (short) 100);
        int int54 = classReader38.readInt((int) (short) 1);
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2561, "L2034910382", "L529122729", "L2039587225", (java.lang.Object) (short) 1);
        java.lang.String[] strArray61 = null;
        classWriter1.visit(56, 186, "L1541209207", "L81436625", "L375606602", strArray61);
        int int67 = classWriter1.newMethod("L1921354976", "L77463317", "L1336128092", true);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 51966 + "'", int40 == 51966);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -13570 + "'", short48 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 11 + "'", int50 == 11);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 65536 + "'", int52 == 65536);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-21316096) + "'", int54 == (-21316096));
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 17 + "'", int67 == 17);
    }

    @Test
    public void test07630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07630");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        int int35 = classWriter1.newMethod("L1086414642", "", "L419471195", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("L946131795", true);
        int int43 = classWriter1.newUTF8("L360307176");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
    }

    @Test
    public void test07631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07631");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitSource("", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = classWriter1.visitAnnotation("L1111133036", false);
        java.lang.Class<?> wildcardClass13 = annotationVisitor12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test07632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07632");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(100);
        classWriter68.visitOuterClass("L2142211483", "L2027998385", "L863761147");
        annotationVisitor65.visit("L2143784896", (java.lang.Object) "L2027998385");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test07633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07633");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        classWriter1.visitInnerClass("", "L1028579140", "", 8);
        byte[] byteArray37 = classWriter1.toByteArray();
        int int39 = classWriter1.newUTF8("L414874932");
        int int41 = classWriter1.newUTF8("L1086414642");
        classWriter1.visitOuterClass("L1148041100", "L890847236", "L415508906");
        classWriter1.visitSource("L341335602", "L1386483578");
        int int50 = classWriter1.newClass("L161312276");
        org.mockito.asm.Attribute attribute51 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 1, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 5, 0, 0, 0, 0, 0, 0, 0, 10, 7, 0, 4, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 5, 0, 2, 0, 10, 0, 0, 0, 2, 0, 7, 0, 11, 0, 0, 0, 2, 0, 6, 0, 1, 0, 100, 0, 1, 0, 2, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 1, 0, 1, 0, 13, 0, 0, 0, 10, 0, 1, 0, 3, 0, 9, 0, 1, 0, 8]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 15 + "'", int41 == 15);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 23 + "'", int50 == 23);
    }

    @Test
    public void test07634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07634");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 78);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        int int38 = classReader26.readByte(16);
        long long40 = classReader26.readLong((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-91551935198396416L) + "'", long40 == (-91551935198396416L));
    }

    @Test
    public void test07635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07635");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitCode();
        methodVisitor16.visitMethodInsn((-21316096), "", "L329202279", "L1242211911");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label53 = new org.mockito.asm.Label();
        methodVisitor49.visitLabel(label53);
        java.lang.Object obj55 = label53.info;
        java.lang.Object obj56 = label53.info;
        java.lang.Object obj57 = label53.info;
        methodVisitor16.visitJumpInsn(0, label53);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test07636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07636");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitMethodInsn(1698786926, "L1132227206", "L59063553", "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor16.visitParameterAnnotation(51, "L1598501322", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07637");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("L749737959", "L1028579140", "L488861128", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = classWriter1.visitAnnotation("", true);
        int int17 = classWriter1.newMethod("L1962189950", "L1808974214", "L1411298446", false);
        classWriter1.visitEnd();
        int int20 = classWriter1.newUTF8("L774045562");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter27.visitAnnotation("hi!", false);
        int int58 = classWriter27.newField("L809431533", "L636727990", "L636727990");
        classWriter27.visitInnerClass("L1847716459", "L976656549", "L2062266913", 9);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int75 = classWriter70.newMethod("", "", "hi!", true);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter70.visitMethod(0, "", "", "hi!", strArray84);
        classWriter27.visit((int) ' ', 2, "", "L71945869", "L667379532", strArray84);
        classWriter1.visit(17784, 0, "L976618452", "L884076874", "L823768339", strArray84);
        classWriter1.visitSource("L790593526", "L124447396");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodVisitor85);
    }

    @Test
    public void test07638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07638");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        long long31 = classReader26.readLong(12);
        long long33 = classReader26.readLong((int) (byte) 1);
        java.lang.String[] strArray34 = classReader26.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1970329148719976L + "'", long31 == 1970329148719976L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-91551935198396416L) + "'", long33 == (-91551935198396416L));
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test07639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07639");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        int int53 = classWriter1.newUTF8("L1221801792");
        classWriter1.visitInnerClass("L1028579140", "L535346328", "L728847777", (int) '#');
        classWriter1.visitSource("L1028579140", "L1358038794");
        byte[] byteArray62 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray62, (int) (short) 2816, 90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 7, 0, 5, 1, 0, 10, 76, 53, 51, 53, 51, 52, 54, 51, 50, 56, 7, 0, 7, 1, 0, 10, 76, 55, 50, 56, 56, 52, 55, 55, 55, 55, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 2, 0, 3, 0, 12, 0, 0, 0, 2, 0, 5, 0, 13, 0, 0, 0, 11, 76, 49, 51, 53, 56, 48, 51, 56, 55, 57, 52, 0, 14, 0, 0, 0, 10, 0, 1, 0, 6, 0, 8, 0, 9, 0, 35]");
    }

    @Test
    public void test07640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07640");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        int int33 = classWriter31.newUTF8("L1931763549");
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter31.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test07641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07641");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("L1962189950", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test07642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07642");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIntInsn(47806, 161);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs((int) (short) 2816, 12848);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test07643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07643");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        int int36 = classWriter31.newMethod("L1936126716", "L59063553", "L3043237", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        int int69 = classReader67.readUnsignedShort((int) (byte) 0);
        short short71 = classReader67.readShort(7);
        int int72 = classReader67.header;
        int int73 = classReader67.getAccess();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader67, 23);
        int int77 = classReader67.readByte(90);
        int int78 = classReader67.getAccess();
        int int80 = classReader67.readByte(100);
        org.mockito.asm.FieldVisitor fieldVisitor81 = classWriter31.visitField(1792, "L2078535908", "L242883751", "L1789245551", (java.lang.Object) int80);
        int int85 = classWriter31.newField("L579675851", "L4531833", "L684697689");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter31.visitAnnotation("L959183788", true);
        classWriter31.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 51966 + "'", int69 == 51966);
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) 0 + "'", short71 == (short) 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 90 + "'", int72 == 90);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 25 + "'", int85 == 25);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test07644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07644");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L2000102916", "L2062266913", "L59063553", (int) (short) 100);
        classWriter1.visitSource("L1707932050", "L1158904698");
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test07645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07645");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        java.lang.String str30 = classReader26.getSuperName();
        int int31 = classReader26.getAccess();
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        java.lang.String str33 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test07646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07646");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        classWriter1.visitSource("L264795169", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1307358075", false);
        int int57 = classWriter1.newMethod("L579675851", "L1589078908", "L535346328", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label65 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter67.visitMethod(0, "", "", "hi!", strArray81);
        label65.info = strArray81;
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter60.visitMethod((int) (short) 100, "", "hi!", "", strArray81);
        classWriter60.visitInnerClass("L1847716459", "", "L680573325", 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = classWriter60.visitAnnotation("L275489687", true);
        classWriter60.visitSource("L1715729238", "L897597087");
        int int96 = classWriter1.newConst((java.lang.Object) "L1715729238");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 15 + "'", int96 == 15);
    }

    @Test
    public void test07647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07647");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        classWriter1.visitOuterClass("L488861128", "L745089702", "");
        int int8 = classWriter1.newNameType("L264795169", "L1429849124");
        classWriter1.visitSource("L688061379", "L1046069948");
        int int15 = classWriter1.newField("L107203139", "L895141889", "L1587132534");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
    }

    @Test
    public void test07648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07648");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        int int53 = classWriter1.newUTF8("L1221801792");
        int int55 = classWriter1.newUTF8("L2089731244");
        int int58 = classWriter1.newNameType("L1685807285", "L2039247828");
        byte[] byteArray59 = classWriter1.toByteArray();
        byte[] byteArray60 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        int int63 = classReader61.readInt(36);
        byte[] byteArray64 = classReader61.b;
        int int65 = classReader61.getAccess();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 11, 76, 49, 54, 56, 53, 56, 48, 55, 50, 56, 53, 1, 0, 11, 76, 50, 48, 51, 57, 50, 52, 55, 56, 50, 56, 12, 0, 6, 0, 7, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 10, 0, 0, 0, 2, 0, 2, 0, 2, 0, 11, 0, 0, 0, 2, 0, 2, 0, 12, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 11, 76, 49, 54, 56, 53, 56, 48, 55, 50, 56, 53, 1, 0, 11, 76, 50, 48, 51, 57, 50, 52, 55, 56, 50, 56, 12, 0, 6, 0, 7, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 10, 0, 0, 0, 2, 0, 2, 0, 2, 0, 11, 0, 0, 0, 2, 0, 2, 0, 12, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 740402 + "'", int63 == 740402);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 11, 76, 49, 54, 56, 53, 56, 48, 55, 50, 56, 53, 1, 0, 11, 76, 50, 48, 51, 57, 50, 52, 55, 56, 50, 56, 12, 0, 6, 0, 7, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 10, 0, 0, 0, 2, 0, 2, 0, 2, 0, 11, 0, 0, 0, 2, 0, 2, 0, 12, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test07649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07649");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        classWriter30.visitEnd();
        int int33 = classWriter30.newUTF8("L1137416384");
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter30.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test07650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07650");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        int int37 = classWriter1.newField("L680573325", "L242883751", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter1.visitAnnotation("L1287617384", true);
        annotationVisitor40.visitEnum("L765138463", "L143726105", "L1269304540");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test07651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07651");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int8 = classWriter3.newMethod("", "", "hi!", true);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor18 = classWriter3.visitMethod(0, "", "", "hi!", strArray17);
        methodVisitor18.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor18.visitCode();
        methodVisitor18.visitIincInsn(0, 5);
        int int28 = classWriter1.newConst((java.lang.Object) 0);
        classWriter1.visitOuterClass("L3043237", "L624707113", "L2127085380");
        classWriter1.visitInnerClass("", "L636727990", "L1268109548", 872);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "L1872723002", "L2132757815");
        byte[] byteArray43 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodVisitor18);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 17, 3, 0, 0, 0, 0, 1, 0, 8, 76, 51, 48, 52, 51, 50, 51, 55, 7, 0, 2, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 1, 0, 11, 76, 50, 49, 50, 55, 48, 56, 53, 51, 56, 48, 12, 0, 4, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 7, 0, 9, 1, 0, 11, 76, 49, 50, 54, 56, 49, 48, 57, 53, 52, 56, 1, 0, 11, 76, 49, 56, 55, 50, 55, 50, 51, 48, 48, 50, 1, 0, 11, 76, 50, 49, 51, 50, 55, 53, 55, 56, 49, 53, 12, 0, 12, 0, 13, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 15, 0, 0, 0, 4, 0, 8, 0, 14, 0, 16, 0, 0, 0, 10, 0, 1, 0, 8, 0, 10, 0, 11, 3, 104]");
    }

    @Test
    public void test07652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07652");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 24);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 190);
        int int42 = classReader26.getItem((int) (short) 3);
        short short44 = classReader26.readShort(37);
        int int45 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 17 + "'", int42 == 17);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 256 + "'", short44 == (short) 256);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 90 + "'", int45 == 90);
    }

    @Test
    public void test07653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07653");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int65 = classWriter1.newNameType("L275489687", "L755844592");
        byte[] byteArray66 = classWriter1.toByteArray();
        byte[] byteArray67 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int70 = classReader68.readUnsignedShort(32);
        java.lang.String str71 = classReader68.getSuperName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 768 + "'", int70 == 768);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
    }

    @Test
    public void test07654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07654");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        classWriter31.visitSource("L120720304", "L2039587225");
        int int38 = classWriter31.newField("L1619769466", "L1002757230", "L2078535908");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        methodVisitor59.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label63 = new org.mockito.asm.Label();
        methodVisitor59.visitLabel(label63);
        methodVisitor59.visitTypeInsn(3, "L2000102916");
        methodVisitor59.visitVarInsn(1, 1);
        methodVisitor59.visitIincInsn((int) (short) -13570, (int) '4');
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter31.visitField(1164862316, "L531876647", "L1471680267", "L248471706", (java.lang.Object) (short) -13570);
        int int76 = classWriter31.newClass("L1397998158");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 22 + "'", int76 == 22);
    }

    @Test
    public void test07655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07655");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        org.mockito.asm.Attribute attribute48 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter47.visitAttribute(attribute48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
    }

    @Test
    public void test07656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07656");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L172254079", (-889275714));
        methodVisitor16.visitIincInsn(19, 0);
        methodVisitor16.visitMaxs(65536, 202);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07657");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        annotationVisitor74.visitEnum("L1962189950", "L1017623370", "L1411298446");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = annotationVisitor74.visitArray("L552329476");
        java.lang.Class<?> wildcardClass81 = annotationVisitor74.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test07658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07658");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        byte[] byteArray39 = classReader38.b;
        // The following exception was thrown during execution in test generation
        try {
            short short41 = classReader38.readShort(768);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 768");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07659");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L579675851", true);
        byte[] byteArray5 = classWriter1.toByteArray();
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07660");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        short short34 = classReader29.readShort(52);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader29.readUnsignedShort((int) (short) 12336);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 2387 + "'", short34 == (short) 2387);
    }

    @Test
    public void test07661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07661");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        long long37 = classReader26.readLong(8);
        int int39 = classReader26.getItem(3);
        long long41 = classReader26.readLong(8);
        int int43 = classReader26.readInt(6);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, 1792);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 2560);
        short short49 = classReader26.readShort(82);
        java.lang.String str50 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2815849279193089L + "'", long37 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2815849279193089L + "'", long41 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 28532 + "'", short49 == (short) 28532);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test07662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07662");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter1.visitEnd();
        int int5 = classWriter1.newNameType("L172254079", "L862723850");
        org.mockito.asm.Attribute attribute6 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
    }

    @Test
    public void test07663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07663");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        int int14 = classWriter11.newNameType("L1780214503", "L877442963");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        int int41 = classWriter21.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter47.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter47.visitMethod(8, "hi!", "", "", strArray69);
        classWriter47.visitOuterClass("hi!", "", "");
        classWriter47.visitEnd();
        java.lang.String[] strArray84 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter47.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray84);
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter21.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray84);
        classWriter11.visit(170, 6, "L720530545", "L519618394", "L772357663", strArray84);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = classWriter11.visitAnnotation("L2089731244", false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test07664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07664");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        short short38 = classReader26.readShort(19);
        byte[] byteArray39 = classReader26.b;
        java.lang.String str40 = classReader26.getSuperName();
        int int42 = classReader26.readUnsignedShort((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 26729 + "'", short38 == (short) 26729);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test07665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07665");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter37.visitAnnotation("L1952894981", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter37.visitAnnotation("L1931763549", true);
        classWriter37.visitInnerClass("L81546457", "L721083102", "L1674107149", (int) 'a');
        classWriter37.visitEnd();
        classWriter37.visitOuterClass("L600894148", "L107203139", "L900410062");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test07666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07666");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        classWriter23.visitSource("", "");
        label20.info = "";
        int int30 = label20.getOffset();
        java.lang.Object obj31 = label20.info;
        org.mockito.asm.Label label32 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(5);
        classWriter34.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray39 = classWriter34.toByteArray();
        label32.info = byteArray39;
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray39);
        int int43 = classReader41.getItem((int) (byte) 0);
        byte[] byteArray44 = classReader41.b;
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader41, 40);
        label20.info = 40;
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter49.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter57.newMethod("", "", "hi!", true);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter57.visitMethod(0, "", "", "hi!", strArray71);
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter49.visitMethod(8, "hi!", "", "", strArray71);
        methodVisitor73.visitIntInsn((int) (short) 1, 6);
        methodVisitor73.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor73.visitAnnotation("hi!", false);
        methodVisitor73.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor73.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor73.visitAnnotation("L1076056118", true);
        label20.info = "L1076056118";
        int int93 = label20.getOffset();
        java.lang.Object obj94 = label20.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + "" + "'", obj31, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertNotNull(methodVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + "L1076056118" + "'", obj94, "L1076056118");
    }

    @Test
    public void test07667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07667");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        java.lang.String[] strArray12 = classReader9.getInterfaces();
        int int13 = classReader9.header;
        int int15 = classReader9.readByte(78);
        int int16 = classReader9.header;
        byte[] byteArray17 = classReader9.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 262400, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78 + "'", int13 == 78);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 78 + "'", int16 == 78);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test07668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07668");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("L1601838046", "L75359331", "L1847716459", 4);
        classWriter1.visitSource("L1490365060", "L1889100462");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(2);
        classWriter27.visitOuterClass("L488861128", "L745089702", "");
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField(16842755, "L1370122910", "L1208026886", "L579675851", (java.lang.Object) "L745089702");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        methodVisitor53.visitMaxs(6, (int) (short) 0);
        methodVisitor53.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor53.visitEnd();
        methodVisitor53.visitMaxs(0, 254);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter1.visitField(25, "L1090837709", "L1978876772", "L2133258398", (java.lang.Object) methodVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@5752aa24");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
    }

    @Test
    public void test07669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07669");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor16.visitAnnotation("L1110710417", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor16.visitAnnotation("L1249141674", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test07670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07670");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitOuterClass("L2062266913", "L181903634", "L474351819");
        classWriter1.visitOuterClass("L1057087156", "L495956935", "L153653146");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
    }

    @Test
    public void test07671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07671");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1292845306", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("L1715729238", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        short short64 = classReader62.readShort((int) (byte) 0);
        int int65 = classReader62.header;
        byte[] byteArray66 = classReader62.b;
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader62, 48640);
        int int70 = classWriter68.newUTF8("L1449033709");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter1.visitField((int) (short) 0, "L1020492233", "L397385256", "L1862340090", (java.lang.Object) "L1449033709");
        fieldVisitor71.visitEnd();
        fieldVisitor71.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) -13570 + "'", short64 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 90 + "'", int65 == 90);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(fieldVisitor71);
    }

    @Test
    public void test07672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07672");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        label56.info = strArray72;
        classWriter1.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray72);
        classWriter1.visitSource("L59063553", "L110679537");
        classWriter1.visitInnerClass("L1162526488", "L3043237", "L59063553", (int) '4');
        classWriter1.visitInnerClass("L799761587", "L600894148", "L1033617867", 167);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
    }

    @Test
    public void test07673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07673");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray37, 9, 9);
        int int42 = classReader40.readInt(40);
        int int43 = classReader40.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader40.readUnsignedShort(186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1165517669 + "'", int42 == 1165517669);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2816 + "'", int43 == 2816);
    }

    @Test
    public void test07674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07674");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        byte[] byteArray32 = classReader26.b;
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader33.readInt(1763772160);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07675");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor44.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        methodVisitor44.visitJumpInsn((-1), label70);
        methodVisitor17.visitJumpInsn((int) '#', label70);
        java.lang.Object obj74 = label70.info;
        java.lang.String str75 = label70.toString();
        java.lang.Object obj76 = label70.info;
        java.lang.Object obj77 = label70.info;
        int int78 = label70.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L2080829315" + "'", str75, "L2080829315");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test07676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07676");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1601838046", "L1889100462", "", 51966);
        classWriter1.visitOuterClass("L1510326766", "L77463317", "");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        int int38 = classWriter18.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter18.visitAnnotation("", true);
        byte[] byteArray42 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        int int44 = classReader43.getAccess();
        byte[] byteArray45 = classReader43.b;
        int int47 = classReader43.readByte((int) '#');
        java.lang.String str48 = classReader43.getSuperName();
        int int50 = classReader43.readInt(15);
        long long52 = classReader43.readLong(61);
        java.lang.String[] strArray53 = classReader43.getInterfaces();
        classWriter1.visit(62, (int) (byte) 0, "L426422007", "L1804838555", "L683506282", strArray53);
        java.lang.String[] strArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor60 = classWriter1.visitMethod((int) (short) 9, "L1933667327", "L1949580175", "", strArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16842755 + "'", int50 == 16842755);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 7278098581565042292L + "'", long52 == 7278098581565042292L);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test07677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07677");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        classWriter35.visitEnd();
        java.lang.String[] strArray72 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter35.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter9.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod(78, "L1936126716", "L1386483578", "L728847777", strArray72);
        int int80 = classWriter1.newMethod("L947368918", "L519618394", "L1157099023", false);
        org.mockito.asm.Attribute attribute81 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 13 + "'", int80 == 13);
    }

    @Test
    public void test07678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07678");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        classWriter1.visitSource("L809431533", "L2000102916");
        classWriter1.visitOuterClass("L1790809036", "L1223439170", "L1017623370");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07679");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        java.lang.String str34 = classReader26.getSuperName();
        int int36 = classReader26.readInt((int) (byte) 1);
        long long38 = classReader26.readLong(3);
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        int int69 = classReader67.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader67, (int) '4');
        int int73 = classReader67.readUnsignedShort(5);
        int int75 = classReader67.getItem(1);
        byte[] byteArray76 = classReader67.b;
        int int78 = classReader67.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader67, (int) '4');
        char[] charArray82 = new char[] {};
        java.lang.String str83 = classReader67.readUTF8(100, charArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = classReader26.readUTF8(167837696, charArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-21316096) + "'", int36 == (-21316096));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-4755801206503241215L) + "'", long38 == (-4755801206503241215L));
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 51966 + "'", int69 == 51966);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 11 + "'", int75 == 11);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 256 + "'", int78 == 256);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test07680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07680");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(104);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int9 = classWriter7.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter7.visitMethod(8, "hi!", "", "", strArray29);
        methodVisitor31.visitIntInsn((int) (short) 1, 6);
        methodVisitor31.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor31.visitAnnotation("hi!", false);
        methodVisitor31.visitIntInsn((int) (byte) 100, 0);
        methodVisitor31.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor31.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor31.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor31.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor31.visitAnnotationDefault();
        methodVisitor31.visitMultiANewArrayInsn("L671872947", (int) '#');
        methodVisitor31.visitFieldInsn(12850, "L1640056714", "L590888141", "L1750086343");
        org.mockito.asm.FieldVisitor fieldVisitor63 = classWriter1.visitField(768, "L85145148", "L1086414642", "L354659998", (java.lang.Object) 12850);
        org.mockito.asm.Attribute attribute64 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor63.visitAttribute(attribute64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(fieldVisitor63);
    }

    @Test
    public void test07681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07681");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitInsn(1869898100);
        methodVisitor16.visitIntInsn(1659509, 11);
        methodVisitor16.visitMultiANewArrayInsn("L1934292714", 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07682");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter31.visitMethod(3, "hi!", "hi!", "hi!", strArray53);
        methodVisitor55.visitMultiANewArrayInsn("L1221801792", 4);
        org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter1.visitField(3, "L1287376048", "L1601838046", "L1028579140", (java.lang.Object) 4);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter65.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(0);
        int int78 = classWriter73.newMethod("", "", "hi!", true);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter73.visitMethod(0, "", "", "hi!", strArray87);
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter65.visitMethod(8, "hi!", "", "", strArray87);
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter1.visitMethod(17, "L1490365060", "L831655905", "\001", strArray87);
        byte[] byteArray91 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = classWriter1.visitAnnotation("L470281651", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(fieldVisitor59);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(methodVisitor88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNotNull(methodVisitor90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 11, 76, 49, 54, 48, 49, 56, 51, 56, 48, 52, 54, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 3, 0, 0, 0, 4, 1, 0, 11, 76, 49, 52, 57, 48, 51, 54, 53, 48, 54, 48, 1, 0, 10, 76, 56, 51, 49, 54, 53, 53, 57, 48, 53, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 5, 0, 6, 0, 2, 0, 11, 0, 0, 0, 2, 0, 8, 0, 12, 0, 0, 0, 2, 0, 7, 0, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 12, 0, 0, 0, 2, 0, 2, 0, 17, 0, 9, 0, 10, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 12, 0, 0, 0, 2, 0, 14, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test07683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07683");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        annotationVisitor35.visitEnum("L1068224943", "L1058656014", "L2132185573");
        annotationVisitor35.visitEnum("", "L570733821", "L139573601");
        annotationVisitor35.visitEnum("L705687832", "L2000102916", "L571285779");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test07684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07684");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitIincInsn((int) (byte) 10, (int) (short) 1792);
        methodVisitor25.visitInsn(1);
        methodVisitor25.visitVarInsn(17, 6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test07685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07685");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        int int37 = classWriter1.newMethod("", "L1700758411", "L1928858580", false);
        int int42 = classWriter1.newMethod("L157434537", "L230654417", "L1583234446", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("L562296337", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter1.visitAnnotation("L1667109172", false);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        int int71 = classWriter51.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter51.visitAnnotation("", true);
        byte[] byteArray75 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        short short78 = classReader76.readShort((int) (byte) 0);
        int int80 = classReader76.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(classReader76, 0);
        java.lang.String[] strArray83 = classReader76.getInterfaces();
        byte[] byteArray84 = classReader76.b;
        java.lang.String str85 = classReader76.getSuperName();
        long long87 = classReader76.readLong(14);
        java.lang.String str88 = classReader76.getSuperName();
        byte[] byteArray89 = classReader76.b;
        java.lang.String str90 = classReader76.getSuperName();
        java.lang.String[] strArray91 = classReader76.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor48.visit("L288287534", (java.lang.Object) classReader76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@f0a3633");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 21 + "'", int42 == 21);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) -13570 + "'", short78 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2560 + "'", int80 == 2560);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 282574545512737L + "'", long87 == 282574545512737L);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray91);
    }

    @Test
    public void test07686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07686");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        int int52 = classReader51.header;
        java.lang.String[] strArray53 = classReader51.getInterfaces();
        java.lang.Class<?> wildcardClass54 = classReader51.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 163 + "'", int52 == 163);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test07687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07687");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        int int13 = classReader7.readByte(0);
        int int14 = classReader7.getAccess();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter17.visitAnnotation("", true);
        byte[] byteArray41 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        int int44 = classReader42.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader42, (int) '4');
        long long48 = classReader42.readLong(2);
        int int49 = classReader42.getAccess();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader42, (int) (byte) 1);
        long long53 = classReader42.readLong(8);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        int int83 = classReader81.readUnsignedShort((int) (byte) 0);
        short short85 = classReader81.readShort(7);
        int int86 = classReader81.header;
        int int88 = classReader81.readInt(19);
        char[] charArray93 = new char[] { '4', '#', '#' };
        java.lang.String str94 = classReader81.readUTF8(14, charArray93);
        java.lang.String str95 = classReader42.readUTF8(25, charArray93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = classReader7.readClass(21, charArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 14641");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 202 + "'", int13 == 202);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 51966 + "'", int44 == 51966);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-4990551337079930870L) + "'", long48 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2815849279193089L + "'", long53 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 51966 + "'", int83 == 51966);
        org.junit.Assert.assertTrue("'" + short85 + "' != '" + (short) 0 + "'", short85 == (short) 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 90 + "'", int86 == 90);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1751720204 + "'", int88 == 1751720204);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
    }

    @Test
    public void test07688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07688");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        long long12 = classReader7.readLong(4);
        int int14 = classReader7.readInt((int) '4');
        int int16 = classReader7.readUnsignedShort(1);
        int int17 = classReader7.header;
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter20.visitMethod(0, "", "", "hi!", strArray34);
        int int40 = classWriter20.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter20.visitAnnotation("", true);
        byte[] byteArray44 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String str46 = classReader45.getSuperName();
        char[] charArray52 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj53 = classReader45.readConst(6, charArray52);
        char[] charArray61 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str62 = classReader45.readUTF8((int) '#', charArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = classReader7.readConst(33, charArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 459008L + "'", long12 == 459008L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 875903244 + "'", int14 == 875903244);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 65210 + "'", int16 == 65210);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 78 + "'", int17 == 78);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + "\001" + "'", obj53, "\001");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\000" + "'", str62, "\000");
    }

    @Test
    public void test07689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07689");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        methodVisitor16.visitFieldInsn((int) (short) 780, "L310679005", "L2035525354", "L1526570068");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test07690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07690");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = methodVisitor16.visitAnnotation("L407879786", false);
        methodVisitor16.visitInsn((int) (short) 256);
        methodVisitor16.visitMethodInsn(26729, "L1912967891", "L853371719", "L71945869");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test07691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07691");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        int int41 = classWriter1.newField("L1368708044", "L2037791973", "L535346328");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "L1520330258", "L2039247828", "L721083102", (java.lang.Object) "L442162059");
        byte[] byteArray48 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
    }

    @Test
    public void test07692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07692");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        java.lang.String[] strArray44 = classReader26.getInterfaces();
        java.lang.Class<?> wildcardClass45 = strArray44.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test07693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07693");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        long long37 = classReader26.readLong(8);
        int int39 = classReader26.getItem(3);
        long long41 = classReader26.readLong(8);
        int int43 = classReader26.readInt(6);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, 1792);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 2560);
        short short49 = classReader26.readShort(82);
        short short51 = classReader26.readShort(6);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2815849279193089L + "'", long37 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2815849279193089L + "'", long41 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 28532 + "'", short49 == (short) 28532);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
    }

    @Test
    public void test07694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07694");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L264795169", "L680573325");
        classWriter1.visitSource("L1013343419", "L1142940414");
        int int31 = classWriter1.newUTF8("L2062266913");
        int int36 = classWriter1.newMethod("L1581248331", "L500545133", "L149220781", false);
        int int40 = classWriter1.newField("L918742398", "L799761587", "L1491483291");
        classWriter1.visitSource("L1579135061", "L919303058");
        int int46 = classWriter1.newNameType("L1619769466", "L245756211");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 25 + "'", int40 == 25);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 29 + "'", int46 == 29);
    }

    @Test
    public void test07695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07695");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        int int24 = classWriter1.newField("L1142940414", "L75359331", "L426422007");
        byte[] byteArray25 = classWriter1.toByteArray();
        int int29 = classWriter1.newField("L569030566", "L749100806", "L1762162347");
        classWriter1.visitEnd();
        int int32 = classWriter1.newClass("L101926124");
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 25, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 7, 0, 17, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 12, 0, 19, 0, 20, 9, 0, 18, 0, 21, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 23, 0, 0, 0, 4, 0, 8, 0, 10, 0, 24, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 30 + "'", int29 == 30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
    }

    @Test
    public void test07696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07696");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(10);
        classWriter1.visitInnerClass("L745089702", "L1855754182", "L1009580268", 5);
        classWriter1.visitOuterClass("L143726105", "L1357812716", "L838556944");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L607357044", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor14.visitArray("L1566658664");
        annotationVisitor14.visit("L1688164825", (java.lang.Object) 1792);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor14.visitAnnotation("L2126863623", "L838556944");
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test07697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07697");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("L1017623370", 512);
        methodVisitor16.visitInsn(14);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07698");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        methodVisitor37.visitMaxs(13, 254);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField((int) '#', "L680573325", "L624707113", "L782129665", (java.lang.Object) 254);
        classWriter1.visitEnd();
        int int51 = classWriter1.newClass("L959574331");
        classWriter1.visitInnerClass("L1140828792", "L1268109548", "L1889100462", 24);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L680573325", "L1833410886", "L945141047", 6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
    }

    @Test
    public void test07699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07699");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotation("L242883751", false);
        methodVisitor25.visitVarInsn(9, (int) (byte) 100);
        methodVisitor25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = methodVisitor25.visitAnnotation("L836032224", true);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        int int74 = classReader72.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(classReader72, (int) '4');
        int int78 = classReader72.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader72, (int) '#');
        short short82 = classReader72.readShort(0);
        short short84 = classReader72.readShort(22);
        methodVisitor25.visitLdcInsn((java.lang.Object) short84);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 51966 + "'", int74 == 51966);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) -13570 + "'", short82 == (short) -13570);
        org.junit.Assert.assertTrue("'" + short84 + "' != '" + (short) 3072 + "'", short84 == (short) 3072);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test07700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07700");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        java.lang.String str36 = classReader26.getSuperName();
        short short38 = classReader26.readShort((int) (short) 0);
        int int39 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader26.readUnsignedShort(2048);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -13570 + "'", short38 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test07701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07701");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn(65210, (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = methodVisitor16.visitAnnotation("L841843626", true);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test07702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07702");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 202);
        int int16 = classWriter13.newNameType("L972384730", "L1505866272");
        int int18 = classWriter13.newUTF8("L1068224943");
        classWriter13.visitInnerClass("L875787534", "L1228081592", "L1700698598", (int) (short) 7);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter13.visitAnnotation("L2078535908", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor26.visitArray("");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07703");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (short) 1);
        classWriter40.visitSource("", "L2000102916");
        int int50 = classWriter40.newMethod("", "L2062266913", "L809431533", false);
        classWriter40.visitEnd();
        classWriter40.visitOuterClass("hi!", "L809431533", "L636727990");
        byte[] byteArray56 = classWriter40.toByteArray();
        annotationVisitor28.visit("L1715729238", (java.lang.Object) byteArray56);
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray56);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader58, 7);
        int int61 = classReader58.getAccess();
        int int63 = classReader58.readUnsignedShort((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = classReader58.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 12, 0, 5, 0, 10, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 2, 0, 2, 0, 13, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 0, 14, 0, 0, 0, 4, 0, 9, 0, 11]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 768 + "'", int63 == 768);
    }

    @Test
    public void test07704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07704");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L590888141", "hi!", "L2062266913");
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        int int52 = classWriter32.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter32.visitAnnotation("", true);
        byte[] byteArray56 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        short short59 = classReader57.readShort((int) (byte) 0);
        int int61 = classReader57.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader57, 0);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader57, 0);
        int int67 = classReader57.readByte((int) (byte) 10);
        short short69 = classReader57.readShort((int) (short) 7);
        java.lang.String str70 = classReader57.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter1.visitField(139, "L300339955", "L1286020517", "L1494769264", (java.lang.Object) str70);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = fieldVisitor71.visitAnnotation("L1007201117", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) -13570 + "'", short59 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2560 + "'", int61 == 2560);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) 0 + "'", short69 == (short) 0);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test07705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07705");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int10 = classWriter1.newField("L1601838046", "L2000102916", "\001");
        int int13 = classWriter1.newNameType("L1628304347", "L664111037");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(8);
        int int16 = classWriter1.newConst((java.lang.Object) 8);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("L77196307", false);
        classWriter1.visitInnerClass("L1150125104", "L1055269373", "L2069898161", 129);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test07706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07706");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor46.visitLabel(label50);
        java.lang.Object obj52 = label50.info;
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        label59.info = strArray75;
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter54.visitMethod((int) (short) 100, "", "hi!", "", strArray75);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor78.visitAnnotationDefault();
        methodVisitor78.visitEnd();
        label50.info = methodVisitor78;
        methodVisitor16.visitJumpInsn(38, label50);
        label50.info = 1694564377;
        java.lang.Class<?> wildcardClass85 = label50.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test07707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07707");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "hi!", strArray90);
        methodVisitor94.visitEnd();
        methodVisitor94.visitIincInsn(0, 69);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test07708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07708");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter1.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort(40);
        int int30 = classReader26.readInt(22);
        int int32 = classReader26.getItem(1);
        int int33 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = classReader26.readLong((int) (short) 12342);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 50, 50, 51, 52, 51, 57, 49, 55, 48, 7, 0, 9, 1, 0, 11, 76, 50, 48, 49, 52, 56, 48, 54, 52, 48, 52, 7, 0, 11, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 7, 0, 14, 1, 0, 11, 76, 49, 53, 48, 53, 56, 54, 54, 50, 55, 50, 12, 0, 9, 0, 16, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 4, 0, 15, 0, 17, 0, 19, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3072 + "'", int28 == 3072);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 201326848 + "'", int30 == 201326848);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test07709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07709");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        byte[] byteArray70 = classWriter1.toByteArray();
        int int72 = classWriter1.newClass("L1889100462");
        int int76 = classWriter1.newField("L1368708044", "L2014806404", "L1132227206");
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter1.visitAnnotation("L1042599060", true);
        classWriter1.visitOuterClass("L146399554", "L503713660", "L1969123537");
        classWriter1.visitSource("L275489687", "L1104252878");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 1, 0, 10, 76, 53, 51, 53, 51, 52, 54, 51, 50, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 10, 0, 2, 0, 11, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 13, 0, 1, 0, 14, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 16 + "'", int72 == 16);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 21 + "'", int76 == 21);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test07710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07710");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitCode();
        methodVisitor25.visitIntInsn(51966, 16);
        methodVisitor25.visitInsn((int) (short) 3072);
        methodVisitor25.visitMaxs(8, (int) (short) 1034);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test07711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07711");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readInt(5);
        long long14 = classReader7.readLong(78);
        java.lang.String[] strArray15 = classReader7.getInterfaces();
        byte[] byteArray16 = classReader7.b;
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader7, 29);
        java.lang.String str19 = classReader7.getSuperName();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter22.newMethod("", "", "hi!", true);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter22.visitMethod(0, "", "", "hi!", strArray36);
        int int42 = classWriter22.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter22.visitAnnotation("", true);
        byte[] byteArray46 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        int int49 = classReader47.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader47, (int) '4');
        long long53 = classReader47.readLong(2);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        java.lang.String str82 = classReader81.getSuperName();
        char[] charArray88 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj89 = classReader81.readConst(6, charArray88);
        java.lang.Object obj90 = classReader47.readConst(3, charArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = classReader7.readConst((int) (short) 25445, charArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25445");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 51966 + "'", int49 == 51966);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-4990551337079930870L) + "'", long53 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + "\001" + "'", obj89, "\001");
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + "hi!" + "'", obj90, "hi!");
    }

    @Test
    public void test07712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07712");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitSource("L2132757815", "L467340186");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter1.visitAnnotation("L1340512578", true);
        classWriter1.visitSource("L1286020517", "L1655799832");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test07713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07713");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L426422007");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07714");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int35 = classReader26.readByte(0);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) -13570);
        int int39 = classWriter37.newUTF8("");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 202 + "'", int35 == 202);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test07715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07715");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        methodVisitor33.visitIntInsn((-889275714), (int) '#');
        methodVisitor33.visitInsn(1751720204);
        methodVisitor33.visitEnd();
        methodVisitor33.visitInsn(32);
        methodVisitor33.visitMultiANewArrayInsn("L330454166", 4);
        methodVisitor33.visitFieldInsn(36, "L389458669", "L202540477", "L3043237");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
    }

    @Test
    public void test07716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07716");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int30 = classReader26.readInt(2);
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        java.lang.Class<?> wildcardClass32 = classReader26.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1161953280) + "'", int30 == (-1161953280));
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test07717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07717");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readInt(78);
        byte[] byteArray37 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.readByte((int) (short) 780);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 780");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1698786926 + "'", int36 == 1698786926);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07718");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitTypeInsn(19, "L488861128");
        methodVisitor25.visitIincInsn(0, 26729);
        methodVisitor25.visitTypeInsn((int) (short) 1031, "L1619769466");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test07719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07719");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        classWriter27.visitOuterClass("hi!", "", "");
        classWriter27.visitEnd();
        java.lang.String[] strArray64 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter27.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("L1004763019", false);
        int int72 = classWriter1.newNameType("hi!", "L1601838046");
        classWriter1.visitSource("L1962189950", "");
        classWriter1.visitInnerClass("L1111133036", "L172254079", "L1287376048", 202);
        java.lang.Object obj85 = null;
        org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter1.visitField(4, "L1490365060", "L841843626", "L1611208075", obj85);
        int int89 = classWriter1.newNameType("L1489256177", "L829519303");
        int int91 = classWriter1.newClass("L1550989705");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14 + "'", int72 == 14);
        org.junit.Assert.assertNotNull(fieldVisitor86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 26 + "'", int89 == 26);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 28 + "'", int91 == 28);
    }

    @Test
    public void test07720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07720");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor62.visitAnnotation("L1162526488", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor62.visitAnnotation("L1429849124", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = fieldVisitor62.visitAnnotation("L1572438104", false);
        fieldVisitor62.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test07721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07721");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        int int36 = classReader35.header;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader35.readByte(254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
    }

    @Test
    public void test07722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07722");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L531876647", true);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
    }

    @Test
    public void test07723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07723");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        short short33 = classReader26.readShort((int) '#');
        byte[] byteArray34 = classReader26.b;
        int int35 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 4 + "'", short33 == (short) 4);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test07724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07724");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String[] strArray12 = classReader7.getInterfaces();
        int int13 = classReader7.header;
        java.lang.String str14 = classReader7.getSuperName();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter16.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter24.newMethod("", "", "hi!", true);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter24.visitMethod(0, "", "", "hi!", strArray38);
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod(3, "hi!", "hi!", "hi!", strArray38);
        byte[] byteArray41 = classWriter16.toByteArray();
        int int43 = classWriter16.newUTF8("hi!");
        byte[] byteArray44 = classWriter16.toByteArray();
        classWriter16.visitSource("L1700698598", "L1726462062");
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter16, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78 + "'", int13 == 78);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
    }

    @Test
    public void test07725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07725");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newClass("L59063553");
        int int16 = classWriter1.newMethod("L46285906", "L2012296629", "L841843626", false);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter22.newMethod("", "", "hi!", true);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter22.visitMethod(0, "", "", "hi!", strArray36);
        int int42 = classWriter22.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter22.visitAnnotation("", true);
        byte[] byteArray46 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        int int48 = classReader47.getAccess();
        java.lang.String[] strArray49 = classReader47.getInterfaces();
        java.lang.String[] strArray50 = classReader47.getInterfaces();
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader47, 2560);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter59.visitMethod(0, "", "", "hi!", strArray73);
        int int79 = classWriter59.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter59.visitAnnotation("", true);
        byte[] byteArray83 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        int int85 = classReader84.getAccess();
        java.lang.String[] strArray86 = classReader84.getInterfaces();
        classWriter52.visit(100, 29, "L1004763019", "", "L1192381465", strArray86);
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod(0, "L710396374", "L1991590306", "L1731693361", strArray86);
        methodVisitor88.visitIincInsn((int) (short) 768, (int) (short) 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 6 + "'", int79 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor88);
    }

    @Test
    public void test07726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07726");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int10 = classReader9.header;
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader9, 5);
        int int14 = classReader9.readByte((int) (short) 1);
        java.lang.String[] strArray15 = classReader9.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            short short17 = classReader9.readShort((int) (short) 12598);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12598");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 78 + "'", int10 == 78);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test07727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07727");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(13365);
    }

    @Test
    public void test07728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07728");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        int int6 = classWriter1.newMethod("L275489687", "L275489687", "L275489687", false);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label13 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        label13.info = strArray29;
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter8.visitMethod((int) (short) 100, "", "hi!", "", strArray29);
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter8.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = fieldVisitor38.visitAnnotation("L2000102916", false);
        int int42 = classWriter1.newConst((java.lang.Object) false);
        classWriter1.visitInnerClass("L680573325", "hi!", "", 100);
        int int49 = classWriter1.newClass("L693982720");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField((int) (short) 8460, "L538737171", "L805282072", "L415508906", (java.lang.Object) "L1110710417");
        int int57 = classWriter1.newUTF8("L152278810");
        int int62 = classWriter1.newMethod("L1793985281", "L1287376048", "L1090837709", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 18 + "'", int57 == 18);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 24 + "'", int62 == 24);
    }

    @Test
    public void test07729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07729");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String str36 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        byte[] byteArray63 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        short short66 = classReader64.readShort((int) (byte) 0);
        int int68 = classReader64.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader64, 0);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(classReader64, 0);
        int int74 = classReader64.readByte((int) (byte) 10);
        char[] charArray79 = new char[] { '#', '4', '4' };
        java.lang.String str80 = classReader64.readUTF8(100, charArray79);
        java.lang.String str81 = classReader26.readUTF8(23, charArray79);
        int int83 = classReader26.readInt((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) -13570 + "'", short66 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2560 + "'", int68 == 2560);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-889275714) + "'", int83 == (-889275714));
    }

    @Test
    public void test07730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07730");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L335127529");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07731");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitTypeInsn(26729, "L1952894981");
        methodVisitor16.visitMethodInsn(0, "L2062266913", "L1292845306", "L1083553839");
        methodVisitor16.visitMaxs(33, 65210);
        methodVisitor16.visitIntInsn(1792, 1763773440);
        methodVisitor16.visitMaxs(2, (int) (short) 256);
        methodVisitor16.visitIntInsn(779, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test07732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07732");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        annotationVisitor21.visitEnum("L1068224943", "L552318631", "L664111037");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        int int48 = classWriter28.newMethod("", "", "hi!", false);
        classWriter28.visitInnerClass("", "", "", (int) ' ');
        int int57 = classWriter28.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        methodVisitor78.visitFieldInsn(8, "hi!", "", "");
        methodVisitor78.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter28.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = fieldVisitor89.visitAnnotation("L1162526488", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = fieldVisitor89.visitAnnotation("L1429849124", false);
        annotationVisitor95.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = annotationVisitor95.visitArray("L590888141");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor21.visit("L4113876", (java.lang.Object) annotationVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@5d64a494");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(fieldVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor95);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test07733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07733");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1057087156");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07734");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readInt(3);
        long long32 = classReader26.readLong(100);
        java.lang.String str33 = classReader26.getSuperName();
        short short35 = classReader26.readShort(5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1107296256) + "'", int30 == (-1107296256));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 281474976776193L + "'", long32 == 281474976776193L);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 0 + "'", short35 == (short) 0);
    }

    @Test
    public void test07735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07735");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor16.visitParameterAnnotation(67174410, "L1203835501", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test07736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07736");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1694564377);
        int int5 = classWriter1.newField("L1511591972", "L1745031302", "L1516640580");
        int int7 = classWriter1.newClass("L853371719");
        int int10 = classWriter1.newNameType("L1334226032", "L489036559");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
    }

    @Test
    public void test07737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07737");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitMethodInsn(202, "L9401833", "L841843626", "L590059745");
        methodVisitor16.visitMultiANewArrayInsn("L1058109766", 1000814);
        java.lang.Class<?> wildcardClass95 = methodVisitor16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test07738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07738");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.getItem((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test07739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07739");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter1.visitAnnotation("L2014806404", true);
        classWriter1.visitSource("L1291288126", "L238476442");
        classWriter1.visitEnd();
        int int40 = classWriter1.newField("L1593213092", "L917500574", "L124447396");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 25 + "'", int40 == 25);
    }

    @Test
    public void test07740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07740");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        int int39 = classReader26.readByte(6);
        int int41 = classReader26.readUnsignedShort(13);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = classReader26.getItem(27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1792 + "'", int41 == 1792);
    }

    @Test
    public void test07741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07741");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitCode();
        methodVisitor16.visitTypeInsn(2560, "L1009580268");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor16.visitParameterAnnotation(141, "L1345812268", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test07742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07742");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        annotationVisitor35.visitEnd();
        annotationVisitor35.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor35.visitArray("L73404539");
        annotationVisitor35.visitEnum("L1058656014", "L1090837709", "L738034982");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test07743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07743");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        methodVisitor37.visitMaxs(13, 254);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField((int) '#', "L680573325", "L624707113", "L782129665", (java.lang.Object) 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("L1076056118", true);
        classWriter1.visitInnerClass("L1992564202", "L1825093390", "L238186358", 110);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test07744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07744");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitCode();
        methodVisitor16.visitFieldInsn(6, "", "L529122729", "L1075066296");
        methodVisitor16.visitEnd();
        methodVisitor16.visitFieldInsn(2, "L1352784969", "L552318631", "L552318631");
        methodVisitor16.visitMaxs((int) (short) 8460, (-1));
        methodVisitor16.visitIincInsn(611177, 170);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test07745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07745");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        int int13 = classWriter1.newUTF8("L1132227206");
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("L829519303", true);
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test07746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07746");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIincInsn((int) (short) -13570, 10);
        methodVisitor51.visitMethodInsn((int) '4', "L809431533", "L897597087", "L636727990");
        methodVisitor51.visitMethodInsn(16, "L1221801792", "L728847777", "L1208026886");
        methodVisitor51.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = methodVisitor51.visitAnnotation("L81546457", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = annotationVisitor69.visitAnnotation("L284187755", "L176981758");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test07747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07747");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 1698786926);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(classReader9, (int) (short) 1);
        classWriter15.visitOuterClass("L1054441001", "L1007542453", "L1476603784");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test07748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07748");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        java.lang.String[] strArray12 = classReader9.getInterfaces();
        long long14 = classReader9.readLong(3);
        java.lang.String[] strArray15 = classReader9.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader9.readInt(167772672);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-4755801206503241983L) + "'", long14 == (-4755801206503241983L));
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test07749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07749");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        methodVisitor16.visitMethodInsn(65210, "L2034910382", "L179737210", "L1413182688");
        methodVisitor16.visitIntInsn((int) '#', 1);
        methodVisitor16.visitTypeInsn(0, "L1451039961");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor16.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test07750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07750");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        char[] charArray39 = new char[] { '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.readUTF8((int) (short) 2048, charArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4]");
    }

    @Test
    public void test07751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07751");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter12.visitMethod(0, "", "", "hi!", strArray26);
        int int32 = classWriter12.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter12.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter38.visitAnnotation("hi!", false);
        annotationVisitor65.visitEnum("hi!", "", "hi!");
        annotationVisitor35.visit("", (java.lang.Object) "hi!");
        int int71 = classWriter1.newConst((java.lang.Object) "");
        classWriter1.visitInnerClass("L728847777", "L2000102916", "L1221801792", (int) (short) -1);
        classWriter1.visitOuterClass("L1804134080", "L1975230523", "L428215077");
        classWriter1.visitOuterClass("L838556944", "L1723151786", "L1900350996");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
    }

    @Test
    public void test07752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07752");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitTypeInsn((int) (short) 10, "L1540520089");
        methodVisitor16.visitMethodInsn(161, "L1577334486", "L282070366", "L1266856712");
        methodVisitor16.visitLdcInsn((java.lang.Object) (short) 2387);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor16.visitAnnotation("L875787534", true);
        annotationVisitor41.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test07753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07753");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L1969123537", false);
        classWriter1.visitSource("L170800745", "L1700758411");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("L975788322", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor15.visitArray("L1356621730");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test07754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07754");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int35 = classReader26.readByte(0);
        byte[] byteArray36 = classReader26.b;
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int38 = classReader26.header;
        int int39 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 202 + "'", int35 == 202);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
    }

    @Test
    public void test07755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07755");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("L523453504", true);
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test07756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07756");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn(0, 10);
        methodVisitor25.visitMaxs(5, (-1));
        methodVisitor25.visitMaxs(2, (int) (short) 256);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter65.newConst((java.lang.Object) (short) 1);
        classWriter65.visitSource("", "");
        label62.info = "";
        int int72 = label62.getOffset();
        java.lang.Object obj73 = label62.info;
        java.lang.String str74 = label62.toString();
        methodVisitor25.visitJumpInsn(62, label62);
        methodVisitor25.visitInsn((int) ' ');
        methodVisitor25.visitMultiANewArrayInsn("L777505617", 254);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "" + "'", obj73, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L851601340" + "'", str74, "L851601340");
    }

    @Test
    public void test07757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07757");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        int int42 = classWriter30.newNameType("hi!", "hi!");
        int int45 = classWriter30.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        classWriter30.visit(5, 6, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter19.visitMethod((int) (short) 0, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter1.visitMethod((int) '#', "L242883751", "L728847777", "L728847777", strArray66);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor70.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test07758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07758");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        methodVisitor16.visitInsn((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        methodVisitor59.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        java.lang.String str85 = label83.toString();
        int[] intArray89 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] {};
        methodVisitor59.visitLookupSwitchInsn(label83, intArray89, labelArray90);
        methodVisitor16.visitLabel(label83);
        methodVisitor16.visitMultiANewArrayInsn("L859822598", 163);
        methodVisitor16.visitInsn(23);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L40208895" + "'", str85, "L40208895");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray90);
    }

    @Test
    public void test07759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07759");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        int int53 = classWriter1.newUTF8("L1221801792");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter1.visitAnnotation("L607357044", true);
        classWriter1.visitOuterClass("L152278810", "L1553193067", "L1068224943");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test07760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07760");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        byte[] byteArray24 = classWriter1.toByteArray();
        int int27 = classWriter1.newNameType("", "L77196307");
        int int31 = classWriter1.newField("L110679537", "L1546658809", "L1847716459");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        short short60 = classReader58.readShort((int) (byte) 0);
        int int62 = classReader58.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(classReader58, 0);
        java.lang.String[] strArray65 = classReader58.getInterfaces();
        byte[] byteArray66 = classReader58.b;
        java.lang.String str67 = classReader58.getSuperName();
        long long69 = classReader58.readLong(14);
        java.lang.String str70 = classReader58.getSuperName();
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(classReader58, 16);
        int int73 = classReader58.header;
        byte[] byteArray74 = classReader58.b;
        int int75 = classReader58.getAccess();
        int int76 = classWriter1.newConst((java.lang.Object) int75);
        int int78 = classWriter1.newUTF8("L46285906");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 10, 76, 49, 49, 48, 54, 55, 57, 53, 51, 55, 7, 0, 9, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 11, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 2, 0, 3, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 6, 0, 7, 0, 17, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, -54, -2]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) -13570 + "'", short60 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2560 + "'", int62 == 2560);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 282574545512737L + "'", long69 == 282574545512737L);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 90 + "'", int73 == 90);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 24 + "'", int76 == 24);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 25 + "'", int78 == 25);
    }

    @Test
    public void test07761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07761");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        int int41 = classWriter1.newField("L1368708044", "L2037791973", "L535346328");
        java.lang.String[] strArray47 = null;
        classWriter1.visit(0, 1763773440, "L1967259122", "L560005029", "L375606602", strArray47);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("L1858878165", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test07762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07762");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L1899113546", "L1086414642");
        classWriter1.visitInnerClass("L130127010", "L918742398", "L276953604", 100);
        int int38 = classWriter1.newField("L2132431650", "L1804838555", "L334680853");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        int int71 = classReader69.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader69, (int) '4');
        int int75 = classReader69.readUnsignedShort(5);
        int int76 = classReader69.getAccess();
        java.lang.String[] strArray77 = classReader69.getInterfaces();
        java.lang.String[] strArray78 = classReader69.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(1694564377, "L464591227", "L464591227", "L107823974", strArray78);
        int int82 = classWriter1.newNameType("L1676018134", "L1203369612");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 28 + "'", int38 == 28);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 51966 + "'", int71 == 51966);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
    }

    @Test
    public void test07763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07763");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitCode();
        methodVisitor25.visitIntInsn(51966, 16);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor25.visitAnnotation("L76446579", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test07764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07764");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitSource("L1889100462", "L1769475365");
        int int15 = classWriter1.newMethod("L146399554", "L474351819", "L680573325", true);
        classWriter1.visitOuterClass("L2127085380", "L1642186947", "");
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int30 = classWriter25.newMethod("", "", "hi!", true);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter25.visitMethod(0, "", "", "hi!", strArray39);
        int int45 = classWriter25.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter25.visitAnnotation("", true);
        byte[] byteArray49 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray49);
        int int51 = classReader50.getAccess();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(classReader50, 10);
        java.lang.String[] strArray54 = classReader50.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter1.visitMethod((int) (short) 26729, "L620334303", "L683506282", "", strArray54);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        int int81 = classWriter61.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter61.visitAnnotation("", true);
        byte[] byteArray85 = classWriter61.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int87 = classReader86.getAccess();
        byte[] byteArray88 = classReader86.b;
        int int90 = classReader86.readByte((int) '#');
        java.lang.String str91 = classReader86.getSuperName();
        int int93 = classReader86.readInt(15);
        long long95 = classReader86.readLong(61);
        java.lang.String str96 = classReader86.getSuperName();
        byte[] byteArray97 = classReader86.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter1.visitField((int) (short) 7, "L81662335", "L469510195", "", (java.lang.Object) byteArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@577316fe");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 16842755 + "'", int93 == 16842755);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 7278098581565042292L + "'", long95 == 7278098581565042292L);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07765");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1712389562");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07766");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        int int31 = classWriter11.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter11.visitAnnotation("", true);
        byte[] byteArray35 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        int int38 = classReader36.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader36, (int) '4');
        long long42 = classReader36.readLong(2);
        int int43 = classReader36.getAccess();
        byte[] byteArray44 = classReader36.b;
        int int46 = classReader36.readInt(12);
        java.lang.String[] strArray47 = classReader36.getInterfaces();
        classWriter1.visit((-1107296256), 0, "L529122729", "L1386483578", "L1075066296", strArray47);
        classWriter1.visitInnerClass("L755844592", "L1930348385", "L2132185573", 163);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter55.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter55.visitMethod(3, "hi!", "hi!", "hi!", strArray77);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter55.visitAnnotation("L242883751", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter55.visitAnnotation("L1628304347", false);
        classWriter55.visitEnd();
        int int88 = classWriter55.newUTF8("");
        int int89 = classWriter1.newConst((java.lang.Object) int88);
        classWriter1.visitSource("L953714147", "L667379532");
        java.lang.Object obj97 = null;
        org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter1.visitField((-1107296256), "L248471706", "L248471706", "L1031503101", obj97);
        fieldVisitor98.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51966 + "'", int38 == 51966);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-4990551337079930870L) + "'", long42 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 458753 + "'", int46 == 458753);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 12 + "'", int89 == 12);
        org.junit.Assert.assertNotNull(fieldVisitor98);
    }

    @Test
    public void test07767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07767");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L590888141", "hi!", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("L2034910382", false);
        classWriter1.visitSource("L1497855016", "L1370122910");
        classWriter1.visitEnd();
        int int36 = classWriter1.newNameType("L1670545532", "L268449408");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
    }

    @Test
    public void test07768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07768");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("L463484842", "L495165811", "L1158904698");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test07769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07769");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMultiANewArrayInsn("L1611208075", 16);
        methodVisitor16.visitIincInsn(33, 7);
        methodVisitor16.visitTypeInsn(27, "L1413182688");
        methodVisitor16.visitInsn(51966);
        methodVisitor16.visitInsn(35);
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07770");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        classWriter1.visitOuterClass("L1387910543", "L897597087", "L1013343419");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L2014806404", true);
        classWriter1.visitInnerClass("L749100806", "L2034910382", "", 17);
        int int34 = classWriter1.newUTF8("L1361142288");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (short) 1);
        int int44 = classWriter40.newUTF8("hi!");
        classWriter40.visitInnerClass("L207820460", "", "L500545133", 100);
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter40.visitField(12850, "L826610285", "L62360881", "L1430234734", (java.lang.Object) "L1589078908");
        org.mockito.asm.Label label61 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(5);
        classWriter63.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray68 = classWriter63.toByteArray();
        label61.info = byteArray68;
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray68);
        int int72 = classReader70.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(classReader70, 12);
        int int75 = classReader70.header;
        java.lang.String str76 = classReader70.getSuperName();
        java.lang.String[] strArray77 = classReader70.getInterfaces();
        classWriter40.visit(19506, 458753, "L976618452", "L1221801792", "L815303353", strArray77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(0, "L1800549256", "L1336128092", "L650167216", strArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 27 + "'", int34 == 27);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 78 + "'", int75 == 78);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
    }

    @Test
    public void test07771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07771");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        int int37 = classReader26.getAccess();
        java.lang.String str38 = classReader26.getSuperName();
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        java.lang.String str40 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.readUnsignedShort((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test07772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07772");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        methodVisitor48.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor48.visitCode();
        methodVisitor48.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        java.lang.String str81 = label79.toString();
        methodVisitor48.visitLineNumber((int) (short) -1, label79);
        label79.info = (-1.0f);
        java.lang.String str85 = label79.toString();
        methodVisitor25.visitLabel(label79);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor25.visitAnnotation("L158524288", false);
        annotationVisitor89.visit("L1370951034", (java.lang.Object) 18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1830490827" + "'", str81, "L1830490827");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1830490827" + "'", str85, "L1830490827");
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test07773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07773");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader33, 0);
        int int43 = classReader33.getItem(2);
        java.lang.String[] strArray44 = classReader33.getInterfaces();
        classWriter1.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray44);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter52.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter52.visitMethod(8, "hi!", "", "", strArray74);
        classWriter52.visitOuterClass("hi!", "", "");
        int int82 = classWriter52.newClass("hi!");
        classWriter52.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        int int90 = classWriter52.newField("L541901146", "L364320201", "L1930348385");
        classWriter52.visitEnd();
        classWriter52.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor93 = classWriter1.visitField(16, "L1823521374", "L2092150154", "L755632097", (java.lang.Object) classWriter52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@60bf582");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 17 + "'", int90 == 17);
    }

    @Test
    public void test07774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07774");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 12);
        int int14 = classReader9.header;
        java.lang.String str15 = classReader9.getSuperName();
        int int17 = classReader9.readInt(0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 78 + "'", int14 == 78);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
    }

    @Test
    public void test07775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07775");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        int int39 = classReader26.getAccess();
        java.lang.String str40 = classReader26.getSuperName();
        long long42 = classReader26.readLong(30);
        byte[] byteArray43 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader26.getItem(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1136895056675841L + "'", long42 == 1136895056675841L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07776");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        annotationVisitor74.visitEnum("L426422007", "L1287376048", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor74.visitAnnotation("L1936126716", "L1004763019");
        annotationVisitor81.visitEnd();
        annotationVisitor81.visitEnd();
        annotationVisitor81.visitEnum("L107203139", "L1462734294", "L853819367");
        annotationVisitor81.visitEnum("L1535870604", "L806334844", "L1441910664");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test07777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07777");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L264795169", "L680573325");
        classWriter1.visitSource("L1013343419", "L1142940414");
        int int31 = classWriter1.newUTF8("L2062266913");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L268449408", "L688061379", "L699137684", 141);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        byte[] byteArray63 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        java.lang.String str65 = classReader64.getSuperName();
        char[] charArray71 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj72 = classReader64.readConst(6, charArray71);
        int int74 = classReader64.readUnsignedShort((int) 'a');
        byte[] byteArray75 = classReader64.b;
        int int77 = classReader64.readUnsignedShort(0);
        java.lang.String[] strArray78 = classReader64.getInterfaces();
        byte[] byteArray79 = classReader64.b;
        // The following exception was thrown during execution in test generation
        try {
            int int80 = classWriter1.newConst((java.lang.Object) byteArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@5a5cb00f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + "\001" + "'", obj72, "\001");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 51966 + "'", int77 == 51966);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07778");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader27.readByte(131076);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 131076");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
    }

    @Test
    public void test07779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07779");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1601838046", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", false);
        int int20 = classWriter1.newNameType("L1611208075", "");
        classWriter1.visitInnerClass("L541901146", "", "L40714478", (int) (short) 7);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L275275934", true);
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07780");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.Object obj54 = label51.info;
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(5);
        classWriter56.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray61 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        int int64 = classReader62.readUnsignedShort((int) '#');
        int int66 = classReader62.readInt(7);
        java.lang.String str67 = classReader62.getSuperName();
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader62, 65536);
        short short71 = classReader62.readShort(12);
        java.lang.String str72 = classReader62.getSuperName();
        label51.info = str72;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12592 + "'", int64 == 12592);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1793 + "'", int66 == 1793);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) 2892 + "'", short71 == (short) 2892);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test07781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07781");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.getAccess();
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        short short35 = classReader26.readShort(2);
        int int36 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -17730 + "'", short35 == (short) -17730);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
    }

    @Test
    public void test07782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07782");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        java.lang.Object obj82 = label77.info;
        java.lang.String str83 = label77.toString();
        java.lang.String str84 = label77.toString();
        int int85 = label77.getOffset();
        java.lang.Object obj86 = label77.info;
        int int87 = label77.getOffset();
        int int88 = label77.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L54797950" + "'", str79, "L54797950");
        org.junit.Assert.assertNull(obj82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L54797950" + "'", str83, "L54797950");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L54797950" + "'", str84, "L54797950");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 8 + "'", int87 == 8);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
    }

    @Test
    public void test07783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07783");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 78);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        int int37 = classReader26.header;
        int int38 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(5);
        int int42 = classWriter40.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        classWriter40.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray63);
        byte[] byteArray66 = classWriter40.toByteArray();
        classWriter40.visitSource("L364320201", "");
        int int73 = classWriter40.newField("L566306334", "L1899714602", "L2120118268");
        org.mockito.asm.Attribute[] attributeArray74 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter40, attributeArray74, 82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
        org.junit.Assert.assertNotNull(attributeArray74);
    }

    @Test
    public void test07784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07784");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitVarInsn(5, 0);
        methodVisitor16.visitMultiANewArrayInsn("L161312276", 8);
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07785");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitInnerClass("L136145448", "L959574331", "L541901146", 8);
        int int73 = classWriter1.newField("L120720304", "L1745031302", "L1357812716");
        classWriter1.visitInnerClass("L946793861", "L1988321994", "L427241356", 190);
        int int81 = classWriter1.newNameType("L562296337", "L2014806404");
        classWriter1.visitInnerClass("L1757155508", "L1692352756", "L774045562", 1164862316);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 30 + "'", int81 == 30);
    }

    @Test
    public void test07786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07786");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitEnd();
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(5);
        classWriter22.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray27 = classWriter22.toByteArray();
        label20.info = byteArray27;
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader29, 1793);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader29, 202);
        java.lang.String[] strArray34 = classReader29.getInterfaces();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter37.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        int int69 = classWriter49.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter49.visitAnnotation("", true);
        byte[] byteArray73 = classWriter49.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        short short76 = classReader74.readShort((int) (byte) 0);
        int int78 = classReader74.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader74, 0);
        java.lang.String[] strArray81 = classReader74.getInterfaces();
        classWriter37.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray81);
        methodVisitor16.visitFrame((-889275714), (int) ' ', (java.lang.Object[]) strArray34, 256, (java.lang.Object[]) strArray81);
        methodVisitor16.visitTypeInsn(77, "L885125785");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short76 + "' != '" + (short) -13570 + "'", short76 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2560 + "'", int78 == 2560);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test07787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07787");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitVarInsn(5, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor16.visitAnnotationDefault();
        annotationVisitor32.visitEnd();
        annotationVisitor32.visitEnd();
        annotationVisitor32.visitEnd();
        annotationVisitor32.visitEnd();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter39.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter39.visitMethod(8, "hi!", "", "", strArray61);
        methodVisitor63.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        methodVisitor84.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label88 = new org.mockito.asm.Label();
        methodVisitor84.visitLabel(label88);
        java.lang.Object obj90 = label88.info;
        java.lang.Object obj91 = label88.info;
        methodVisitor63.visitLineNumber(51966, label88);
        java.lang.String str93 = label88.toString();
        annotationVisitor32.visit("L417267990", (java.lang.Object) str93);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L314216977" + "'", str93, "L314216977");
    }

    @Test
    public void test07788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07788");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader7, (int) '4');
        classWriter13.visitSource("L959574331", "L749737959");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        int int43 = classWriter23.newMethod("", "", "hi!", false);
        classWriter23.visitInnerClass("", "", "", (int) ' ');
        classWriter23.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray54 = classWriter23.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter23.visitAnnotation("L488861128", false);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        label62.info = strArray78;
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter23.visitMethod((int) (byte) 100, "L897597087", "L749737959", "L488861128", strArray78);
        classWriter13.visit(78, 18, "L1387910543", "L745089702", "L1962189950", strArray78);
        int int84 = classWriter13.newUTF8("L569030566");
        org.mockito.asm.Attribute attribute85 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter13.visitAttribute(attribute85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 15 + "'", int84 == 15);
    }

    @Test
    public void test07789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07789");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L428215077", "", "\001", (int) (byte) 100);
        classWriter1.visitOuterClass("L9401833", "L1058109766", "L755949095");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L1901444169", false);
        annotationVisitor21.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test07790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07790");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        java.lang.String str64 = label62.toString();
        label62.info = ' ';
        methodVisitor25.visitLineNumber((int) '#', label62);
        java.lang.Object obj68 = label62.info;
        java.lang.String str69 = label62.toString();
        int int70 = label62.getOffset();
        java.lang.Object obj71 = label62.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L1334141387" + "'", str64, "L1334141387");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + ' ' + "'", obj68, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "L1334141387" + "'", str69, "L1334141387");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + ' ' + "'", obj71, ' ');
    }

    @Test
    public void test07791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07791");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int5 = classWriter3.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter3.visitMethod(3, "hi!", "hi!", "hi!", strArray25);
        int int28 = classWriter1.newConst((java.lang.Object) "hi!");
        classWriter1.visitSource("L488861128", "L897597087");
        classWriter1.visitInnerClass("L624707113", "L728847777", "L1601838046", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L488861128", true);
        int int42 = classWriter1.newNameType("L318261776", "L684697689");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        int int75 = classReader73.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader73, (int) '4');
        long long79 = classReader73.readLong(2);
        int int80 = classReader73.getAccess();
        byte[] byteArray81 = classReader73.b;
        int int83 = classReader73.readInt(12);
        java.lang.String str84 = classReader73.getSuperName();
        java.lang.String[] strArray85 = classReader73.getInterfaces();
        java.lang.String[] strArray86 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter1.visitMethod(4, "L330454166", "L809431533", "L1967259122", strArray86);
        methodVisitor87.visitVarInsn((int) (short) -16896, 14);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 51966 + "'", int75 == 51966);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-4990551337079930870L) + "'", long79 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 458753 + "'", int83 == 458753);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
    }

    @Test
    public void test07792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07792");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        long long31 = classReader26.readLong(12);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 18);
        int int35 = classReader26.readUnsignedShort(18);
        long long37 = classReader26.readLong(9);
        byte[] byteArray38 = classReader26.b;
        short short40 = classReader26.readShort(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1970329148719976L + "'", long31 == 1970329148719976L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 872 + "'", int35 == 872);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 720857415473430785L + "'", long37 == 720857415473430785L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
    }

    @Test
    public void test07793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07793");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label16 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        label16.info = strArray32;
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod((int) (short) 100, "", "hi!", "", strArray32);
        classWriter1.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray32);
        int int38 = classWriter1.newUTF8("L809431533");
        classWriter1.visitOuterClass("L8293919", "L913773226", "L329147899");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
    }

    @Test
    public void test07794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07794");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        classWriter15.visitOuterClass("hi!", "", "");
        int int27 = classWriter15.newNameType("hi!", "hi!");
        int int29 = classWriter15.newUTF8("hi!");
        classWriter15.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter15.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        int int40 = classWriter15.newClass("L721083102");
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter15.visitField(21, "L1192381465", "L9401833", "L1178822359", (java.lang.Object) "L207820460");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(16842755, "L897597087", "L720530545", "L2085471365", (java.lang.Object) "L207820460");
        org.mockito.asm.Attribute attribute48 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor47.visitAttribute(attribute48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 19 + "'", int40 == 19);
        org.junit.Assert.assertNotNull(fieldVisitor46);
        org.junit.Assert.assertNotNull(fieldVisitor47);
    }

    @Test
    public void test07795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07795");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray32 = classReader26.b;
        int int33 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            long long35 = classReader26.readLong(2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
    }

    @Test
    public void test07796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07796");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray2);
        int int4 = classReader3.header;
        // The following exception was thrown during execution in test generation
        try {
            short short6 = classReader3.readShort(78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 78");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test07797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07797");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        classWriter35.visitOuterClass("L149220781", "L1386483578", "L1013343419");
        classWriter35.visitSource("L85690983", "L831655905");
        int int44 = classWriter35.newClass("L1793985281");
        int int46 = classWriter35.newClass("L1372769316");
        classWriter35.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 19 + "'", int46 == 19);
    }

    @Test
    public void test07798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07798");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor16.visitParameterAnnotation((int) (short) 2561, "L979622605", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07799");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        int int41 = classWriter1.newField("L1368708044", "L2037791973", "L535346328");
        classWriter1.visitOuterClass("L4531833", "L831655905", "L2045712064");
        byte[] byteArray46 = classWriter1.toByteArray();
        int int48 = classWriter1.newConst((java.lang.Object) "L853371719");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("", true);
        byte[] byteArray79 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        int int82 = classReader80.readUnsignedShort((int) (byte) 0);
        java.lang.String str83 = classReader80.getSuperName();
        long long85 = classReader80.readLong(12);
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter(classReader80, 18);
        int int89 = classReader80.readUnsignedShort(18);
        long long91 = classReader80.readLong(9);
        int int93 = classReader80.readUnsignedShort(82);
        java.lang.String[] strArray94 = classReader80.getInterfaces();
        classWriter1.visit(51, 872, "L2071158216", "L1726462062", "L1974467403", strArray94);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 28 + "'", int48 == 28);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 51966 + "'", int82 == 51966);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1970329148719976L + "'", long85 == 1970329148719976L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 872 + "'", int89 == 872);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 720857415473430785L + "'", long91 == 720857415473430785L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 28532 + "'", int93 == 28532);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test07800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07800");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        long long36 = classReader26.readLong(0);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader26.readByte((int) (short) 26729);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26729");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3819410108757049344L) + "'", long36 == (-3819410108757049344L));
    }

    @Test
    public void test07801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07801");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L92965801");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07802");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readUnsignedShort(29);
        long long36 = classReader26.readLong(16);
        int int38 = classReader26.readByte(141);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 512 + "'", int34 == 512);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 72061341013183488L + "'", long36 == 72061341013183488L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
    }

    @Test
    public void test07803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07803");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 32);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        short short71 = classReader69.readShort((int) (byte) 0);
        int int73 = classReader69.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader69, 0);
        int int76 = classReader69.getAccess();
        int int77 = classReader69.getAccess();
        java.lang.String[] strArray78 = classReader69.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter38.visitMethod(740402, "L1286020517", "L680573325", "L1800549256", strArray78);
        methodVisitor79.visitFieldInsn(32, "L152278810", "L978646804", "L1337199277");
        methodVisitor79.visitIincInsn(61, 62);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -13570 + "'", short71 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2560 + "'", int73 == 2560);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test07804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07804");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader30, (int) (short) 780);
        // The following exception was thrown during execution in test generation
        try {
            short short34 = classReader30.readShort(199680);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 199680");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07805");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        int int10 = classWriter1.newField("L488861128", "L1292845306", "L3043237");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", true);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 7, 0, 3, 1, 0, 11, 76, 49, 50, 57, 50, 56, 52, 53, 51, 48, 54, 1, 0, 8, 76, 51, 48, 52, 51, 50, 51, 55, 12, 0, 5, 0, 6, 9, 0, 4, 0, 7, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test07806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07806");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        int int55 = classReader53.readByte(7);
        java.lang.String[] strArray56 = classReader53.getInterfaces();
        long long58 = classReader53.readLong((int) (short) 2);
        int int60 = classReader53.readUnsignedShort(6);
        char[] charArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = classReader53.readClass(38, charArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26983");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-4990551337079930872L) + "'", long58 == (-4990551337079930872L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test07807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07807");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.header;
        short short41 = classReader26.readShort(7);
        java.lang.String[] strArray42 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = classReader26.readByte(170);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 170");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test07808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07808");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter27.visitAnnotation("hi!", false);
        annotationVisitor54.visitEnum("hi!", "", "hi!");
        annotationVisitor24.visit("", (java.lang.Object) "hi!");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter62.newMethod("", "", "hi!", true);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter62.visitMethod(0, "", "", "hi!", strArray76);
        int int82 = classWriter62.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter62.visitAnnotation("", true);
        byte[] byteArray86 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        int int89 = classReader87.readUnsignedShort((int) (byte) 0);
        java.lang.String str90 = classReader87.getSuperName();
        byte[] byteArray91 = classReader87.b;
        java.lang.String str92 = classReader87.getSuperName();
        int int93 = classReader87.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor24.visit("L578704316", (java.lang.Object) classReader87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@48d197be");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 51966 + "'", int89 == 51966);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test07809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07809");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String str37 = classReader26.getSuperName();
        byte[] byteArray38 = classReader26.b;
        long long40 = classReader26.readLong(78);
        long long42 = classReader26.readLong(38);
        java.lang.String str43 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 7296234291912270196L + "'", long40 == 7296234291912270196L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2891133133090932L + "'", long42 == 2891133133090932L);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test07810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07810");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 12);
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter13.visitField((int) (short) 3, "L264795169", "L1919588599", "L1984968925", (java.lang.Object) true);
        classWriter13.visitEnd();
        java.lang.Class<?> wildcardClass21 = classWriter13.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test07811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07811");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int30 = classReader26.readInt(78);
        int int31 = classReader26.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1698786926 + "'", int30 == 1698786926);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test07812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07812");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        annotationVisitor74.visitEnum("L426422007", "L1287376048", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor74.visitAnnotation("L1936126716", "L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = annotationVisitor74.visitArray("L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = annotationVisitor83.visitArray("L238476442");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = annotationVisitor85.visitAnnotation("L1223439170", "");
        annotationVisitor88.visitEnum("L1039728681", "L1970148580", "L2133586349");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test07813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07813");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        java.lang.String str34 = classReader26.getSuperName();
        int int36 = classReader26.readByte(0);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int38 = classReader26.getAccess();
        byte[] byteArray39 = classReader26.b;
        char[] charArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = classReader26.readUTF8(254, charArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 202 + "'", int36 == 202);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07814");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        java.lang.String[] strArray38 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter1.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray38);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("L665737352", false);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L152278810", "L141363326", "L1912967891");
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        int int74 = classWriter54.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter54.visitAnnotation("", true);
        byte[] byteArray78 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        short short81 = classReader79.readShort((int) (byte) 0);
        int int83 = classReader79.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter(classReader79, 0);
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter(classReader79, 0);
        org.mockito.asm.ClassWriter classWriter89 = new org.mockito.asm.ClassWriter(classReader79, (int) (byte) 100);
        long long91 = classReader79.readLong(104);
        short short93 = classReader79.readShort(0);
        short short95 = classReader79.readShort(40);
        java.lang.String[] strArray96 = classReader79.getInterfaces();
        classWriter1.visit(30, (-889275714), "L919303058", "L744974274", "L179737210", strArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short81 + "' != '" + (short) -13570 + "'", short81 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2560 + "'", int83 == 2560);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 281479271809031L + "'", long91 == 281479271809031L);
        org.junit.Assert.assertTrue("'" + short93 + "' != '" + (short) -13570 + "'", short93 == (short) -13570);
        org.junit.Assert.assertTrue("'" + short95 + "' != '" + (short) 17784 + "'", short95 == (short) 17784);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test07815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07815");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitInsn(254);
        methodVisitor25.visitInsn((int) (short) 12848);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test07816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07816");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        int int24 = classWriter1.newField("L1142940414", "L75359331", "L426422007");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(61);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader26.getItem(512);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 512");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 25, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 7, 0, 17, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 12, 0, 19, 0, 20, 9, 0, 18, 0, 21, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 23, 0, 0, 0, 4, 0, 8, 0, 10, 0, 24, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3180003184357425L + "'", long28 == 3180003184357425L);
    }

    @Test
    public void test07817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07817");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter1.visitAnnotation("L728847777", true);
        int int59 = classWriter1.newClass("L110679537");
        classWriter1.visitInnerClass("L1707932050", "L475528399", "L1458874009", (int) '4');
        byte[] byteArray65 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertNotNull(byteArray65);
    }

    @Test
    public void test07818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07818");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        long long38 = classReader26.readLong(100);
        java.lang.String str39 = classReader26.getSuperName();
        int int41 = classReader26.readByte(35);
        int int42 = classReader26.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test07819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07819");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMultiANewArrayInsn("L1930348385", (int) (byte) -1);
        methodVisitor16.visitVarInsn(6, 21);
        methodVisitor16.visitVarInsn(78, 40);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIincInsn(11, 655616);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor16.visitParameterAnnotation(1000814, "L1735602342", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test07820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07820");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        short short33 = classReader26.readShort((int) '#');
        byte[] byteArray34 = classReader26.b;
        int int35 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short37 = classReader26.readShort((int) (short) 17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17784");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 4 + "'", short33 == (short) 4);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test07821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07821");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        fieldVisitor45.visitEnd();
        fieldVisitor45.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = fieldVisitor45.visitAnnotation("L2037791973", true);
        fieldVisitor45.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = fieldVisitor45.visitAnnotation("L562296337", false);
        fieldVisitor45.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test07822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07822");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        int int31 = classReader26.readInt(4);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int61 = classReader59.readUnsignedShort((int) (byte) 0);
        short short63 = classReader59.readShort(7);
        int int64 = classReader59.header;
        int int66 = classReader59.readInt(19);
        char[] charArray71 = new char[] { '4', '#', '#' };
        java.lang.String str72 = classReader59.readUTF8(14, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = classReader26.readUTF8(56, charArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 51966 + "'", int61 == 51966);
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 0 + "'", short63 == (short) 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 90 + "'", int64 == 90);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1751720204 + "'", int66 == 1751720204);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test07823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07823");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        classWriter39.visitOuterClass("L1358038794", "L1221801792", "L1171524151");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter39.visitAnnotation("L1223439170", false);
        classWriter39.visitInnerClass("L1923289293", "L859506825", "L120713780", 186);
        int int53 = classWriter39.newClass("L1962189950");
        int int56 = classWriter39.newNameType("L1058109766", "L1750086343");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 25 + "'", int56 == 25);
    }

    @Test
    public void test07824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07824");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter15.visitMethod(8, "hi!", "", "", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter15.visitAnnotation("hi!", false);
        byte[] byteArray43 = classWriter15.toByteArray();
        int int45 = classWriter15.newUTF8("L488861128");
        classWriter15.visitOuterClass("", "L976656549", "L1669912474");
        int int51 = classWriter15.newClass("L1471680267");
        classWriter15.visitInnerClass("L976656549", "L1628304347", "L81546457", 63);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        int int83 = classWriter63.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter63.visitAnnotation("", true);
        byte[] byteArray87 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        int int89 = classReader88.getAccess();
        int int91 = classReader88.readUnsignedShort(23);
        java.lang.String str92 = classReader88.getSuperName();
        int int93 = classReader88.getAccess();
        java.lang.String[] strArray94 = classReader88.getInterfaces();
        classWriter15.visit(611177, 6, "L817273435", "", "L1266856712", strArray94);
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter1.visitMethod((int) '#', "L170800745", "L30632432", "L1766371387", strArray94);
        methodVisitor96.visitIincInsn((int) (short) 2561, 17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 13 + "'", int51 == 13);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(methodVisitor96);
    }

    @Test
    public void test07825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07825");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMultiANewArrayInsn("L2059908172", (-21316096));
        methodVisitor25.visitVarInsn(24, 20);
        java.lang.Class<?> wildcardClass50 = methodVisitor25.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test07826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07826");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitInsn(0);
        methodVisitor16.visitInsn(167772672);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07827");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        int int70 = classWriter1.newField("L1358038794", "L415508906", "L1028510473");
        int int73 = classWriter1.newNameType("L81436625", "L1749810196");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 18 + "'", int70 == 18);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 21 + "'", int73 == 21);
    }

    @Test
    public void test07828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07828");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long41 = classReader26.readLong(22);
        int int43 = classReader26.readInt(34);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = classReader26.readLong(808597809);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 864692228017815554L + "'", long41 == 864692228017815554L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 33555457 + "'", int43 == 33555457);
    }

    @Test
    public void test07829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07829");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int9 = classWriter1.newUTF8("L26905596");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test07830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07830");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        methodVisitor16.visitIntInsn(51966, 117440769);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07831");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMaxs(51966, 12);
        methodVisitor25.visitFieldInsn((int) (short) 100, "L1076056118", "L1330884173", "L1223439170");
        methodVisitor25.visitMethodInsn((int) 'a', "L650167216", "L1430234734", "L295165602");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor25.visitParameterAnnotation(139, "L318261776", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test07832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07832");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        int int34 = classReader33.getAccess();
        byte[] byteArray35 = classReader33.b;
        byte[] byteArray36 = classReader33.b;
        byte[] byteArray37 = classReader33.b;
        java.lang.String[] strArray38 = classReader33.getInterfaces();
        classWriter1.visit(0, 13, "L590888141", "", "L1413182688", strArray38);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("L1128221601", false);
        classWriter1.visitSource("L1333287168", "L1010900501");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test07833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07833");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader7, 6);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter11.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod(8, "hi!", "", "", strArray33);
        classWriter11.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter46.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter46.visitMethod(8, "hi!", "", "", strArray68);
        classWriter11.visit(8, 8, "L2000102916", "", "hi!", strArray68);
        classWriter11.visitOuterClass("L9401833", "L1142940414", "L128451051");
        int int76 = classWriter9.newConst((java.lang.Object) "L1142940414");
        int int79 = classWriter9.newNameType("L1076056118", "L972384730");
        org.mockito.asm.Attribute attribute80 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter9.visitAttribute(attribute80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 6 + "'", int79 == 6);
    }

    @Test
    public void test07834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07834");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        java.lang.String str32 = classReader26.getSuperName();
        short short34 = classReader26.readShort(0);
        byte[] byteArray35 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            long long37 = classReader26.readLong(909717811);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) -13570 + "'", short34 == (short) -13570);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07835");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        byte[] byteArray9 = classReader8.b;
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader8, 21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = classReader8.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07836");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        methodVisitor41.visitVarInsn(27, 47806);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test07837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07837");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((int) (byte) -1, 0);
        methodVisitor16.visitMethodInsn(18, "L531876647", "L1901444169", "");
        methodVisitor16.visitFieldInsn(29441, "L1179077469", "L1021454555", "L1338936470");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07838");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotation("L1076056118", true);
        org.mockito.asm.Attribute attribute44 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test07839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07839");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor34.visitArray("\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor36.visitArray("L693982720");
        annotationVisitor38.visitEnum("", "L1075066296", "L1520330258");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        classWriter45.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter45.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter59.newConst((java.lang.Object) (byte) 0);
        int int62 = classWriter45.newConst((java.lang.Object) int61);
        int int66 = classWriter45.newField("hi!", "", "L809431533");
        java.lang.String[] strArray76 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter45.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray76);
        int int81 = classWriter45.newField("L680573325", "L242883751", "L636727990");
        java.lang.Class<?> wildcardClass82 = classWriter45.getClass();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor38.visit("L1467932022", (java.lang.Object) classWriter45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@6213c827");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 22 + "'", int81 == 22);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test07840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07840");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 4);
        java.lang.String str40 = classReader26.getSuperName();
        int int41 = classReader26.header;
        java.lang.String[] strArray42 = classReader26.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test07841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07841");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        int int24 = classWriter1.newField("L1142940414", "L75359331", "L426422007");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L918742398", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter1.visitAnnotation("L905591693", false);
        int int34 = classWriter1.newField("L1756084046", "L2037699670", "L1921354976");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 30 + "'", int34 == 30);
    }

    @Test
    public void test07842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07842");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(872);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int9 = classWriter7.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter7.visitMethod(8, "hi!", "", "", strArray29);
        methodVisitor31.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitTypeInsn((int) (byte) 100, "");
        methodVisitor31.visitLdcInsn((java.lang.Object) (byte) 100);
        methodVisitor31.visitVarInsn(12, (-1107296256));
        methodVisitor31.visitFieldInsn(10, "L418802221", "L40714478", "L2045712064");
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter1.visitField(1793, "L1789245551", "L1774908040", "L552318631", (java.lang.Object) "L418802221");
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = fieldVisitor69.visitAnnotation("L149220781", true);
        fieldVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = fieldVisitor69.visitAnnotation("L2034910382", true);
        org.mockito.asm.Attribute attribute77 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor69.visitAttribute(attribute77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test07843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07843");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitInsn(63);
        methodVisitor16.visitMaxs(16842755, 65210);
        methodVisitor16.visitIntInsn(20, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor40.visitAnnotation("L598854286", "L1686860563");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test07844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07844");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        int int36 = classWriter1.newMethod("L59063553", "L809431533", "L275489687", false);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        short short69 = classReader67.readShort((int) (byte) 0);
        int int71 = classReader67.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader67, 0);
        int int74 = classReader67.getAccess();
        java.lang.String str75 = classReader67.getSuperName();
        int int77 = classReader67.readInt((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter1.visitField(13, "L817273435", "L442162059", "L1726462062", (java.lang.Object) (byte) 1);
        classWriter1.visitOuterClass("L1589078908", "L1566658664", "L1111133036");
        classWriter1.visitOuterClass("L2123529539", "L1368800213", "L1769982856");
        int int89 = classWriter1.newNameType("L1962138618", "L1202802091");
        classWriter1.visitInnerClass("L1967259122", "L238916694", "L482405892", 101);
        classWriter1.visitInnerClass("L1224491373", "L1368800213", "L799761587", 12850);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) -13570 + "'", short69 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2560 + "'", int71 == 2560);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-21316096) + "'", int77 == (-21316096));
        org.junit.Assert.assertNotNull(fieldVisitor78);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 28 + "'", int89 == 28);
    }

    @Test
    public void test07845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07845");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        int int6 = classWriter1.newMethod("L275489687", "L275489687", "L275489687", false);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label13 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        label13.info = strArray29;
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter8.visitMethod((int) (short) 100, "", "hi!", "", strArray29);
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter8.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = fieldVisitor38.visitAnnotation("L2000102916", false);
        int int42 = classWriter1.newConst((java.lang.Object) false);
        classWriter1.visitInnerClass("L680573325", "hi!", "", 100);
        int int49 = classWriter1.newClass("L693982720");
        classWriter1.visitOuterClass("L1048424892", "L414874932", "L780726187");
        org.mockito.asm.Attribute attribute54 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
    }

    @Test
    public void test07846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07846");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        long long35 = classReader26.readLong(61);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        int int37 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            long long39 = classReader26.readLong(1851880565);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7278098581565042292L + "'", long35 == 7278098581565042292L);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
    }

    @Test
    public void test07847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07847");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        java.lang.String str33 = classReader29.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader29.readByte(554434561);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 554434561");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test07848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07848");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 14);
        classWriter31.visitSource("L120720304", "L2039587225");
        int int37 = classWriter31.newNameType("L1307358075", "L2117999297");
        byte[] byteArray38 = classWriter31.toByteArray();
        classWriter31.visitInnerClass("L376030729", "L1849327085", "L2051706745", 101);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter49.visitEnd();
        int int53 = classWriter49.newNameType("", "L172254079");
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter60.newConst((java.lang.Object) (short) 1);
        classWriter60.visitSource("", "L2000102916");
        int int70 = classWriter60.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray71 = classWriter60.toByteArray();
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(0);
        int int84 = classWriter79.newMethod("", "", "hi!", true);
        java.lang.String[] strArray93 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter79.visitMethod(0, "", "", "hi!", strArray93);
        label77.info = strArray93;
        classWriter60.visit(26, (int) (byte) 10, "L2022616480", "L426422007", "L2089731244", strArray93);
        classWriter49.visit(2, 9, "L1287617384", "L541901146", "L1847716459", strArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor98 = classWriter31.visitMethod(190, "L1530728970", "L322683921", "L1505866272", strArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 49, 50, 48, 55, 50, 48, 51, 48, 52, 1, 0, 11, 76, 49, 51, 48, 55, 51, 53, 56, 48, 55, 53, 1, 0, 11, 76, 50, 49, 49, 55, 57, 57, 57, 50, 57, 55, 12, 0, 11, 0, 12, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 2, 0, 10, 0, 15, 0, 0, 0, 11, 76, 50, 48, 51, 57, 53, 56, 55, 50, 50, 53]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test07849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07849");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L2072202085");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07850");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.header;
        byte[] byteArray33 = classReader26.b;
        java.lang.String str34 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test07851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07851");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = classReader26.getItem(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
    }

    @Test
    public void test07852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07852");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 13063);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int9 = classWriter7.newConst((java.lang.Object) (short) 1);
        classWriter7.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter7.visitAnnotation("L529122729", false);
        classWriter7.visitSource("L1162526488", "L1287376048");
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int30 = classWriter25.newMethod("", "", "hi!", true);
        classWriter25.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter25.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter39.newConst((java.lang.Object) (byte) 0);
        int int42 = classWriter25.newConst((java.lang.Object) int41);
        classWriter25.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter25.visitSource("L264795169", "L680573325");
        classWriter25.visitSource("L1013343419", "L1142940414");
        int int55 = classWriter25.newUTF8("L2062266913");
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        int int81 = classWriter61.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter61.visitAnnotation("", true);
        byte[] byteArray85 = classWriter61.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int88 = classReader86.readUnsignedShort((int) (byte) 0);
        short short90 = classReader86.readShort(7);
        int int91 = classReader86.header;
        java.lang.String[] strArray92 = classReader86.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter25.visitMethod(12592, "L897597087", "L1076056118", "L1028579140", strArray92);
        classWriter7.visit((int) (short) -17730, 611177, "L2015149232", "L786384091", "L2100143944", strArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor95 = classWriter1.visitMethod((int) (byte) 10, "L778646282", "L740042223", "L2039247828", strArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51966 + "'", int88 == 51966);
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) 0 + "'", short90 == (short) 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 90 + "'", int91 == 90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor93);
    }

    @Test
    public void test07853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07853");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitVarInsn(26, 12);
        methodVisitor16.visitEnd();
        methodVisitor16.visitMethodInsn(13365, "L1716197211", "L1716197211", "L402550819");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test07854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07854");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int38 = classReader26.header;
        int int40 = classReader26.readInt((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray66, 0, 202);
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader71, (int) (short) 780);
        int int75 = classWriter73.newClass("L295165602");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter73, 110);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-889275714) + "'", int40 == (-889275714));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 11 + "'", int75 == 11);
    }

    @Test
    public void test07855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07855");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1601838046", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("L9401833", "L890847236");
        classWriter1.visitInnerClass("L897597087", "L1769475365", "L976656549", 3);
        int int27 = classWriter1.newUTF8("");
        classWriter1.visitOuterClass("L236901646", "L1585041277", "L1696526501");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test07856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07856");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitIincInsn(1694564377, 1694564377);
        methodVisitor25.visitMaxs(1034, 186);
        methodVisitor25.visitMaxs(1536, 141);
        methodVisitor25.visitIincInsn(554434561, 24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
    }

    @Test
    public void test07857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07857");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        int int87 = label83.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
    }

    @Test
    public void test07858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07858");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        byte[] byteArray37 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L636727990", "", "L897597087");
        int int44 = classWriter1.newNameType("L866310707", "L1004763019");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
    }

    @Test
    public void test07859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07859");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray12, (int) (short) 100, (-21316096));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = classReader18.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 133");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
    }

    @Test
    public void test07860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07860");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIntInsn(186, 779);
        methodVisitor51.visitCode();
        methodVisitor51.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
    }

    @Test
    public void test07861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07861");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitIincInsn((int) (short) 100, (int) (short) -1);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor50.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor50.visitInsn((int) (byte) 0);
        methodVisitor50.visitMaxs(0, (int) (byte) 0);
        methodVisitor50.visitMultiANewArrayInsn("L1611208075", 16);
        methodVisitor50.visitIincInsn(33, 7);
        methodVisitor50.visitTypeInsn(27, "L1413182688");
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor50.visitJumpInsn(1793, label76);
        methodVisitor25.visitJumpInsn(51, label76);
        methodVisitor25.visitVarInsn(12336, 161);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
    }

    @Test
    public void test07862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07862");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter16.visitAnnotation("L636727990", false);
        classWriter16.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter16.visitAnnotation("L535346328", true);
        classWriter16.visitOuterClass("L1429849124", "L1583234446", "L782129665");
        classWriter16.visitSource("", "L313281740");
        // The following exception was thrown during execution in test generation
        try {
            classReader13.accept((org.mockito.asm.ClassVisitor) classWriter16, (int) (short) 25445);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test07863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07863");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        classWriter23.visitSource("", "");
        label20.info = "";
        int int30 = label20.getOffset();
        java.lang.String str31 = label20.toString();
        java.lang.Object obj32 = label20.info;
        int int33 = label20.getOffset();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter35.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        short short74 = classReader72.readShort((int) (byte) 0);
        int int76 = classReader72.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(classReader72, 0);
        java.lang.String[] strArray79 = classReader72.getInterfaces();
        classWriter35.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray79);
        classWriter35.visitSource("L1931763549", "");
        label20.info = "L1931763549";
        java.lang.Object obj85 = label20.info;
        java.lang.String str86 = label20.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "L164869891" + "'", str31, "L164869891");
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "" + "'", obj32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -13570 + "'", short74 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2560 + "'", int76 == 2560);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertEquals("'" + obj85 + "' != '" + "L1931763549" + "'", obj85, "L1931763549");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L164869891" + "'", str86, "L164869891");
    }

    @Test
    public void test07864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07864");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        classWriter31.visitInnerClass("L531876647", "L1627366687", "L95180820", 13);
        java.lang.Class<?> wildcardClass37 = classWriter31.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test07865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07865");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        int int37 = classReader26.getAccess();
        java.lang.String str38 = classReader26.getSuperName();
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader26.readInt(67174410);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test07866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07866");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L1969123537", false);
        int int11 = classWriter1.newUTF8("L1583234446");
        classWriter1.visitOuterClass("L350064964", "L2060454443", "L359615865");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test07867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07867");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int29 = classReader26.readInt(82);
        int int31 = classReader26.readUnsignedShort(0);
        int int33 = classReader26.readInt(100);
        short short35 = classReader26.readShort(36);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.readUnsignedShort(262400);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1869898100 + "'", int29 == 1869898100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 51966 + "'", int31 == 51966);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65536 + "'", int33 == 65536);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 1025 + "'", short35 == (short) 1025);
    }

    @Test
    public void test07868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07868");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor16.visitAnnotation("L172254079", true);
        annotationVisitor33.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test07869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07869");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor43.visitCode();
        methodVisitor43.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        methodVisitor43.visitLineNumber((int) (short) -1, label74);
        label74.info = (-1.0f);
        methodVisitor25.visitLineNumber(19, label74);
        methodVisitor25.visitMultiANewArrayInsn("L959574331", (int) 'a');
        methodVisitor25.visitIincInsn(167837696, 9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L1678157446" + "'", str76, "L1678157446");
    }

    @Test
    public void test07870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07870");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        java.lang.String str34 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 10);
        int int38 = classReader26.readUnsignedShort((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = classReader26.readLong(204);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 256 + "'", int38 == 256);
    }

    @Test
    public void test07871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07871");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray50, 0, 21);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter55.newConst((java.lang.Object) (byte) 0);
        int int61 = classWriter55.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray62 = classWriter55.toByteArray();
        int int67 = classWriter55.newMethod("L667379532", "L1628304347", "L2059908172", false);
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter55, 38);
        classWriter55.visitSource("L146399554", "L278038742");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter55.visitAnnotation("L325385758", false);
        int int78 = classWriter55.newNameType("L1888920892", "L489036559");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 13 + "'", int67 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 25 + "'", int78 == 25);
    }

    @Test
    public void test07872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07872");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor44.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        methodVisitor44.visitJumpInsn((-1), label70);
        methodVisitor17.visitJumpInsn((int) '#', label70);
        java.lang.Object obj74 = label70.info;
        int int75 = label70.getOffset();
        java.lang.Object obj76 = label70.info;
        int int77 = label70.getOffset();
        int int78 = label70.getOffset();
        java.lang.Object obj79 = label70.info;
        int int80 = label70.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test07873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07873");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitIntInsn((int) (short) 1, (int) (byte) 0);
        methodVisitor25.visitCode();
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test07874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07874");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        java.lang.Object obj79 = label75.info;
        java.lang.String str80 = label75.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNull(obj79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L910977500" + "'", str80, "L910977500");
    }

    @Test
    public void test07875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07875");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        int int31 = classReader26.getAccess();
        int int33 = classReader26.readByte(32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test07876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07876");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int37 = classWriter32.newMethod("L1004763019", "L120720304", "L636727990", true);
        int int39 = classWriter32.newClass("L959574331");
        classWriter32.visitSource("L361667728", "L1385221869");
        classWriter32.visitOuterClass("L1595656597", "L964927155", "L1276186268");
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter53.newConst((java.lang.Object) (short) 1);
        int int57 = classWriter53.newUTF8("hi!");
        classWriter53.visitInnerClass("L207820460", "", "L500545133", 100);
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter53.visitField(12850, "L826610285", "L62360881", "L1430234734", (java.lang.Object) "L1589078908");
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(5);
        classWriter76.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray81 = classWriter76.toByteArray();
        label74.info = byteArray81;
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray81);
        int int85 = classReader83.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter(classReader83, 12);
        int int88 = classReader83.header;
        java.lang.String str89 = classReader83.getSuperName();
        java.lang.String[] strArray90 = classReader83.getInterfaces();
        classWriter53.visit(19506, 458753, "L976618452", "L1221801792", "L815303353", strArray90);
        classWriter32.visit(842151478, 105, "L334680853", "L1994300814", "L1317681080", strArray90);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 78 + "'", int88 == 78);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray90);
    }

    @Test
    public void test07877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07877");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        int int35 = classWriter1.newField("L552318631", "L1853344835", "L1046040632");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 13 + "'", int35 == 13);
    }

    @Test
    public void test07878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07878");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor21.visitAnnotation("L535346328", "L976656549");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        int int47 = classWriter27.newMethod("", "", "hi!", false);
        classWriter27.visitInnerClass("", "", "", (int) ' ');
        classWriter27.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter27.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int64 = classWriter27.newNameType("L749737959", "L1601838046");
        classWriter27.visitInnerClass("L2000102916", "L1028579140", "", 100);
        classWriter27.visitSource("L59063553", "L1497855016");
        int int74 = classWriter27.newUTF8("L1605224709");
        annotationVisitor24.visit("L871448529", (java.lang.Object) int74);
        annotationVisitor24.visitEnum("L1004112457", "\000", "L179737210");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = annotationVisitor24.visitAnnotation("L1208026886", "L214240977");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 15 + "'", int64 == 15);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20 + "'", int74 == 20);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test07879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07879");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        methodVisitor16.visitVarInsn((int) (short) 1, 1698786926);
        methodVisitor16.visitIincInsn(34, 3072);
        methodVisitor16.visitTypeInsn(3, "L1583234446");
        methodVisitor16.visitInsn(19);
        methodVisitor16.visitMaxs((int) (short) 25445, 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test07880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07880");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int35 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.readUnsignedShort((int) (short) 21359);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test07881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07881");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("L1601838046", "L75359331", "L1847716459", 4);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter24.newMethod("", "", "hi!", true);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter24.visitMethod(0, "", "", "hi!", strArray38);
        int int44 = classWriter24.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter24.visitAnnotation("", true);
        byte[] byteArray48 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        short short51 = classReader49.readShort((int) (byte) 0);
        int int53 = classReader49.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(classReader49, 0);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader49, 0);
        int int59 = classReader49.getItem(2);
        java.lang.String[] strArray60 = classReader49.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter1.visitMethod(48640, "L1292845306", "L1619769466", "L95180820", strArray60);
        classWriter1.visitInnerClass("L550889567", "L341764360", "L1827009202", 2816);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) -13570 + "'", short51 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2560 + "'", int53 == 2560);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 14 + "'", int59 == 14);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
    }

    @Test
    public void test07882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07882");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        java.lang.Object obj69 = classReader26.readConst(3, charArray67);
        byte[] byteArray70 = classReader26.b;
        java.lang.String str71 = classReader26.getSuperName();
        int int73 = classReader26.readInt(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "hi!" + "'", obj69, "hi!");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-889275714) + "'", int73 == (-889275714));
    }

    @Test
    public void test07883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07883");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute13 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
    }

    @Test
    public void test07884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07884");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader36.readByte(2048);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2048");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07885");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        int int37 = classReader26.getAccess();
        java.lang.String str38 = classReader26.getSuperName();
        byte[] byteArray39 = classReader26.b;
        int int41 = classReader26.readInt(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-889275714) + "'", int41 == (-889275714));
    }

    @Test
    public void test07886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07886");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitInnerClass("L1497855016", "L2037791973", "L1028579140", 11);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter1.visitAnnotation("L1221801792", true);
        int int74 = classWriter1.newConst((java.lang.Object) 1126999590795363L);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter1.visitAnnotation("L1471680267", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = annotationVisitor77.visitAnnotation("L1223439170", "L1750086343");
        annotationVisitor77.visitEnum("L862723850", "L1778006779", "L1611208075");
        annotationVisitor77.visitEnd();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 18 + "'", int74 == 18);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test07887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07887");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        java.lang.String str82 = label77.toString();
        int int83 = label77.getOffset();
        java.lang.String str84 = label77.toString();
        int int85 = label77.getOffset();
        java.lang.String str86 = label77.toString();
        java.lang.String str87 = label77.toString();
        java.lang.String str88 = label77.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L2137629854" + "'", str79, "L2137629854");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L2137629854" + "'", str82, "L2137629854");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L2137629854" + "'", str84, "L2137629854");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L2137629854" + "'", str86, "L2137629854");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L2137629854" + "'", str87, "L2137629854");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L2137629854" + "'", str88, "L2137629854");
    }

    @Test
    public void test07888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07888");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitFieldInsn(0, "L1162526488", "L1601838046", "");
        methodVisitor62.visitMultiANewArrayInsn("L2069898161", 12);
        methodVisitor62.visitCode();
        methodVisitor62.visitIntInsn(29, 29);
        methodVisitor62.visitMultiANewArrayInsn("", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor62.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test07889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07889");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.Label label27 = null;
        org.mockito.asm.Label label28 = null;
        org.mockito.asm.Label label29 = null;
        methodVisitor16.visitTryCatchBlock(label27, label28, label29, "hi!");
        methodVisitor16.visitIntInsn(1, 0);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        classWriter38.visitSource("", "");
        int int47 = classWriter38.newField("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter38.visitAnnotation("L1370122910", false);
        classWriter38.visitOuterClass("L755844592", "L1317000137", "L1553193067");
        classWriter38.visitSource("L982702597", "L436759653");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn((java.lang.Object) classWriter38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@660e125a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test07890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07890");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int34 = classReader26.header;
        short short36 = classReader26.readShort(0);
        int int38 = classReader26.readByte((int) (byte) 100);
        int int39 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader26.readByte(254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test07891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07891");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        char[] charArray38 = new char[] { '4', '#', '#' };
        java.lang.String str39 = classReader26.readUTF8(14, charArray38);
        byte[] byteArray40 = classReader26.b;
        java.lang.String str41 = classReader26.getSuperName();
        java.lang.String str42 = classReader26.getSuperName();
        java.lang.String str43 = classReader26.getSuperName();
        int int45 = classReader26.readByte((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 25968);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test07892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07892");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        classWriter34.visitSource("L1952894981", "L1429849124");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter43.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter43.visitMethod(8, "hi!", "", "", strArray65);
        methodVisitor67.visitIntInsn((int) (short) 1, 6);
        methodVisitor67.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = methodVisitor67.visitAnnotation("hi!", false);
        methodVisitor67.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor67.visitIincInsn(90, 6);
        methodVisitor67.visitEnd();
        methodVisitor67.visitFieldInsn((int) '#', "L590888141", "L146399554", "L415508906");
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter34.visitField(1694564377, "", "L721083102", "L1936126716", (java.lang.Object) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = classWriter34.visitAnnotation("L1579135061", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(fieldVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test07893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07893");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L242883751", true);
        int int31 = classWriter1.newNameType("L1017623370", "L1004763019");
        classWriter1.visitInnerClass("L2097292751", "L500545133", "L890847236", 0);
        int int41 = classWriter1.newMethod("L922112985", "L693982720", "L767455006", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
    }

    @Test
    public void test07894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07894");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L535346328", "L535346328");
        classWriter1.visitSource("L2127085380", "L1700698598");
        int int71 = classWriter1.newMethod("L85145148", "L936297181", "L1757134939", true);
        classWriter1.visitInnerClass("L710635264", "L1162526488", "", 199680);
        org.mockito.asm.Attribute attribute77 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 15 + "'", int71 == 15);
    }

    @Test
    public void test07895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07895");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter22.newConst((java.lang.Object) (short) 1);
        classWriter22.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter22.visitAnnotation("L529122729", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(5);
        classWriter33.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray38 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        int int41 = classReader39.readUnsignedShort((int) '#');
        byte[] byteArray42 = classReader39.b;
        int int44 = classReader39.readByte(1);
        annotationVisitor30.visit("L684697689", (java.lang.Object) int44);
        int int46 = classWriter1.newConst((java.lang.Object) int44);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter52.visitAnnotation("L75359331", false);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter62.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int75 = classWriter70.newMethod("", "", "hi!", true);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter70.visitMethod(0, "", "", "hi!", strArray84);
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter62.visitMethod(3, "hi!", "hi!", "hi!", strArray84);
        classWriter52.visit(23, 18, "L1223439170", "L1178822359", "L665737352", strArray84);
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod((int) (short) 8460, "L1498837454", "L1028510473", "L523453504", strArray84);
        methodVisitor88.visitMultiANewArrayInsn("L1705966817", 17784);
        methodVisitor88.visitMultiANewArrayInsn("L379676708", 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12592 + "'", int41 == 12592);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 254 + "'", int44 == 254);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 14 + "'", int46 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodVisitor85);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(methodVisitor88);
    }

    @Test
    public void test07896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07896");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1847716459", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        short short61 = classReader59.readShort((int) (byte) 0);
        int int63 = classReader59.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader59, 0);
        java.lang.String[] strArray66 = classReader59.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(2560, "L1028579140", "L59063553", "hi!", strArray66);
        int int70 = classWriter1.newNameType("L2133258398", "L897597087");
        classWriter1.visitSource("L26244550", "L1952894981");
        classWriter1.visitOuterClass("L1619769466", "L1952977388", "L2142211483");
        int int81 = classWriter1.newField("L831655905", "L475038998", "L278038742");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) -13570 + "'", short61 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2560 + "'", int63 == 2560);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 21 + "'", int81 == 21);
    }

    @Test
    public void test07897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07897");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitIincInsn((int) (byte) 10, (int) (short) 1792);
        methodVisitor25.visitMaxs(26729, 18);
        methodVisitor25.visitIntInsn((int) (short) 12848, 19506);
        methodVisitor25.visitInsn(156461415);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test07898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07898");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (short) 1);
        classWriter40.visitSource("", "L2000102916");
        int int50 = classWriter40.newMethod("", "L2062266913", "L809431533", false);
        classWriter40.visitEnd();
        classWriter40.visitOuterClass("hi!", "L809431533", "L636727990");
        byte[] byteArray56 = classWriter40.toByteArray();
        annotationVisitor28.visit("L1715729238", (java.lang.Object) byteArray56);
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray56);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader58, 7);
        int int61 = classReader58.getAccess();
        int int63 = classReader58.readUnsignedShort((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = classReader58.readUnsignedShort(3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 12, 0, 5, 0, 10, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 2, 0, 2, 0, 13, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 0, 14, 0, 0, 0, 4, 0, 9, 0, 11]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 768 + "'", int63 == 768);
    }

    @Test
    public void test07899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07899");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int9 = classWriter1.newNameType("L1009580268", "L2100143944");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String str42 = classReader41.getSuperName();
        char[] charArray48 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj49 = classReader41.readConst(6, charArray48);
        int int51 = classReader41.readUnsignedShort((int) 'a');
        byte[] byteArray52 = classReader41.b;
        java.lang.String str53 = classReader41.getSuperName();
        byte[] byteArray54 = classReader41.b;
        java.lang.String[] strArray55 = classReader41.getInterfaces();
        classWriter1.visit(28532, (int) (short) 100, "L1157099023", "L81436625", "L720530545", strArray55);
        org.mockito.asm.Attribute attribute57 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "\001" + "'", obj49, "\001");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test07900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07900");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotation("L242883751", false);
        methodVisitor25.visitVarInsn(9, (int) (byte) 100);
        methodVisitor25.visitIincInsn(63, 254);
        methodVisitor25.visitMethodInsn((int) (byte) 1, "L152278810", "", "L939302844");
        methodVisitor25.visitVarInsn(0, 20);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = methodVisitor25.visitAnnotation("L1009580268", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor55);
    }

    @Test
    public void test07901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07901");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        methodVisitor33.visitCode();
        methodVisitor33.visitIntInsn(26729, 51966);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = methodVisitor33.visitAnnotation("L199336802", true);
        annotationVisitor40.visitEnd();
        annotationVisitor40.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test07902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07902");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int26 = classWriter1.newField("L430363814", "L918742398", "L989364881");
        byte[] byteArray27 = classWriter1.toByteArray();
        int int29 = classWriter1.newClass("L805282072");
        classWriter1.visitInnerClass("L85145148", "L238640077", "L914282524", 36);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String str66 = classReader65.getSuperName();
        int int67 = classReader65.header;
        java.lang.String[] strArray68 = classReader65.getInterfaces();
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader65, 12592);
        int int71 = classReader65.header;
        short short73 = classReader65.readShort((int) (short) 100);
        int int75 = classReader65.readInt(11);
        java.lang.String[] strArray76 = classReader65.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter1.visitMethod(141, "L1251610657", "L1605942905", "L1853344835", strArray76);
        methodVisitor77.visitMaxs(0, 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 76, 52, 51, 48, 51, 54, 51, 56, 49, 52, 7, 0, 7, 1, 0, 10, 76, 57, 49, 56, 55, 52, 50, 51, 57, 56, 1, 0, 10, 76, 57, 56, 57, 51, 54, 52, 56, 56, 49, 12, 0, 9, 0, 10, 9, 0, 8, 0, 11, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 14, 0, 0, 0, 2, 0, 3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 90 + "'", int67 == 90);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 90 + "'", int71 == 90);
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) 1 + "'", short73 == (short) 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1792 + "'", int75 == 1792);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
    }

    @Test
    public void test07903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07903");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        java.lang.String str34 = classReader26.getSuperName();
        int int36 = classReader26.readInt((int) (byte) 1);
        long long38 = classReader26.readLong(3);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor39, (-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-21316096) + "'", int36 == (-21316096));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-4755801206503241215L) + "'", long38 == (-4755801206503241215L));
    }

    @Test
    public void test07904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07904");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        int int53 = classWriter1.newUTF8("L1221801792");
        classWriter1.visitInnerClass("L1028579140", "L535346328", "L728847777", (int) '#');
        classWriter1.visitSource("L1028579140", "L1358038794");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
    }

    @Test
    public void test07905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07905");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        classWriter36.visitInnerClass("L59063553", "L426422007", "L1292845306", 3);
        classWriter36.visitEnd();
        int int47 = classWriter36.newMethod("L40714478", "L288314649", "L84564479", false);
        int int52 = classWriter36.newMethod("L829519303", "L975788322", "L1256567156", false);
        int int57 = classWriter36.newMethod("L1093218044", "L1268109548", "L1127712874", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 26 + "'", int52 == 26);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
    }

    @Test
    public void test07906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07906");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        methodVisitor16.visitMaxs(0, 254);
        methodVisitor16.visitInsn((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        int int42 = classWriter30.newNameType("hi!", "hi!");
        int int44 = classWriter30.newUTF8("hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) int44);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test07907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07907");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        int int35 = classWriter1.newNameType("L728847777", "hi!");
        int int37 = classWriter1.newClass("L664111037");
        classWriter1.visitOuterClass("L1066716797", "L2039587225", "L4531833");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter1.visitAnnotation("L1853844875", true);
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test07908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07908");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        classWriter67.visitOuterClass("hi!", "", "");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (short) 3072, (int) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor16.visitAnnotation("L2133258398", false);
        methodVisitor16.visitMultiANewArrayInsn("L143726105", 78);
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test07909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07909");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 32);
        int int40 = classReader26.readUnsignedShort(127);
        char[] charArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = classReader26.readUTF8(38, charArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2048 + "'", int40 == 2048);
    }

    @Test
    public void test07910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07910");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label16 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        label16.info = strArray32;
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod((int) (short) 100, "", "hi!", "", strArray32);
        classWriter1.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray32);
        int int38 = classWriter1.newUTF8("L809431533");
        classWriter1.visitOuterClass("L2127085380", "L1111133036", "L1009580268");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("L674940947", false);
        annotationVisitor45.visitEnum("L168484184", "L781112982", "L2082140197");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test07911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07911");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitOuterClass("", "L897597087", "L680573325");
        classWriter1.visitInnerClass("L1287376048", "L2062266913", "L110679537", (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter42.newConst((java.lang.Object) (short) 1);
        classWriter42.visitSource("", "L2000102916");
        int int52 = classWriter42.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter59.newMethod("", "", "hi!", true);
        classWriter59.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter59.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(0);
        int int75 = classWriter73.newConst((java.lang.Object) (byte) 0);
        int int76 = classWriter59.newConst((java.lang.Object) int75);
        int int80 = classWriter59.newField("hi!", "", "L809431533");
        java.lang.String[] strArray90 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter59.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray90);
        classWriter42.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray90);
        classWriter1.visit(65536, (int) (byte) 100, "L1789245551", "L407879786", "L1601838046", strArray90);
        classWriter1.visitOuterClass("L59063553", "L2140076624", "L2089731244");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
    }

    @Test
    public void test07912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07912");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        classWriter1.visitSource("L149220781", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("L1681302154", false);
        int int39 = classWriter1.newUTF8("L2137693765");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        methodVisitor60.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor60.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = annotationVisitor66.visitArray("L831655905");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = annotationVisitor66.visitArray("L1769475365");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter1.visitField((int) (short) 7, "L1168665692", "L1317681080", "L1247818576", (java.lang.Object) "L1769475365");
        int int73 = classWriter1.newClass("L887195427");
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter1.visitAnnotation("L1305858187", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 17 + "'", int73 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test07913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07913");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readInt((int) (short) 100);
        int int34 = classReader26.readByte((int) (byte) 0);
        java.lang.String[] strArray35 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.readInt(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 65536 + "'", int32 == 65536);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 202 + "'", int34 == 202);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test07914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07914");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        int int30 = classReader26.header;
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 40);
        int int36 = classWriter34.newUTF8("L1161103829");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 90 + "'", int30 == 90);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test07915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07915");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        byte[] byteArray24 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        int int50 = classWriter30.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("", true);
        byte[] byteArray54 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        short short57 = classReader55.readShort((int) (byte) 0);
        int int59 = classReader55.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader55, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader55, 0);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader55, (int) (byte) 100);
        byte[] byteArray66 = classReader55.b;
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        java.lang.String[] strArray68 = classReader67.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (short) 3909, "L157434537", "L1146587628", "L1686860563", strArray68);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 3, 0, 0, 0, 1, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 10, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 4, 0, 6, 0, 7, 0, 13, 0, 0, 0, 10, 0, 1, 0, 2, 0, 11, 0, 1, 0, 100, 0, 14, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) -13570 + "'", short57 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2560 + "'", int59 == 2560);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test07916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07916");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitIntInsn(20, (int) (short) 1);
        methodVisitor16.visitIntInsn(14, 26729);
        methodVisitor16.visitInsn(27);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs((int) (short) 3909, 1034);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = methodVisitor16.visitAnnotation("L2000102916", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test07917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07917");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        byte[] byteArray30 = classReader26.b;
        int int31 = classReader26.getAccess();
        byte[] byteArray32 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader26.getItem(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07918");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.header;
        int int40 = classReader26.getAccess();
        byte[] byteArray41 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader26, 254);
        int int44 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader26.readUnsignedShort(161);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test07919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07919");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int35 = classReader26.getAccess();
        int int36 = classReader26.getAccess();
        int int38 = classReader26.readInt(77);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1818575214 + "'", int38 == 1818575214);
    }

    @Test
    public void test07920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07920");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L809431533", "L636727990", "L636727990");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        classWriter39.visitOuterClass("hi!", "", "");
        int int51 = classWriter39.newNameType("hi!", "hi!");
        int int54 = classWriter39.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        classWriter39.visit(5, 6, "", "", "", strArray75);
        classWriter1.visit(6, (-1), "L680573325", "L728847777", "L2062266913", strArray75);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = classWriter1.visitAnnotation("L1847716459", false);
        int int83 = classWriter1.newClass("L2133049941");
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 17 + "'", int83 == 17);
    }

    @Test
    public void test07921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07921");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1164862316);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L2108016684", true);
        annotationVisitor4.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = annotationVisitor4.visitArray("L1553193067");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test07922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07922");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        classWriter34.visitOuterClass("L1601838046", "L110679537", "L976656549");
        int int41 = classWriter34.newNameType("L1142940414", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter34.visitAnnotation("L1287376048", true);
        int int46 = classWriter34.newUTF8("L1687335926");
        int int49 = classWriter34.newNameType("L1076056118", "L2027998385");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("L1589078908", false);
        org.mockito.asm.FieldVisitor fieldVisitor79 = classWriter34.visitField((int) (short) 8460, "L901287164", "L2035525354", "L184804087", (java.lang.Object) "L1589078908");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = fieldVisitor79.visitAnnotation("L1930348385", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = fieldVisitor79.visitAnnotation("L848203708", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 18 + "'", int46 == 18);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 21 + "'", int49 == 21);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(fieldVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test07923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07923");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        short short31 = classReader26.readShort(8);
        int int32 = classReader26.getAccess();
        java.lang.Class<?> wildcardClass33 = classReader26.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 10 + "'", short31 == (short) 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test07924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07924");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label42 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        label42.info = strArray58;
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod((int) (short) 100, "", "hi!", "", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(24, "L1489256177", "L665737352", "L120720304", strArray58);
        methodVisitor62.visitMaxs((int) (short) 26729, 872);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test07925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07925");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1132227206", false);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = methodVisitor51.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = annotationVisitor62.visitAnnotation("L488861128", "L1223439170");
        int int66 = classWriter1.newConst((java.lang.Object) "L488861128");
        classWriter1.visitInnerClass("L745089702", "", "L1435737877", 156461415);
        classWriter1.visitSource("L1704225947", "L1595872345");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
    }

    @Test
    public void test07926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07926");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = methodVisitor41.visitAnnotation("L809431533", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor41.visitAnnotation("L85690983", true);
        methodVisitor41.visitIincInsn(6, 40);
        methodVisitor41.visitIincInsn(1165517669, 196864);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test07927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07927");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor43.visitCode();
        methodVisitor43.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        methodVisitor43.visitLineNumber((int) (short) -1, label74);
        label74.info = (-1.0f);
        methodVisitor25.visitLineNumber(19, label74);
        methodVisitor25.visitMultiANewArrayInsn("L959574331", (int) 'a');
        methodVisitor25.visitIntInsn((int) (byte) 1, 50331648);
        methodVisitor25.visitMultiANewArrayInsn("L1566032477", (int) (short) 26913);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L534597979" + "'", str76, "L534597979");
    }

    @Test
    public void test07928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07928");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        long long35 = classReader26.readLong(7);
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.Class<?> wildcardClass38 = byteArray36.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test07929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07929");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitSource("L936297181", "");
        int int36 = classWriter1.newUTF8("L573057906");
        classWriter1.visitSource("L465659170", "L1813551260");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        int int72 = classWriter52.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter52.visitAnnotation("", true);
        byte[] byteArray76 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        short short79 = classReader77.readShort((int) (byte) 0);
        int int81 = classReader77.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter(classReader77, 0);
        int int84 = classReader77.getAccess();
        java.lang.String str85 = classReader77.getSuperName();
        int int87 = classReader77.readInt((int) (byte) 1);
        long long89 = classReader77.readLong(3);
        java.lang.String[] strArray90 = classReader77.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter46.visitMethod((int) (short) 100, "L620334303", "L720019929", "L1919150861", strArray90);
        classWriter1.visit((int) (short) 8460, 13874, "L1321167593", "L890351046", "L1645273853", strArray90);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) -13570 + "'", short79 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2560 + "'", int81 == 2560);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-21316096) + "'", int87 == (-21316096));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-4755801206503241215L) + "'", long89 == (-4755801206503241215L));
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
    }

    @Test
    public void test07930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07930");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.getItem(72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 72");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test07931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07931");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader14, 13);
        int int18 = classReader14.getItem((int) (short) 1);
        java.lang.String str19 = classReader14.getSuperName();
        byte[] byteArray20 = classReader14.b;
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray20, 62, 5);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        int int51 = classWriter31.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter31.visitAnnotation("", true);
        byte[] byteArray55 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        short short58 = classReader56.readShort((int) (byte) 0);
        int int60 = classReader56.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(classReader56, 0);
        int int63 = classReader56.getAccess();
        java.lang.String str64 = classReader56.getSuperName();
        int int66 = classReader56.readInt((int) (byte) 1);
        long long68 = classReader56.readLong(3);
        java.lang.String[] strArray69 = classReader56.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter25.visitMethod((int) (short) 100, "L620334303", "L720019929", "L1919150861", strArray69);
        // The following exception was thrown during execution in test generation
        try {
            classReader23.accept((org.mockito.asm.ClassVisitor) classWriter25, 611177);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) -13570 + "'", short58 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2560 + "'", int60 == 2560);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-21316096) + "'", int66 == (-21316096));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-4755801206503241215L) + "'", long68 == (-4755801206503241215L));
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
    }

    @Test
    public void test07932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07932");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitParameterAnnotation(35, "L747114528", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test07933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07933");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L275489687", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        classWriter16.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter16.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(5);
        int int37 = classWriter35.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        classWriter35.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray58);
        classWriter16.visit((int) ' ', 8, "L1287376048", "L1028579140", "L680573325", strArray58);
        classWriter1.visit(909717811, 29, "L2059908172", "\000", "L1497855016", strArray58);
        classWriter1.visitInnerClass("L387862364", "L474351819", "L1572438104", (int) (short) 12342);
        byte[] byteArray68 = classWriter1.toByteArray();
        int int73 = classWriter1.newMethod("L607357044", "L1100502214", "L1021454555", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 54, 57, 49, 51, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 50, 48, 53, 57, 57, 48, 56, 49, 55, 50, 7, 0, 7, 1, 0, 2, -64, -128, 1, 0, 11, 76, 49, 52, 57, 55, 56, 53, 53, 48, 49, 54, 7, 0, 10, 1, 0, 10, 76, 51, 56, 55, 56, 54, 50, 51, 54, 52, 7, 0, 12, 1, 0, 10, 76, 52, 55, 52, 51, 53, 49, 56, 49, 57, 7, 0, 14, 1, 0, 11, 76, 49, 53, 55, 50, 52, 51, 56, 49, 48, 52, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 29, 0, 8, 0, 11, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 2, 0, 9, 0, 18, 0, 0, 0, 10, 0, 1, 0, 13, 0, 15, 0, 16, 48, 54, 0, 19, 0, 0, 0, 6, 0, 1, 0, 6, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 25 + "'", int73 == 25);
    }

    @Test
    public void test07934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07934");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, (int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07935");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        methodVisitor43.visitLabel(label47);
        java.lang.String str49 = label47.toString();
        methodVisitor16.visitLineNumber((int) (short) -1, label47);
        label47.info = (-1.0f);
        java.lang.String str53 = label47.toString();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter55.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter55.visitMethod(3, "hi!", "hi!", "hi!", strArray77);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter55.visitAnnotation("L242883751", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter55.visitAnnotation("L1628304347", false);
        label47.info = annotationVisitor85;
        annotationVisitor85.visitEnum("L1553193067", "L1166221053", "L1268065952");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "L490330075" + "'", str49, "L490330075");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "L490330075" + "'", str53, "L490330075");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test07936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07936");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitOuterClass("L407879786", "", "L817273435");
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(14, "L1521482602", "L1508588630", "L152223686", (java.lang.Object) "L1914124641");
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor36.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor36);
    }

    @Test
    public void test07937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07937");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readInt((int) (byte) 1);
        int int11 = classReader7.readByte((int) (short) 10);
        int int12 = classReader7.header;
        int int13 = classReader7.getAccess();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        short short43 = classReader41.readShort((int) (byte) 0);
        int int45 = classReader41.readUnsignedShort((int) ' ');
        int int47 = classReader41.readInt(0);
        java.lang.String[] strArray48 = classReader41.getInterfaces();
        int int49 = classReader41.header;
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader41, 104);
        char[] charArray54 = new char[] { '4' };
        java.lang.Object obj55 = classReader41.readConst(8, charArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = classReader7.readUTF8(31, charArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-21316096) + "'", int9 == (-21316096));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 78 + "'", int12 == 78);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) -13570 + "'", short43 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2560 + "'", int45 == 2560);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-889275714) + "'", int47 == (-889275714));
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 90 + "'", int49 == 90);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[4]");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "RuntimeVisibleAnnotations" + "'", obj55, "RuntimeVisibleAnnotations");
    }

    @Test
    public void test07938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07938");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readInt((int) (byte) 1);
        java.lang.String str10 = classReader7.getSuperName();
        byte[] byteArray11 = classReader7.b;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader7.readUnsignedShort((int) (short) 12336);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-21316096) + "'", int9 == (-21316096));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test07939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07939");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter43.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter43.visitMethod(8, "hi!", "", "", strArray65);
        classWriter43.visitOuterClass("hi!", "", "");
        classWriter43.visitEnd();
        java.lang.String[] strArray80 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter43.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter17.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter1.visitMethod(2561, "L749737959", "L2062266913", "L1368708044", strArray80);
        classWriter1.visitSource("\001", "L1028579140");
        classWriter1.visitOuterClass("L1171524151", "L75359331", "L1945103414");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = classWriter1.visitAnnotation("L127591338", false);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("", "L1201574820", "L1086223695", 1763773440);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test07940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07940");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int26 = classWriter1.newField("L430363814", "L918742398", "L989364881");
        byte[] byteArray27 = classWriter1.toByteArray();
        int int29 = classWriter1.newClass("L805282072");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        short short63 = classReader61.readShort((int) (byte) 0);
        int int65 = classReader61.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(classReader61, 0);
        java.lang.String[] strArray68 = classReader61.getInterfaces();
        byte[] byteArray69 = classReader61.b;
        java.lang.String str70 = classReader61.getSuperName();
        long long72 = classReader61.readLong(14);
        java.lang.String[] strArray73 = classReader61.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter1.visitMethod((int) (short) 12848, "L744974274", "L68825608", "L1745031302", strArray73);
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor74.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 76, 52, 51, 48, 51, 54, 51, 56, 49, 52, 7, 0, 7, 1, 0, 10, 76, 57, 49, 56, 55, 52, 50, 51, 57, 56, 1, 0, 10, 76, 57, 56, 57, 51, 54, 52, 56, 56, 49, 12, 0, 9, 0, 10, 9, 0, 8, 0, 11, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 14, 0, 0, 0, 2, 0, 3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) -13570 + "'", short63 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2560 + "'", int65 == 2560);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 282574545512737L + "'", long72 == 282574545512737L);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
    }

    @Test
    public void test07941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07941");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        java.lang.String str64 = label62.toString();
        label62.info = ' ';
        methodVisitor25.visitLineNumber((int) '#', label62);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter69.newConst((java.lang.Object) (byte) 0);
        label62.info = int71;
        java.lang.String str73 = label62.toString();
        java.lang.Object obj74 = label62.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L1324884910" + "'", str64, "L1324884910");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "L1324884910" + "'", str73, "L1324884910");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + 1 + "'", obj74, 1);
    }

    @Test
    public void test07942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07942");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor49.visitCode();
        methodVisitor49.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        methodVisitor76.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor76.visitLabel(label80);
        java.lang.String str82 = label80.toString();
        methodVisitor49.visitLineNumber((int) (short) -1, label80);
        label80.info = (-1.0f);
        java.lang.String str86 = label80.toString();
        methodVisitor25.visitLabel(label80);
        methodVisitor25.visitFieldInsn(17, "L1962189950", "L1307358075", "L128451051");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn((int) (byte) -1, "L2034910382");
        methodVisitor25.visitIntInsn(25857, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L619854727" + "'", str82, "L619854727");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L619854727" + "'", str86, "L619854727");
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test07943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07943");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitVarInsn((int) '#', 23);
        methodVisitor25.visitFieldInsn((int) '4', "L976656549", "\001", "L426422007");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor38.visitArray("L76446579");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test07944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07944");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newUTF8("L442162059");
        classWriter1.visitInnerClass("L1009580268", "L1647230648", "L939135397", 34);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
    }

    @Test
    public void test07945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07945");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor49.visitCode();
        methodVisitor49.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        methodVisitor76.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor76.visitLabel(label80);
        java.lang.String str82 = label80.toString();
        methodVisitor49.visitLineNumber((int) (short) -1, label80);
        label80.info = (-1.0f);
        java.lang.String str86 = label80.toString();
        methodVisitor25.visitLabel(label80);
        methodVisitor25.visitFieldInsn(17, "L1962189950", "L1307358075", "L128451051");
        methodVisitor25.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor25.visitParameterAnnotation(842151478, "L841843626", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L406618741" + "'", str82, "L406618741");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L406618741" + "'", str86, "L406618741");
    }

    @Test
    public void test07946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07946");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.Object obj54 = label51.info;
        int int55 = label51.getOffset();
        java.lang.String str56 = label51.toString();
        java.lang.String str57 = label51.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L699351313" + "'", str56, "L699351313");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L699351313" + "'", str57, "L699351313");
    }

    @Test
    public void test07947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07947");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.header;
        byte[] byteArray33 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readInt(3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07948");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        byte[] byteArray37 = classReader26.b;
        int int39 = classReader26.readUnsignedShort(0);
        byte[] byteArray40 = classReader26.b;
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray40, 82, 57174305);
        byte[] byteArray44 = classReader43.b;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader43.readUnsignedShort(1698786926);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 51966 + "'", int39 == 51966);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07949");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int28 = classWriter1.newUTF8("hi!");
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader30.readUnsignedShort(161);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
    }

    @Test
    public void test07950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07950");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitMultiANewArrayInsn("L1611208075", 3);
        methodVisitor25.visitTypeInsn((int) (short) 7, "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test07951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07951");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L579675851", true);
        byte[] byteArray5 = classWriter1.toByteArray();
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        int int39 = classWriter19.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter19.visitAnnotation("", true);
        byte[] byteArray43 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        short short46 = classReader44.readShort((int) (byte) 0);
        int int48 = classReader44.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader44, 0);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader44, 0);
        int int54 = classReader44.getItem(2);
        java.lang.String[] strArray55 = classReader44.getInterfaces();
        classWriter12.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter1.visitMethod(0, "L339402249", "L1423401218", "L918742398", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = methodVisitor57.visitAnnotation("L306461258", true);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter62.newMethod("", "", "hi!", true);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter62.visitMethod(0, "", "", "hi!", strArray76);
        int int82 = classWriter62.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter62.visitAnnotation("", true);
        byte[] byteArray86 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        int int89 = classReader87.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter91 = new org.mockito.asm.ClassWriter(classReader87, (int) '4');
        int int93 = classReader87.readUnsignedShort(5);
        int int94 = classReader87.getAccess();
        int int96 = classReader87.readByte(0);
        byte[] byteArray97 = classReader87.b;
        org.mockito.asm.ClassReader classReader98 = new org.mockito.asm.ClassReader(byteArray97);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor57.visitLdcInsn((java.lang.Object) classReader98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@38209027");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -13570 + "'", short46 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2560 + "'", int48 == 2560);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 14 + "'", int54 == 14);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 51966 + "'", int89 == 51966);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 202 + "'", int96 == 202);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07952");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        java.lang.String str64 = label62.toString();
        label62.info = ' ';
        methodVisitor25.visitLineNumber((int) '#', label62);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor25.visitAnnotationDefault();
        annotationVisitor68.visitEnum("L1074135059", "L1827009202", "L473304883");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L2026645951" + "'", str64, "L2026645951");
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test07953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07953");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readInt((int) (byte) 100);
        java.lang.String str38 = classReader26.getSuperName();
        byte[] byteArray39 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray39, 31, 808464688);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 65536 + "'", int37 == 65536);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07954");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visitEnum("hi!", "", "hi!");
        annotationVisitor28.visitEnd();
        annotationVisitor28.visitEnd();
        annotationVisitor28.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07955");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor25.visitAnnotation("L419471195", false);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        methodVisitor59.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        java.lang.String str85 = label83.toString();
        int[] intArray89 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] {};
        methodVisitor59.visitLookupSwitchInsn(label83, intArray89, labelArray90);
        methodVisitor25.visitLineNumber((int) (short) 1792, label83);
        methodVisitor25.visitLdcInsn((java.lang.Object) (-21316096));
        methodVisitor25.visitIincInsn((int) (short) 2560, (int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1646436725" + "'", str85, "L1646436725");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray90);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test07956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07956");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        int int51 = classWriter47.newField("L2133258398", "L120720304", "L1009580268");
        int int53 = classWriter47.newUTF8("L418802221");
        java.lang.String[] strArray59 = null;
        classWriter47.visit(1165517669, 1034, "L34653613", "L934252046", "L64402136", strArray59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 15 + "'", int51 == 15);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
    }

    @Test
    public void test07957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07957");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        long long38 = classReader26.readLong(100);
        long long40 = classReader26.readLong((int) ' ');
        java.lang.String str41 = classReader26.getSuperName();
        int int43 = classReader26.readInt(5);
        int int45 = classReader26.readInt(27);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        java.lang.String str74 = classReader73.getSuperName();
        char[] charArray80 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj81 = classReader73.readConst(6, charArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj82 = classReader26.readConst((int) (short) 2892, charArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2892");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 720578139469709322L + "'", long40 == 720578139469709322L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 184549888 + "'", int45 == 184549888);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj81 + "' != '" + "\001" + "'", obj81, "\001");
    }

    @Test
    public void test07958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07958");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray50, 0, 21);
        int int54 = classReader53.header;
        int int55 = classReader53.header;
        int int57 = classReader53.readUnsignedShort((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = classReader53.readLong(1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 163 + "'", int54 == 163);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 163 + "'", int55 == 163);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 51966 + "'", int57 == 51966);
    }

    @Test
    public void test07959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07959");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L1473010420", true);
        methodVisitor16.visitIntInsn((int) (short) 4, 2048);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test07960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07960");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter18.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter26.newMethod("", "", "hi!", true);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter26.visitMethod(0, "", "", "hi!", strArray40);
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter18.visitMethod(8, "hi!", "", "", strArray40);
        methodVisitor42.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = methodVisitor42.visitAnnotationDefault();
        methodVisitor42.visitMaxs((int) ' ', (int) '4');
        methodVisitor42.visitMaxs(13, 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor42.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor42.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(808597809, "L238640077", "L288690232", "L390763851", (java.lang.Object) methodVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@318cdfa0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test07961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07961");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int34 = classReader26.header;
        byte[] byteArray35 = classReader26.b;
        int int36 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 5);
        int int42 = classWriter38.newField("", "L1020492233", "L613443549");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
    }

    @Test
    public void test07962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07962");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        methodVisitor34.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label38 = new org.mockito.asm.Label();
        methodVisitor34.visitLabel(label38);
        java.lang.String str40 = label38.toString();
        label38.info = ' ';
        java.lang.Object obj43 = label38.info;
        methodVisitor16.visitLabel(label38);
        java.lang.String str45 = label38.toString();
        java.lang.String str46 = label38.toString();
        int int47 = label38.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "L743336034" + "'", str40, "L743336034");
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + ' ' + "'", obj43, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "L743336034" + "'", str45, "L743336034");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "L743336034" + "'", str46, "L743336034");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test07963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07963");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        classWriter1.visitOuterClass("L1429849124", "L1583234446", "L782129665");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("L1974467403", false);
        annotationVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = annotationVisitor41.visitArray("L2078456391");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test07964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07964");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        long long38 = classReader26.readLong(100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 25445);
        classWriter40.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
    }

    @Test
    public void test07965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07965");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("L1287376048", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        int int40 = classReader38.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader38, (int) '4');
        int int44 = classReader38.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader38, (int) '#');
        short short48 = classReader38.readShort(0);
        int int50 = classReader38.getItem(1);
        int int52 = classReader38.readInt((int) (short) 100);
        int int54 = classReader38.readInt((int) (short) 1);
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2561, "L2034910382", "L529122729", "L2039587225", (java.lang.Object) (short) 1);
        java.lang.String[] strArray61 = null;
        classWriter1.visit(56, 186, "L1541209207", "L81436625", "L375606602", strArray61);
        int int64 = classWriter1.newUTF8("L46285906");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 51966 + "'", int40 == 51966);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -13570 + "'", short48 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 11 + "'", int50 == 11);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 65536 + "'", int52 == 65536);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-21316096) + "'", int54 == (-21316096));
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
    }

    @Test
    public void test07966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07966");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        int int33 = classReader26.getItem(9);
        java.lang.String str34 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 1034);
        int int37 = classReader26.header;
        int int38 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 63 + "'", int33 == 63);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
    }

    @Test
    public void test07967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07967");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitEnd();
        methodVisitor16.visitEnd();
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test07968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07968");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L976656549", (int) (short) 26729);
        methodVisitor25.visitIntInsn(1869898100, 17784);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test07969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07969");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        int int11 = classWriter1.newClass("L1952894981");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1093704381", false);
        classWriter1.visitInnerClass("L1491483291", "L1473010420", "L1970148580", 196864);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test07970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07970");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitInsn(1659509);
        methodVisitor25.visitTypeInsn(0, "L1901131515");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test07971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07971");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int38 = classReader37.getAccess();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader37, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader37.readByte(65792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test07972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07972");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long41 = classReader26.readLong(22);
        int int43 = classReader26.readUnsignedShort(22);
        byte[] byteArray44 = classReader26.b;
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader45.accept(classVisitor46, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 864692228017815554L + "'", long41 == 864692228017815554L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3072 + "'", int43 == 3072);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test07973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07973");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor21.visitAnnotation("L110679537", "L1762162347");
        annotationVisitor21.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = annotationVisitor21.visitArray("L1974208773");
        annotationVisitor21.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor21.visitAnnotation("L209087084", "L1764016272");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test07974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07974");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String str12 = classReader7.getSuperName();
        byte[] byteArray13 = classReader7.b;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader7.readInt(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test07975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07975");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        byte[] byteArray12 = classWriter11.toByteArray();
        int int14 = classWriter11.newUTF8("L537907644");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        int int41 = classWriter21.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter21.visitAnnotation("", true);
        byte[] byteArray45 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        short short48 = classReader46.readShort((int) (byte) 0);
        int int50 = classReader46.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader46, 0);
        java.lang.String[] strArray53 = classReader46.getInterfaces();
        byte[] byteArray54 = classReader46.b;
        java.lang.String str55 = classReader46.getSuperName();
        long long57 = classReader46.readLong(14);
        java.lang.String str58 = classReader46.getSuperName();
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader46, 16);
        java.lang.String[] strArray61 = classReader46.getInterfaces();
        classWriter11.visit(38, 13, "L288314649", "L1710158961", "L738715190", strArray61);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -13570 + "'", short48 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2560 + "'", int50 == 2560);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 282574545512737L + "'", long57 == 282574545512737L);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test07976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07976");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readUnsignedShort(82);
        int int34 = classReader26.header;
        int int36 = classReader26.readUnsignedShort(11);
        long long38 = classReader26.readLong((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader26.readInt((int) (short) 12598);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 28532 + "'", int33 == 28532);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-3819410108757049344L) + "'", long38 == (-3819410108757049344L));
    }

    @Test
    public void test07977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07977");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L869352649");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07978");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitInnerClass("hi!", "L488861128", "L624707113", 0);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        classWriter1.visit((int) ' ', 10, "L120720304", "L667379532", "L4531833", strArray27);
        classWriter1.visitSource("L158524288", "L110679537");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        int int59 = classWriter39.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        byte[] byteArray63 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        short short66 = classReader64.readShort((int) (byte) 0);
        int int68 = classReader64.readUnsignedShort((int) ' ');
        long long70 = classReader64.readLong((int) '#');
        int int72 = classReader64.readInt(7);
        int int73 = classReader64.header;
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader64, 14);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader64, 51966);
        java.lang.String[] strArray78 = classReader64.getInterfaces();
        classWriter1.visit(909717811, 27, "", "L684697689", "L859506825", strArray78);
        classWriter1.visitOuterClass("L1148041100", "L671872947", "L1370122910");
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) -13570 + "'", short66 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2560 + "'", int68 == 2560);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1126999590795363L + "'", long70 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2561 + "'", int72 == 2561);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 90 + "'", int73 == 90);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test07979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07979");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L436759653", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotation("", false);
        annotationVisitor38.visitEnum("L1794533852", "L1790809036", "L82136369");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test07980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07980");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1182212814");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07981");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        int int52 = classReader51.header;
        int int53 = classReader51.getAccess();
        java.lang.String[] strArray54 = classReader51.getInterfaces();
        short short56 = classReader51.readShort((int) (short) 7);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 163 + "'", int52 == 163);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 1280 + "'", short56 == (short) 1280);
    }

    @Test
    public void test07982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07982");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitMaxs(100, (int) (short) 0);
        methodVisitor25.visitEnd();
        methodVisitor25.visitIincInsn(13874, (int) ' ');
        methodVisitor25.visitMethodInsn((int) (short) -1, "L886630257", "L603167048", "L1456483440");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test07983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07983");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        byte[] byteArray29 = classReader26.b;
        int int30 = classReader26.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test07984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07984");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitSource("", "L110679537");
        classWriter1.visitInnerClass("L720530545", "L1307358075", "L2000102916", 18);
        classWriter1.visitSource("L912963918", "L1269304540");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("L707293021", true);
        int int22 = classWriter1.newConst((java.lang.Object) 13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test07985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07985");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitCode();
        methodVisitor25.visitIntInsn((int) 'a', 554434561);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label39 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        label39.info = strArray55;
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod((int) (short) 100, "", "hi!", "", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor58.visitAnnotationDefault();
        methodVisitor58.visitIincInsn((int) (short) 1, 15);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        java.lang.String str65 = label64.toString();
        methodVisitor58.visitJumpInsn(0, label64);
        java.lang.String str67 = label64.toString();
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        int int89 = classWriter69.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = classWriter69.visitAnnotation("", true);
        byte[] byteArray93 = classWriter69.toByteArray();
        org.mockito.asm.ClassReader classReader94 = new org.mockito.asm.ClassReader(byteArray93);
        java.lang.String str95 = classReader94.getSuperName();
        java.lang.String[] strArray96 = classReader94.getInterfaces();
        label64.info = classReader94;
        methodVisitor25.visitLabel(label64);
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor59);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "L1189346589" + "'", str65, "L1189346589");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L1189346589" + "'", str67, "L1189346589");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6 + "'", int89 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test07986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07986");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1855754182");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07987");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMaxs((int) (short) 0, 7);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor49.visitCode();
        methodVisitor49.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        methodVisitor76.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor76.visitLabel(label80);
        java.lang.String str82 = label80.toString();
        methodVisitor49.visitLineNumber((int) (short) -1, label80);
        label80.info = (-1.0f);
        java.lang.Object obj86 = label80.info;
        java.lang.String str87 = label80.toString();
        java.lang.String str88 = label80.toString();
        java.lang.Object obj89 = label80.info;
        int int90 = label80.getOffset();
        methodVisitor25.visitLineNumber(4, label80);
        int int92 = label80.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L17360042" + "'", str82, "L17360042");
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + (-1.0f) + "'", obj86, (-1.0f));
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L17360042" + "'", str87, "L17360042");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L17360042" + "'", str88, "L17360042");
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + (-1.0f) + "'", obj89, (-1.0f));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test07988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07988");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn((-1107296256), 12);
        methodVisitor25.visitMethodInsn((int) (short) 4, "L831655905", "L1221801792", "L688061379");
        methodVisitor25.visitEnd();
        methodVisitor25.visitIincInsn((int) (byte) 0, (int) (short) -17730);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test07989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07989");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        int int15 = classWriter1.newField("L1490365060", "L1386483578", "L636727990");
        classWriter1.visitSource("L1269304540", "L242883751");
        classWriter1.visitSource("L1750086343", "L426422007");
        int int23 = classWriter1.newClass("L1013343419");
        classWriter1.visitInnerClass("L1700698598", "L1358038794", "L82136369", 872);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter34.visitAnnotation("hi!", false);
        byte[] byteArray62 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader64, (int) (short) 12848);
        int int67 = classReader64.getAccess();
        java.lang.String[] strArray68 = classReader64.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (short) 12342, "L1923289293", "L85690983", "L310679005", strArray68);
        methodVisitor69.visitMultiANewArrayInsn("L977826039", 40);
        methodVisitor69.visitIntInsn(20, 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 13 + "'", int15 == 13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 17 + "'", int23 == 17);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test07990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07990");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L149220781");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07991");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 12);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader9.readUnsignedShort((int) (short) 21359);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test07992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07992");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitSource("L467340186", "L1669912474");
        byte[] byteArray14 = classWriter1.toByteArray();
        classWriter1.visitSource("L1491483291", "L976618452");
        byte[] byteArray18 = classWriter1.toByteArray();
        int int20 = classWriter1.newClass("L1150125104");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 10, 76, 52, 54, 55, 51, 52, 48, 49, 56, 54, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 11, 76, 49, 54, 54, 57, 57, 49, 50, 52, 55, 52, 0, 11, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 10, 76, 52, 54, 55, 51, 52, 48, 49, 56, 54, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 11, 76, 49, 52, 57, 49, 52, 56, 51, 50, 57, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 12, 0, 10, 0, 0, 0, 10, 76, 57, 55, 54, 54, 49, 56, 52, 53, 50, 0, 11, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
    }

    @Test
    public void test07993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07993");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        int int11 = classWriter1.newClass("L1952894981");
        int int14 = classWriter1.newNameType("", "L2133258398");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter21.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter29.newMethod("", "", "hi!", true);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter29.visitMethod(0, "", "", "hi!", strArray43);
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter21.visitMethod(8, "hi!", "", "", strArray43);
        classWriter21.visitOuterClass("hi!", "", "");
        int int51 = classWriter21.newClass("hi!");
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter57.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter57.visitAnnotation("L1086414642", false);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter65.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(0);
        int int78 = classWriter73.newMethod("", "", "hi!", true);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter73.visitMethod(0, "", "", "hi!", strArray87);
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter65.visitMethod(8, "hi!", "", "", strArray87);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = classWriter65.visitAnnotation("hi!", false);
        byte[] byteArray93 = classWriter65.toByteArray();
        org.mockito.asm.ClassReader classReader94 = new org.mockito.asm.ClassReader(byteArray93);
        annotationVisitor62.visit("L684697689", (java.lang.Object) byteArray93);
        org.mockito.asm.ClassReader classReader96 = new org.mockito.asm.ClassReader(byteArray93);
        java.lang.String[] strArray97 = classReader96.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor98 = classWriter21.visitMethod(1164862316, "L1291288126", "L306461258", "L1549350954", strArray97);
        classWriter1.visit(14, 117440769, "L885125785", "L1901131515", "L84188162", strArray97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(methodVisitor88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(methodVisitor98);
    }

    @Test
    public void test07994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07994");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("L809431533", false);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        int int80 = classWriter60.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter60.visitAnnotation("", true);
        byte[] byteArray84 = classWriter60.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        short short87 = classReader85.readShort((int) (byte) 0);
        java.lang.String str88 = classReader85.getSuperName();
        java.lang.String[] strArray89 = classReader85.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter1.visitMethod(16, "L430363814", "L1283200231", "L541901146", strArray89);
        methodVisitor90.visitVarInsn(18, (int) 'a');
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor90.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short87 + "' != '" + (short) -13570 + "'", short87 == (short) -13570);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(methodVisitor90);
    }

    @Test
    public void test07995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07995");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 23);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("L202294627", true);
        int int50 = classWriter42.newMethod("L523453504", "L1487951814", "", true);
        int int52 = classWriter42.newClass("L1949580175");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 15 + "'", int50 == 15);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 17 + "'", int52 == 17);
    }

    @Test
    public void test07996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07996");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor62.visitAnnotation("L1162526488", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor62.visitAnnotation("L1429849124", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = fieldVisitor62.visitAnnotation("L1572438104", false);
        annotationVisitor71.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test07997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07997");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        long long38 = classReader26.readLong(90);
        java.lang.String str39 = classReader26.getSuperName();
        byte[] byteArray40 = classReader26.b;
        int int41 = classReader26.header;
        int int42 = classReader26.header;
        int int44 = classReader26.readByte(78);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 90 + "'", int42 == 90);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 101 + "'", int44 == 101);
    }

    @Test
    public void test07998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07998");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 78);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        int int37 = classReader26.header;
        byte[] byteArray38 = classReader26.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        long long41 = classReader39.readLong(77);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 7810721071298999393L + "'", long41 == 7810721071298999393L);
    }

    @Test
    public void test07999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07999");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        int int54 = classWriter1.newUTF8("L538737171");
        int int56 = classWriter1.newUTF8("L973991535");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
    }

    @Test
    public void test08000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test08000");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        int int33 = classReader26.getItem(9);
        java.lang.String str34 = classReader26.getSuperName();
        int int35 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.readInt((int) (short) 1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 63 + "'", int33 == 63);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 90 + "'", int35 == 90);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minusSeconds((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withSecondOfMinute(45);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMinutes(31);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((-5640));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(3605100);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime12 = property8.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra(69);
        int int15 = localDateTime14.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(45, 24);
        long long5 = dateTimeZone2.adjustOffset((long) 2000, true);
        java.lang.String str7 = dateTimeZone2.getShortName(0L);
        boolean boolean8 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2000L + "'", long5 == 2000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+45:24" + "'", str7, "+45:24");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = islamicChronology2.getDateTimeMillis(19958400000L, (int) '#', 26, 273, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.DurationField durationField8 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.Chronology chronology8 = islamicChronology2.withUTC();
        org.joda.time.DurationField durationField9 = islamicChronology2.weekyears();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfYear(11);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(10);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis(3605100);
        org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withDayOfYear(11);
        int[] intArray37 = localDateTime36.getValues();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = property40.setCopy(4);
        int[] intArray44 = islamicChronology25.get((org.joda.time.ReadablePartial) localDateTime42, 17758044000069L);
        islamicChronology2.validate((org.joda.time.ReadablePartial) localDateTime19, intArray44);
        org.joda.time.DateTimeField dateTimeField46 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField47 = islamicChronology2.days();
        // The following exception was thrown during execution in test generation
        try {
            long long55 = islamicChronology2.getDateTimeMillis(70, (-521220), 2922711, 1, 0, (-16607), 2632);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16607 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(islamicChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1969, 10, 21, 82800069]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        java.lang.String str10 = dateTimeZone8.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusSeconds((int) ' ');
        boolean boolean21 = dateTimeZone8.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = islamicChronology2.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField23 = islamicChronology2.seconds();
        org.joda.time.DurationField durationField24 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField25 = islamicChronology2.seconds();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.tz.Provider provider27 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider27);
        org.joda.time.DateTimeZone dateTimeZone30 = provider27.getZone("1970");
        java.util.Set<java.lang.String> strSet31 = provider27.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone33 = provider27.getZone("\ud55c\uad6d\uc5b4");
        java.util.Set<java.lang.String> strSet34 = provider27.getAvailableIDs();
        java.util.Set<java.lang.String> strSet35 = provider27.getAvailableIDs();
        boolean boolean36 = islamicChronology2.equals((java.lang.Object) strSet35);
        org.joda.time.DateTimeField dateTimeField37 = islamicChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+01:00" + "'", str10, "+01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.secondOfMinute();
        org.joda.time.DurationField durationField7 = islamicChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology4.dayOfMonth();
        long long9 = dateTimeField6.set(0L, 17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+01:00" + "'", str3, "+01:00");
        org.junit.Assert.assertNotNull(islamicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-432000000L) + "'", long9 == (-432000000L));
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet4);
        boolean boolean6 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet2);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale10.getVariant();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale10, locale12, locale13, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = null;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        boolean boolean23 = strSet2.remove((java.lang.Object) localeList19);
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        boolean boolean28 = strSet25.removeAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean29 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.stream.Stream<java.lang.String> strStream30 = strSet2.parallelStream();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology33 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = islamicChronology33.weekyears();
        org.joda.time.DurationField durationField35 = islamicChronology33.months();
        org.joda.time.DateTimeField dateTimeField36 = islamicChronology33.minuteOfHour();
        org.joda.time.DurationField durationField37 = islamicChronology33.seconds();
        java.lang.String str38 = durationField37.toString();
        boolean boolean39 = strSet2.equals((java.lang.Object) durationField37);
        java.util.Locale locale41 = new java.util.Locale("");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology45 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = islamicChronology45.weekyears();
        org.joda.time.DurationField durationField47 = islamicChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = islamicChronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = islamicChronology45.era();
        org.joda.time.DateTimeField dateTimeField50 = islamicChronology45.dayOfWeek();
        boolean boolean51 = strSet42.remove((java.lang.Object) dateTimeField50);
        boolean boolean52 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet2.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FR" + "'", str14, "FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(islamicChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DurationField[seconds]" + "'", str38, "DurationField[seconds]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(islamicChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSpliterator53);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology16.weekyear();
        org.joda.time.ReadablePartial readablePartial18 = null;
        int[] intArray25 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray27 = dateTimeField17.addWrapPartial(readablePartial18, 100, intArray25, (int) (short) 0);
        int int28 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12, intArray25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        int int31 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusHours((int) (byte) -1);
        int int34 = localDateTime30.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.minusMinutes((int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology39 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = islamicChronology39.weekyears();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology43 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology46 = islamicChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField47 = islamicChronology39.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 1);
        int int50 = localDateTime49.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology53 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = islamicChronology53.weekyear();
        org.joda.time.ReadablePartial readablePartial55 = null;
        int[] intArray62 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray64 = dateTimeField54.addWrapPartial(readablePartial55, 100, intArray62, (int) (short) 0);
        int int65 = dateTimeField47.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49, intArray62);
        int int66 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36, intArray62);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime36.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 1);
        int int71 = localDateTime70.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.minusHours((int) (byte) -1);
        int int75 = localDateTime70.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime70.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime70.minus(readablePeriod78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime70.millisOfSecond();
        long long81 = property80.remainder();
        java.lang.String str82 = property80.getName();
        org.joda.time.DurationField durationField83 = property80.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property80.getFieldType();
        int int85 = localDateTime36.get(dateTimeFieldType84);
        org.joda.time.DateTimeField[] dateTimeFieldArray86 = localDateTime36.getFields();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime36.minusSeconds(3600010);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime36.minusMillis((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property91 = localDateTime36.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime36.plusWeeks((-69556));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(islamicChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(islamicChronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(islamicChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "millisOfSecond" + "'", str82, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = builder6.build();
        java.util.Locale.Builder builder9 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = islamicChronology19.years();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        int int24 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusHours((int) (byte) -1);
        int int28 = localDateTime23.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.minus(readablePeriod31);
        int int33 = localDateTime32.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField35 = localDateTime32.getField(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.centuryOfEra();
        int[] intArray38 = islamicChronology19.get((org.joda.time.ReadablePartial) localDateTime32, (long) 0);
        org.joda.time.DateTimeField dateTimeField39 = islamicChronology19.hourOfDay();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = locale41.getCountry();
        java.lang.String str43 = dateTimeField39.getAsShortText((-306028799989L), locale41);
        java.lang.String str44 = locale41.getVariant();
        java.lang.String str45 = locale14.getDisplayLanguage(locale41);
        java.util.Locale.Builder builder46 = builder11.setLocale(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder48 = builder46.setLanguageTag("\u897f\u5143");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JPN" + "'", str15, "JPN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(islamicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "FR" + "'", str42, "FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "japonais" + "'", str45, "japonais");
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        int int12 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.plusMonths((-1));
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = islamicChronology24.weekyears();
        org.joda.time.DurationField durationField26 = islamicChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology24.yearOfEra();
        org.joda.time.DurationField durationField28 = islamicChronology24.halfdays();
        org.joda.time.DurationFieldType durationFieldType29 = durationField28.getType();
        boolean boolean30 = localDateTime18.isSupported(durationFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime8.withFieldAdded(durationFieldType29, 12);
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale34.getUnicodeLocaleType("FR");
        java.lang.String str40 = nameProvider33.getName(locale34, "\uc601\uc5b4", "GMT+00:00");
        java.lang.String str41 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime8, locale34);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime8.withDayOfYear(365);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology48 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = islamicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = islamicChronology48.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone51 = islamicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField52 = islamicChronology48.millisOfSecond();
        long long55 = dateTimeField52.getDifferenceAsLong((long) 1970, (long) 0);
        long long58 = dateTimeField52.getDifferenceAsLong((long) 11, (-20217598030L));
        long long60 = dateTimeField52.roundHalfFloor(35L);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeField52.getAsShortText((long) 5, locale62);
        java.lang.String str65 = dateTimeField52.getAsShortText((long) 101);
        int int67 = dateTimeField52.getMaximumValue((long) 3601970);
        int int68 = dateTimeField52.getMaximumValue();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getDisplayLanguage();
        java.lang.String str72 = dateTimeField52.getAsText(42068415600000L, locale70);
        java.util.Set<java.lang.String> strSet73 = locale70.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder74.setVariant("");
        java.util.Locale locale77 = builder76.build();
        java.util.Locale locale79 = new java.util.Locale("");
        java.util.Locale.Builder builder80 = builder76.setLocale(locale79);
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        boolean boolean82 = locale81.hasExtensions();
        java.util.Locale locale83 = locale81.stripExtensions();
        java.lang.String str84 = locale81.getDisplayCountry();
        java.util.Locale locale85 = java.util.Locale.TAIWAN;
        boolean boolean86 = locale85.hasExtensions();
        java.lang.String str87 = locale81.getDisplayCountry(locale85);
        java.util.Locale.Builder builder88 = builder76.setLocale(locale85);
        java.util.Locale locale89 = builder88.build();
        java.util.Locale.Builder builder90 = builder88.clear();
        java.util.Locale locale91 = builder90.build();
        boolean boolean92 = locale91.hasExtensions();
        java.lang.String str93 = locale70.getDisplayCountry(locale91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime94 = property44.setCopy("\ub300\ud55c\ubbfc\uad6d", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"???????????\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(islamicChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1970L + "'", long55 == 1970L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 20217598041L + "'", long58 == 20217598041L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 35L + "'", long60 == 35L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "5" + "'", str63, "5");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "101" + "'", str65, "101");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 999 + "'", int67 == 999);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 999 + "'", int68 == 999);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str71, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ub300\ub9cc" + "'", str84, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u53f0\u7063" + "'", str87, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Italy" + "'", str93, "Italy");
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = islamicChronology2.getZone();
        org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
        java.lang.String str28 = dateTimeZone26.toString();
        int int30 = dateTimeZone26.getOffset((long) 69);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(islamicChronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+01:00" + "'", str28, "+01:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3600000 + "'", int30 == 3600000);
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.equals((java.lang.Object) 10L);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone18.getShortName(1970L, locale23);
        org.joda.time.DateTime dateTime26 = localDateTime16.toDateTime(dateTimeZone18);
        int int27 = localDateTime16.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.minus(readablePeriod28);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(islamicChronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JPN" + "'", str24, "JPN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+01:00" + "'", str25, "+01:00");
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3600000 + "'", int27 == 3600000);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(59);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withWeekyear(1069);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        java.lang.String str7 = localDateTime1.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T01:00:00.001" + "'", str7, "1970-01-01T01:00:00.001");
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("3632");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=3632");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear(11);
        int[] intArray10 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusHours((int) (short) 0);
        int int13 = localDateTime12.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = property14.setCopy("FR");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"FR\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        boolean boolean18 = property11.equals((java.lang.Object) 59);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDateTime23.getFields();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusDays(4);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime37.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean48 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.weekyear();
        boolean boolean50 = property11.equals((java.lang.Object) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 1);
        int int53 = localDateTime52.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology58 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField59 = islamicChronology58.weekyears();
        org.joda.time.DurationField durationField60 = islamicChronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField61 = islamicChronology58.yearOfEra();
        org.joda.time.DurationField durationField62 = islamicChronology58.halfdays();
        org.joda.time.DurationFieldType durationFieldType63 = durationField62.getType();
        boolean boolean64 = localDateTime52.isSupported(durationFieldType63);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime52);
        java.lang.String str66 = localDateTime52.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 23 + "'", int53 == 23);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(islamicChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1969-12-31T23:00:00.001" + "'", str66, "1969-12-31T23:00:00.001");
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getYearOfCentury();
        java.lang.String str12 = localDateTime10.toString();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(97L);
        int int16 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        int int23 = localDateTime18.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int36 = localDateTime35.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy((int) (byte) 100);
        int int40 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime18.withMinuteOfHour((int) '4');
        int[] intArray43 = localDateTime42.getValues();
        int int44 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.chrono.IslamicChronology islamicChronology45 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = islamicChronology45.minuteOfDay();
        org.joda.time.DurationField durationField47 = islamicChronology45.months();
        org.joda.time.DateTimeField dateTimeField48 = islamicChronology45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        int int51 = localDateTime50.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusHours((int) (byte) -1);
        int int54 = localDateTime50.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime50.plusHours((int) (byte) 100);
        int[] intArray60 = islamicChronology45.get((org.joda.time.ReadablePartial) localDateTime58, (long) 1969);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.plusMinutes(49);
        int int65 = localDateTime64.getDayOfMonth();
        int int66 = localDateTime64.size();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.minusWeeks(60);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.plusHours(82800001);
        boolean boolean71 = localDateTime42.isEqual((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = localDateTime70.getFields();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 69 + "'", int11 == 69);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1969-12-31T23:00:00.001" + "'", str12, "1969-12-31T23:00:00.001");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1969, 12, 31, 85920001]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(islamicChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 23 + "'", int51 == 23);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1389, 10, 21, 82801969]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = islamicChronology9.weekyears();
        org.joda.time.DurationField durationField11 = islamicChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology9.yearOfEra();
        org.joda.time.DurationField durationField13 = islamicChronology9.months();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology9.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology9.getZone();
        org.joda.time.Chronology chronology16 = islamicChronology2.withZone(dateTimeZone15);
        java.util.TimeZone timeZone17 = dateTimeZone15.toTimeZone();
        java.lang.String str18 = timeZone17.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT+01:00" + "'", str18, "GMT+01:00");
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        java.util.Locale locale2 = new java.util.Locale("DateTimeField[minuteOfHour]", "hourOfDay");
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale7 = new java.util.Locale("weekOfWeekyear", "millisOfSecond");
        java.lang.String str8 = locale4.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getVariant();
        java.lang.String str10 = locale4.getDisplayCountry();
        boolean boolean11 = locale2.equals((java.lang.Object) locale4);
        org.junit.Assert.assertEquals(locale2.toString(), "datetimefield[minuteofhour]_HOUROFDAY");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "weekofweekyear_MILLISOFSECOND");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str10, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = islamicChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 10);
        int int8 = localDateTime7.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField7 = islamicChronology2.centuries();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone14);
        long long20 = dateTimeZone14.convertLocalToUTC(0L, true, (-4320000001L));
        java.lang.String str22 = dateTimeZone14.getNameKey((long) 1443);
        org.joda.time.Chronology chronology23 = islamicChronology2.withZone(dateTimeZone14);
        java.lang.String str24 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.hours();
        long long28 = durationField26.getValueAsLong(6652800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "IslamicChronology[+01:00]" + "'", str24, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1848L + "'", long28 == 1848L);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 1);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone2);
        boolean boolean4 = timeZone2.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int10 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.plusHours((int) (byte) 100);
        java.util.Date date15 = localDateTime14.toDate();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromDateFields(date15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date15);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromDateFields(date15);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date15);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.fromDateFields(date15);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromDateFields(date15);
        boolean boolean22 = timeZone2.inDaylightTime(date15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Jan 05 03:00:00 GMT+01:00 1970");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(69);
        int int3 = dateTimeZone1.getOffset(2626841168L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 248400000 + "'", int3 == 248400000);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = islamicChronology2.weeks();
        long long11 = islamicChronology2.add(100L, 1970L, 10);
        org.joda.time.DurationField durationField12 = islamicChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone13 = islamicChronology2.getZone();
        java.lang.Object obj14 = null;
        boolean boolean15 = islamicChronology2.equals(obj14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear(11);
        int[] intArray27 = localDateTime26.getValues();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusHours((int) (short) 0);
        int int30 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime16.plus(readableDuration31);
        boolean boolean33 = islamicChronology2.equals((java.lang.Object) localDateTime32);
        int[] intArray34 = localDateTime32.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 19800L + "'", long11 == 19800L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 1, 11, 82800001]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 2, 22, 22466095]");
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale5 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str4, "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        int int14 = property11.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property11.addWrapFieldToCopy(70);
        java.lang.String str17 = property11.getAsText();
        org.joda.time.LocalDateTime localDateTime19 = property11.addWrapFieldToCopy(3632);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = property11.setCopy("1970-01-01T01:00:00.100");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T01:00:00.100\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        timeZone3.setID("\u5927\u97d3\u6c11\u56fd");
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        int int7 = timeZone1.getRawOffset();
        java.lang.String str8 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((int) (byte) -1);
        int int17 = localDateTime12.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.millisOfSecond();
        long long23 = property22.remainder();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(locale24);
        int int28 = property22.getMaximumShortTextLength(locale24);
        java.lang.String str29 = locale10.getDisplayVariant(locale24);
        java.util.Locale locale30 = locale24.stripExtensions();
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = timeZone1.getDisplayName(locale30);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str32, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        int int3 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DurationField durationField6 = islamicChronology2.seconds();
        int int9 = durationField6.getValue((-306028799989L), (long) 1969);
        long long12 = durationField6.subtract(336873583297L, 29508223);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-306028799) + "'", int9 == (-306028799));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 307365360297L + "'", long12 == 307365360297L);
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        java.lang.String str8 = localDateTime1.toString();
        int int9 = localDateTime1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDate(3632, 1961, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1961 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:00:00.001" + "'", str8, "1969-12-31T23:00:00.001");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.hourOfDay();
        long long11 = dateTimeField8.addWrapField((long) (-700), (-16385302));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7199300L + "'", long11 == 7199300L);
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = islamicChronology2.getDateTimeMillis((long) 49740000, 24263, 69, 50, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24263 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = islamicChronology2.getDateTimeMillis(19, 29656917, 31, 970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29656917 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDayOfMonth(67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 67 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        boolean boolean5 = dateTimeZone2.equals((java.lang.Object) 10L);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeZone2.getShortName(1970L, locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        java.lang.String str11 = locale7.getCountry();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Locale locale20 = new java.util.Locale("1787-01-01T00:00:00.060", "13");
        java.util.Locale.setDefault(category0, locale20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = islamicChronology24.weekyears();
        org.joda.time.DurationField durationField26 = islamicChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology24.yearOfEra();
        org.joda.time.DurationField durationField28 = islamicChronology24.halfdays();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology31 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = islamicChronology31.weekyears();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology35 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone34);
        boolean boolean37 = dateTimeZone34.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology38 = islamicChronology31.withZone(dateTimeZone34);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale41.getISO3Country();
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str45 = dateTimeZone34.getName(24796800001L, locale41);
        org.joda.time.Chronology chronology46 = islamicChronology24.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField47 = islamicChronology24.yearOfCentury();
        java.util.Locale locale50 = new java.util.Locale("\u65e5\u672c", "0099-01-01T01:00:00.001");
        java.lang.String str51 = locale50.getScript();
        int int52 = dateTimeField47.getMaximumTextLength(locale50);
        java.lang.String str53 = locale20.getDisplayName(locale50);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JPN" + "'", str8, "JPN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+01:00" + "'", str9, "+01:00");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JP" + "'", str11, "JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale20.toString(), "1787-01-01t00:00:00.060_13");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(islamicChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(islamicChronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "KOR" + "'", str43, "KOR");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+01:00" + "'", str45, "+01:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals(locale50.toString(), "\u65e5\u672c_0099-01-01T01:00:00.001");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1787-01-01t00:00:00.060 (13)" + "'", str53, "1787-01-01t00:00:00.060 (13)");
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        int int11 = property8.getMaximumValue();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Locale.setDefault(category12, locale14);
        int int18 = property8.getMaximumTextLength(locale14);
        java.lang.String str19 = locale14.getVariant();
        java.lang.String str20 = locale14.getDisplayVariant();
        java.lang.String str21 = locale14.getLanguage();
        java.lang.String str22 = locale14.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JPN" + "'", str15, "JPN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ja" + "'", str21, "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str22, "\u65e5\u672c\u8a9e");
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.halfdayOfDay();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology2.getLeapYearPatternType();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int14 = localDateTime9.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.millisOfSecond();
        long long20 = property19.remainder();
        java.lang.String str21 = property19.getName();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.lang.String str23 = property19.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime24 = property19.withMinimumValue();
        boolean boolean26 = property19.equals((java.lang.Object) 59);
        int int27 = property19.getMaximumValue();
        int int28 = property19.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays(59);
        int int32 = localDateTime31.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 1);
        int int36 = localDateTime35.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours((int) (byte) -1);
        int int40 = localDateTime35.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.withMillisOfSecond((int) (byte) 100);
        int[] intArray43 = localDateTime35.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray45 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime31, 60, intArray43, 384);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 60");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(leapYearPatternType5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1969, 12, 31, 82800001]");
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        int int23 = localDateTime18.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minus(readablePeriod26);
        int int28 = localDateTime27.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = localDateTime27.getField(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minusMonths(59);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis((int) (short) 0);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str42 = nameProvider38.getShortName(locale39, "jpn", "jpn");
        java.lang.String str43 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime35, locale39);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int51 = localDateTime50.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy((int) (byte) 100);
        int int55 = property52.getMaximumValue();
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale57.getDisplayCountry(locale58);
        java.util.Locale.setDefault(category56, locale58);
        int int62 = property52.getMaximumTextLength(locale58);
        java.lang.String str63 = locale58.getVariant();
        int int64 = dateTimeField6.getMaximumShortTextLength(locale58);
        long long66 = dateTimeField6.roundHalfEven((long) (-843));
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.lang.String str71 = locale69.getISO3Country();
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 1);
        int int75 = localDateTime74.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.minusHours((int) (byte) -1);
        int int78 = localDateTime74.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime74.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.centuryOfEra();
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.lang.String str83 = property81.getAsShortText(locale82);
        boolean boolean85 = property81.equals((java.lang.Object) "\u5927\u97d3\u6c11\u56fd");
        java.util.Locale locale89 = new java.util.Locale("+01:00", "19", "1");
        int int90 = property81.getMaximumShortTextLength(locale89);
        java.lang.String str91 = locale89.toLanguageTag();
        java.lang.String str92 = locale69.getDisplayLanguage(locale89);
        java.lang.String str93 = dateTimeField6.getAsText(17763840000001L, locale69);
        java.lang.String str94 = locale69.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1965" + "'", str43, "1965");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "JPN" + "'", str59, "JPN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 5785200000L + "'", long66 == 5785200000L);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str70, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "KOR" + "'", str71, "KOR");
        org.junit.Assert.assertNotNull(strSet72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 23 + "'", int75 == 23);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "19" + "'", str83, "19");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals(locale89.toString(), "+01:00_19_1");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 7 + "'", int90 == 7);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "x-lvariant-1" + "'", str91, "x-lvariant-1");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Korean" + "'", str92, "Korean");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970" + "'", str93, "1970");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.centuryOfEra();
        org.joda.time.DurationField durationField9 = islamicChronology2.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int14 = localDateTime9.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readablePeriod17);
        int int19 = localDateTime18.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = localDateTime18.getField(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.centuryOfEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean29 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.weekyear();
        int int31 = localDateTime28.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology35 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = islamicChronology35.weekyears();
        org.joda.time.DurationField durationField37 = islamicChronology35.months();
        org.joda.time.DateTimeField dateTimeField38 = islamicChronology35.minuteOfHour();
        org.joda.time.DurationField durationField39 = islamicChronology35.hours();
        org.joda.time.DateTimeField dateTimeField40 = islamicChronology35.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology43 = islamicChronology35.withZone(dateTimeZone42);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = dateTimeZone42.getShortName((long) 11, locale45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology49 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone48);
        boolean boolean51 = dateTimeZone48.equals((java.lang.Object) 10L);
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = dateTimeZone48.getShortName(1970L, locale53);
        java.lang.String str56 = locale45.getDisplayLanguage(locale53);
        java.lang.String str57 = localDateTime28.toString("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", locale45);
        java.lang.String str58 = localDateTime28.toString();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology61 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone60);
        int int62 = islamicChronology61.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField63 = islamicChronology61.weekyear();
        org.joda.time.DurationField durationField64 = islamicChronology61.hours();
        org.joda.time.DateTimeField dateTimeField65 = islamicChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = islamicChronology61.centuryOfEra();
        org.joda.time.DurationField durationField67 = islamicChronology61.centuries();
        org.joda.time.DurationFieldType durationFieldType68 = durationField67.getType();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime28.withFieldAdded(durationFieldType68, 1070);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(islamicChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(islamicChronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JPN" + "'", str54, "JPN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+01:00" + "'", str55, "+01:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u82f1\u8a9e" + "'", str56, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str57, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1969-12-31T01:00:05.100" + "'", str58, "1969-12-31T01:00:05.100");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(islamicChronology61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = islamicChronology2.millis();
        java.lang.String str7 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.secondOfDay();
        long long11 = dateTimeField9.roundFloor((long) (-306028799));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IslamicChronology[+01:00]" + "'", str7, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-306029000L) + "'", long11 == (-306029000L));
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.weekOfWeekyear();
        long long9 = dateTimeField6.add(311039996400000L, 23);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = islamicChronology16.weekyears();
        org.joda.time.DurationField durationField18 = islamicChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = islamicChronology16.yearOfEra();
        org.joda.time.DurationField durationField20 = islamicChronology16.halfdays();
        org.joda.time.DurationFieldType durationFieldType21 = durationField20.getType();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime11.withFieldAdded(durationFieldType21, (int) '#');
        int int24 = localDateTime11.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime11.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        int int28 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime11.minusYears((-16385));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime11.plusMinutes(7200000);
        org.joda.time.DateTime dateTime33 = localDateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology37 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField38 = islamicChronology37.weekyears();
        org.joda.time.DurationField durationField39 = islamicChronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField40 = islamicChronology37.yearOfEra();
        org.joda.time.DurationField durationField41 = islamicChronology37.halfdays();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology37);
        org.joda.time.DateTimeField dateTimeField43 = islamicChronology37.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology37);
        org.joda.time.DateTimeField dateTimeField45 = islamicChronology37.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withHourOfDay(5);
        int[] intArray51 = islamicChronology37.get((org.joda.time.ReadablePartial) localDateTime47, 10800010L);
        int int52 = localDateTime47.getYearOfCentury();
        int[] intArray53 = localDateTime47.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = dateTimeField6.set((org.joda.time.ReadablePartial) localDateTime11, 99, intArray53, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 311053906800000L + "'", long9 == 311053906800000L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(islamicChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1389, 10, 22, 14400010]");
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 69 + "'", int52 == 69);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1969, 12, 31, 82800000]");
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology8 = islamicChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfCentury();
        int int11 = dateTimeField9.getMaximumValue((-5377839L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.DurationField durationField26 = islamicChronology2.minutes();
        org.joda.time.DurationField durationField27 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = islamicChronology2.years();
        boolean boolean30 = durationField29.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = islamicChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        int int17 = localDateTime16.getHourOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.centuryOfEra();
        int int19 = localDateTime16.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        int int23 = localDateTime22.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology26 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField27 = islamicChronology26.weekyears();
        org.joda.time.DurationField durationField28 = islamicChronology26.halfdays();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfYear(11);
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusHours((int) (short) 0);
        int int43 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        long long45 = islamicChronology26.set((org.joda.time.ReadablePartial) localDateTime29, (-24796798031L));
        org.joda.time.LocalDateTime localDateTime47 = localDateTime29.plusYears(2632);
        boolean boolean48 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime47);
        int[] intArray49 = localDateTime47.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = dateTimeField14.addWrapPartial((org.joda.time.ReadablePartial) localDateTime16, 8969, intArray49, 1910);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8969");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(islamicChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[100, 1, 11, 82800001]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 19360358067000L + "'", long45 == 19360358067000L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[4654, 2, 22, 22467000]");
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((int) (byte) -1);
        int int16 = localDateTime12.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.plusHours((int) (byte) 100);
        java.util.Date date21 = localDateTime20.toDate();
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime();
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.DateTime dateTime24 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) instant23);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDateTime1.getValue(6051599);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 6051599");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Jan 05 03:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.clockhourOfDay();
        java.lang.String str28 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = dateTimeField29.set(30043224000000L, 2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "IslamicChronology[+01:00]" + "'", str28, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(45);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = islamicChronology6.weekyears();
        org.joda.time.DurationField durationField8 = islamicChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology6.halfdayOfDay();
        org.joda.time.DurationField durationField11 = islamicChronology6.halfdays();
        org.joda.time.DateTimeZone dateTimeZone12 = islamicChronology6.getZone();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(3600001L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = islamicChronology16.weekyears();
        org.joda.time.DurationField durationField18 = islamicChronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = islamicChronology16.minuteOfHour();
        org.joda.time.DurationField durationField20 = islamicChronology16.hours();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology16.hourOfHalfday();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType22 = islamicChronology16.getLeapYearPatternType();
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12, leapYearPatternType22);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1, leapYearPatternType22);
        org.joda.time.DurationField durationField25 = islamicChronology24.seconds();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology24.era();
        org.joda.time.DurationField durationField28 = islamicChronology24.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(leapYearPatternType22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = property8.getAsShortText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property8.addWrapFieldToCopy(354);
        int int13 = localDateTime12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = islamicChronology16.weekyears();
        org.joda.time.DurationField durationField18 = islamicChronology16.millis();
        org.joda.time.DurationField durationField19 = islamicChronology16.hours();
        org.joda.time.DurationField durationField20 = islamicChronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology16.yearOfEra();
        org.joda.time.DurationField durationField22 = islamicChronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology16.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField23.getType();
        boolean boolean25 = localDateTime12.isSupported(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1);
        int int5 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime7.getFields();
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone11);
        int int14 = timeZone11.getOffset(499841147376000000L);
        java.lang.String str17 = timeZone11.getDisplayName(false, 1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3600000 + "'", int14 == 3600000);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GMT+01:00" + "'", str17, "GMT+01:00");
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        int int12 = localDateTime7.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime7.millisOfSecond();
        long long18 = property17.remainder();
        java.lang.String str19 = property17.getName();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.LocalDateTime localDateTime22 = property17.withMinimumValue();
        int[] intArray24 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime22, (-2938031L));
        int int25 = localDateTime22.getDayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = localDateTime22.toString(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfSecond" + "'", str19, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1389, 10, 22, 661969]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T01:00:00.000" + "'", str27, "1970-01-01T01:00:00.000");
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 2551440384L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears(183);
        int int4 = localDateTime3.size();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plus(readablePeriod5);
        int int7 = localDateTime3.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int14 = localDateTime9.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readablePeriod17);
        int int19 = localDateTime18.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = localDateTime18.getField(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plus(readableDuration23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusMonths(59);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology31 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.millisOfSecond();
        int int33 = property32.get();
        org.joda.time.LocalDateTime localDateTime35 = property32.addToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime36 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusHours(7200000);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology42 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone41);
        org.joda.time.DurationField durationField43 = islamicChronology42.weekyears();
        org.joda.time.DateTimeField dateTimeField44 = islamicChronology42.yearOfEra();
        long long46 = dateTimeField44.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 1);
        int int49 = localDateTime48.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusHours((int) (byte) -1);
        int int52 = localDateTime48.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime48.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime48.minus(readableDuration57);
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.lang.String str61 = dateTimeField44.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, locale59);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plus(readablePeriod62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plus(readablePeriod64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withDayOfYear(5);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 1);
        int int72 = localDateTime71.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withPeriodAdded(readablePeriod75, 10);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withDayOfYear(11);
        int[] intArray80 = localDateTime79.getValues();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property83 = localDateTime79.millisOfSecond();
        int int84 = localDateTime69.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((long) 1);
        int int87 = localDateTime86.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology92 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone91);
        org.joda.time.DurationField durationField93 = islamicChronology92.weekyears();
        org.joda.time.DurationField durationField94 = islamicChronology92.halfdays();
        org.joda.time.DurationFieldType durationFieldType95 = durationField94.getType();
        boolean boolean96 = localDateTime86.isSupported(durationFieldType95);
        boolean boolean97 = localDateTime69.isSupported(durationFieldType95);
        org.joda.time.LocalDateTime localDateTime99 = localDateTime36.withFieldAdded(durationFieldType95, 4);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 44 + "'", int7 == 44);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(islamicChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5785200000L + "'", long46 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970" + "'", str61, "1970");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(islamicChronology92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(durationFieldType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(localDateTime99);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        int int3 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField7 = islamicChronology2.weekyears();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = islamicChronology2.add(readablePeriod8, 178536960000000053L, 411199);
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 178536960000000053L + "'", long11 == 178536960000000053L);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int13 = localDateTime9.getSecondOfMinute();
        int int14 = localDateTime9.getCenturyOfEra();
        long long16 = islamicChronology2.set((org.joda.time.ReadablePartial) localDateTime9, 70L);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.era();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withCenturyOfEra(19);
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime.Property property21 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        int int24 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusHours((int) (byte) -1);
        int int27 = localDateTime23.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.minus(readableDuration32);
        int int34 = localDateTime23.getSecondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime23.getFieldTypes();
        int int36 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime23.plusWeeks(59);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime23.plusHours(7);
        int int41 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        int int42 = property21.getLeapAmount();
        java.lang.String str43 = property21.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 17763840000001L + "'", long16 == 17763840000001L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        int int3 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField5 = islamicChronology2.seconds();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DurationField durationField7 = islamicChronology2.days();
        org.joda.time.DurationField durationField8 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField10 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.minuteOfHour();
        org.joda.time.Chronology chronology9 = islamicChronology2.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = islamicChronology27.years();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        int int36 = localDateTime31.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.minus(readablePeriod39);
        int int41 = localDateTime40.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = localDateTime40.getField(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.centuryOfEra();
        int[] intArray46 = islamicChronology27.get((org.joda.time.ReadablePartial) localDateTime40, (long) 0);
        org.joda.time.DateTimeField dateTimeField47 = islamicChronology27.millisOfDay();
        org.joda.time.DurationField durationField48 = islamicChronology27.centuries();
        org.joda.time.DateTimeZone dateTimeZone49 = islamicChronology27.getZone();
        org.joda.time.Chronology chronology50 = islamicChronology2.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField52 = islamicChronology2.millis();
        org.joda.time.DateTimeField dateTimeField53 = islamicChronology2.millisOfDay();
        java.lang.String str54 = islamicChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(islamicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "IslamicChronology[+01:00]" + "'", str54, "IslamicChronology[+01:00]");
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.monthOfYear();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        boolean boolean11 = strSet8.removeAll((java.util.Collection<java.lang.String>) strSet10);
        java.util.Set<java.lang.String> strSet12 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        boolean boolean17 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean18 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet14);
        boolean boolean19 = strSet8.addAll((java.util.Collection<java.lang.String>) strSet14);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 1);
        int int22 = localDateTime21.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMinuteOfHour(19);
        boolean boolean27 = strSet14.remove((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusMonths(11);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime26.getFields();
        boolean boolean31 = islamicChronology2.equals((java.lang.Object) dateTimeFieldArray30);
        org.joda.time.DateTimeField dateTimeField32 = islamicChronology2.era();
        org.joda.time.DurationField durationField33 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = islamicChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology38 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = islamicChronology38.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = islamicChronology38.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone41 = islamicChronology38.getZone();
        int int43 = dateTimeZone41.getOffsetFromLocal(19800L);
        long long46 = dateTimeZone41.adjustOffset((long) 11, false);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.lang.String str51 = locale49.getISO3Country();
        java.lang.String str52 = dateTimeZone41.getName((long) (short) 0, locale49);
        long long55 = dateTimeZone41.adjustOffset(19373065773802L, false);
        org.joda.time.Chronology chronology56 = islamicChronology2.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField57 = islamicChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(islamicChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3600000 + "'", int43 == 3600000);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 11L + "'", long46 == 11L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "KOR" + "'", str51, "KOR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+01:00" + "'", str52, "+01:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 19373065773802L + "'", long55 == 19373065773802L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.weekOfWeekyear();
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology9.minuteOfDay();
        org.joda.time.DurationField durationField11 = islamicChronology9.months();
        org.joda.time.DurationField durationField12 = islamicChronology9.weeks();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology9.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        int int16 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusHours((int) (byte) -1);
        int int19 = localDateTime15.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = islamicChronology24.weekyears();
        org.joda.time.DurationField durationField26 = islamicChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology24.monthOfYear();
        org.joda.time.Chronology chronology30 = islamicChronology24.withUTC();
        org.joda.time.DurationField durationField31 = islamicChronology24.weekyears();
        org.joda.time.DurationField durationField32 = islamicChronology24.weeks();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology24);
        org.joda.time.DateTimeField dateTimeField34 = islamicChronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = islamicChronology24.weekyear();
        long long39 = islamicChronology24.add((-20217598030L), 2022L, 19);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        int int42 = localDateTime41.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusHours((int) (byte) -1);
        int int45 = localDateTime41.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundCeilingCopy();
        int int50 = localDateTime49.size();
        int int51 = localDateTime49.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology54 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField55 = islamicChronology54.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = islamicChronology54.hourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = islamicChronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = islamicChronology54.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology61 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = islamicChronology61.weekyears();
        org.joda.time.DurationField durationField63 = islamicChronology61.months();
        org.joda.time.DurationField durationField64 = islamicChronology61.centuries();
        org.joda.time.DateTimeZone dateTimeZone65 = islamicChronology61.getZone();
        org.joda.time.Chronology chronology66 = islamicChronology54.withZone(dateTimeZone65);
        org.joda.time.DurationField durationField67 = islamicChronology54.months();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) 2551440384L);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusYears(183);
        int int72 = localDateTime71.size();
        int[] intArray74 = islamicChronology54.get((org.joda.time.ReadablePartial) localDateTime71, 19360357841629L);
        islamicChronology24.validate((org.joda.time.ReadablePartial) localDateTime49, intArray74);
        int int76 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray74);
        int[] intArray78 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, 243524185200000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime15.withDayOfMonth((-69556));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -69556 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-20217559612L) + "'", long39 == (-20217559612L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(islamicChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(islamicChronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2022, 2, 22, 22241629]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[9343, 8, 16, 0]");
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DurationField durationField5 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int13 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withMinuteOfHour((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, (int) 'x');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays(82800001);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusHours(60);
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime18, locale23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime18.withHourOfDay(575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 575 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "3660" + "'", str25, "3660");
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField7 = islamicChronology2.months();
        long long10 = durationField7.subtract((long) 18, (-69556));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 177467932800018L + "'", long10 == 177467932800018L);
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.weekyearOfCentury();
        long long30 = dateTimeField27.add(18682354800000L, (int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 18682354800000L + "'", long30 == 18682354800000L);
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = islamicChronology4.weekyears();
        org.joda.time.DurationField durationField6 = islamicChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology4.secondOfDay();
        boolean boolean11 = strSet1.equals((java.lang.Object) islamicChronology4);
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology4.secondOfDay();
        java.lang.String str13 = islamicChronology4.toString();
        org.joda.time.DurationField durationField14 = islamicChronology4.days();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology4.era();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(islamicChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "IslamicChronology[+01:00]" + "'", str13, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        int int6 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusSeconds((int) ' ');
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.weekyear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property15.getDifference(readableInstant17);
        org.joda.time.LocalDateTime localDateTime20 = property15.setCopy(354);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+01:00" + "'", str3, "+01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1922) + "'", int18 == (-1922));
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setExtension('a', "GMT");
        java.util.Locale.Builder builder9 = builder2.setUnicodeLocaleKeyword("59", "fra");
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "en_US");
        java.util.Locale locale14 = new java.util.Locale("29508223");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder9.setLocale(locale14);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 29508223 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(locale14.toString(), "29508223");
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("3600120");
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("100");
        java.util.Locale locale8 = builder5.build();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.equals((java.lang.Object) 10L);
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeZone11.getShortName(1970L, locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.lang.String str20 = locale16.getCountry();
        java.util.Locale.setDefault(category9, locale16);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(category9, locale22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category9);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setVariant("");
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getScript();
        java.util.Locale.Builder builder31 = builder25.setLocale(locale28);
        java.lang.String str32 = locale28.getDisplayName();
        java.util.Locale.setDefault(category9, locale28);
        java.lang.String str34 = locale28.getDisplayLanguage();
        java.util.Locale.Builder builder35 = builder5.setLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder35.addUnicodeLocaleAttribute("1969-12-31T23:25:00.101");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1969-12-31T23:25:00.101 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JPN" + "'", str17, "JPN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+01:00" + "'", str18, "+01:00");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JP" + "'", str20, "JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "chinois (Chine)" + "'", str32, "chinois (Chine)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.minutes();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withMonthOfYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays(10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withYear(292278993);
        int[] intArray49 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime47, (-42160266000000L));
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime47.getValue(362);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 362");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[12, 10, 19, 0]");
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        int int12 = localDateTime8.getSecondOfMinute();
        int[] intArray19 = new int[] { 292278993, ' ', (short) 1, (short) -1, (byte) -1 };
        int[] intArray21 = dateTimeField6.set((org.joda.time.ReadablePartial) localDateTime8, (int) (byte) 0, intArray19, 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        int int24 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfYear(11);
        int int32 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        int int33 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime8.withYear(3600001);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 12, 1, 0, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 12, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        int int6 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusSeconds((int) ' ');
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.year();
        java.lang.Class<?> wildcardClass16 = localDateTime13.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+01:00" + "'", str3, "+01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = islamicChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology2.getZone();
        long long10 = dateTimeZone8.nextTransition(97L);
        long long12 = dateTimeZone8.convertUTCToLocal((long) 402086);
        java.lang.String str14 = dateTimeZone8.getShortName((-683357L));
        boolean boolean16 = dateTimeZone8.isStandardOffset(17763840000001L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 97L + "'", long10 == 97L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4002086L + "'", long12 == 4002086L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+01:00" + "'", str14, "+01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = islamicChronology11.weekyears();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        boolean boolean17 = dateTimeZone14.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology18 = islamicChronology11.withZone(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = islamicChronology11.add(readablePeriod19, (long) (byte) 0, (-1));
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology11.dayOfMonth();
        boolean boolean24 = dateTimeZone6.equals((java.lang.Object) dateTimeField23);
        java.lang.String str25 = dateTimeZone6.getID();
        java.lang.String str27 = dateTimeZone6.getShortName((long) 3632);
        org.joda.time.chrono.IslamicChronology islamicChronology28 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField29 = islamicChronology28.hours();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(islamicChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+01:00" + "'", str25, "+01:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+01:00" + "'", str27, "+01:00");
        org.junit.Assert.assertNotNull(islamicChronology28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        boolean boolean7 = dateTimeZone6.isFixed();
        java.lang.String str8 = dateTimeZone6.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+01:00" + "'", str8, "+01:00");
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology16.weekyear();
        org.joda.time.ReadablePartial readablePartial18 = null;
        int[] intArray25 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray27 = dateTimeField17.addWrapPartial(readablePartial18, 100, intArray25, (int) (short) 0);
        int int28 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12, intArray25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        int int36 = localDateTime31.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.minus(readablePeriod39);
        int int41 = localDateTime40.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = localDateTime40.getField(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withMonthOfYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withYear(292278993);
        int int51 = localDateTime50.getHourOfDay();
        int int52 = localDateTime50.getCenturyOfEra();
        boolean boolean53 = property29.equals((java.lang.Object) localDateTime50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2922789 + "'", int52 == 2922789);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.year();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = islamicChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology12.millisOfSecond();
        long long19 = dateTimeField16.getDifferenceAsLong((long) 1970, (long) 0);
        long long22 = dateTimeField16.getDifferenceAsLong((long) 11, (-20217598030L));
        long long24 = dateTimeField16.roundHalfFloor(35L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeField16.getAsShortText((long) 5, locale26);
        java.lang.String str29 = dateTimeField16.getAsShortText((long) 101);
        int int31 = dateTimeField16.getMaximumValue((long) 3601970);
        int int32 = dateTimeField16.getMaximumValue();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.lang.String str36 = dateTimeField16.getAsText(42068415600000L, locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        int int38 = dateTimeField9.getMaximumShortTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 1);
        int int41 = localDateTime40.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((int) (byte) -1);
        int int45 = localDateTime40.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime40.minus(readablePeriod48);
        int int50 = localDateTime49.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField52 = localDateTime49.getField(0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime49.centuryOfEra();
        org.joda.time.LocalDateTime.Property property54 = localDateTime49.millisOfSecond();
        int int55 = localDateTime49.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property56 = localDateTime49.yearOfCentury();
        java.lang.String str57 = property56.getAsShortText();
        org.joda.time.LocalDateTime localDateTime59 = property56.addToCopy((int) ' ');
        org.joda.time.LocalDateTime localDateTime60 = property56.getLocalDateTime();
        int int61 = localDateTime60.getHourOfDay();
        int int62 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime60);
        java.util.Date date63 = localDateTime60.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1970L + "'", long19 == 1970L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 20217598041L + "'", long22 == 20217598041L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "5" + "'", str27, "5");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "101" + "'", str29, "101");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str35, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3600001 + "'", int55 == 3600001);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "70" + "'", str57, "70");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 292271022 + "'", int62 == 292271022);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 01:00:00 GMT+01:00 1970");
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDateTime9.getFields();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusDays(4);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        int int19 = localDateTime14.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.minus(readablePeriod22);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = localDateTime23.getField(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.centuryOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean34 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.weekyear();
        int[] intArray37 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime33, 17763840000001L);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 1);
        int int40 = localDateTime39.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusHours((int) (byte) -1);
        int int44 = localDateTime39.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime39.minus(readablePeriod47);
        int int49 = localDateTime48.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField51 = localDateTime48.getField(0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.centuryOfEra();
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime48.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology61 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = islamicChronology61.weekyears();
        org.joda.time.DurationField durationField63 = islamicChronology61.halfdays();
        org.joda.time.DateTimeField dateTimeField64 = islamicChronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = islamicChronology61.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField66 = islamicChronology61.weekyear();
        org.joda.time.DurationField durationField67 = islamicChronology61.days();
        org.joda.time.DateTimeField dateTimeField68 = islamicChronology61.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField68.getType();
        boolean boolean70 = localDateTime58.isSupported(dateTimeFieldType69);
        int int71 = localDateTime33.get(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property72 = localDateTime33.weekyear();
        org.joda.time.LocalDateTime localDateTime74 = property72.setCopy(2);
        org.joda.time.DurationField durationField75 = property72.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 1);
        int int78 = localDateTime77.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology83 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone82);
        org.joda.time.DateTime dateTime84 = localDateTime77.toDateTime(dateTimeZone82);
        int int85 = property72.getDifference((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 1);
        int int88 = localDateTime87.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime87.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology93 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone92);
        org.joda.time.DateTime dateTime94 = localDateTime87.toDateTime(dateTimeZone92);
        long long95 = dateTime94.getMillis();
        long long96 = dateTime94.getMillis();
        org.joda.time.Instant instant97 = dateTime94.toInstant();
        java.lang.String str98 = instant97.toString();
        boolean boolean99 = dateTime84.isAfter((org.joda.time.ReadableInstant) instant97);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 3600001]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(islamicChronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(islamicChronology83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(islamicChronology93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1L + "'", long95 == 1L);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
        org.junit.Assert.assertNotNull(instant97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str98, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = islamicChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology3.getZone();
        java.lang.String str7 = dateTimeZone6.toString();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), dateTimeZone6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("");
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        timeZone12.setRawOffset(11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
        long long20 = dateTimeZone6.getMillisKeepLocal(dateTimeZone16, 115200999L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int23 = dateTimeZone16.getOffset((long) 349200000);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology26 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField27 = islamicChronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology26.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = islamicChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = islamicChronology26.year();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType33 = islamicChronology26.getLeapYearPatternType();
        org.joda.time.chrono.IslamicChronology islamicChronology34 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16, leapYearPatternType33);
        org.joda.time.DateTimeField dateTimeField35 = islamicChronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = islamicChronology34.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = islamicChronology34.dayOfWeek();
        boolean boolean39 = dateTimeField37.isLeap(19244156357100L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+01:00" + "'", str7, "+01:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(islamicChronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 118800999L + "'", long20 == 118800999L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(islamicChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(leapYearPatternType33);
        org.junit.Assert.assertNotNull(islamicChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(13, 24263, 22, 53, 59817, 296063880);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withMonthOfYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays(10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusHours((int) (byte) -1);
        int int24 = localDateTime20.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.centuryOfEra();
        java.lang.String str28 = localDateTime26.toString();
        int int29 = localDateTime26.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.era();
        int int31 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:25:00.001" + "'", str28, "1970-01-01T00:25:00.001");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        boolean boolean18 = property11.equals((java.lang.Object) 59);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDateTime23.getFields();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusDays(4);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime37.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean48 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.weekyear();
        boolean boolean50 = property11.equals((java.lang.Object) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 1);
        int int53 = localDateTime52.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology58 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField59 = islamicChronology58.weekyears();
        org.joda.time.DurationField durationField60 = islamicChronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField61 = islamicChronology58.yearOfEra();
        org.joda.time.DurationField durationField62 = islamicChronology58.halfdays();
        org.joda.time.DurationFieldType durationFieldType63 = durationField62.getType();
        boolean boolean64 = localDateTime52.isSupported(durationFieldType63);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime47.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = localDateTime67.toString(dateTimeFormatter69);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(islamicChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T01:00:05.090" + "'", str70, "1970-01-01T01:00:05.090");
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        long long6 = dateTimeField4.roundCeiling(0L);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.lang.String str12 = dateTimeField4.getAsShortText(355, locale9);
        java.lang.Object obj13 = locale9.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 5785200000L + "'", long6 == 5785200000L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JPN" + "'", str10, "JPN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "355" + "'", str12, "355");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "ja_JP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "ja_JP");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "ja_JP");
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = islamicChronology23.weekyears();
        org.joda.time.DurationField durationField25 = islamicChronology23.halfdays();
        org.joda.time.DurationField durationField26 = islamicChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        int int30 = localDateTime29.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime32.getFields();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField27.getType();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime18.withField(dateTimeFieldType38, (int) ' ');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime18.plusSeconds(1);
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = localDateTime18.getFields();
        int int44 = localDateTime18.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMaximumValue();
        org.joda.time.DurationField durationField11 = property8.getDurationField();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology15.weekyear();
        org.joda.time.DurationField durationField17 = islamicChronology15.years();
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = islamicChronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology15.halfdayOfDay();
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeField23.getAsShortText((int) (byte) 10, locale25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withDayOfYear(11);
        int[] intArray37 = localDateTime36.getValues();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.weekOfWeekyear();
        java.util.Locale locale41 = new java.util.Locale("");
        java.lang.String str42 = locale41.getISO3Language();
        java.util.Locale locale44 = new java.util.Locale("");
        java.lang.String str45 = locale41.getDisplayLanguage(locale44);
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Locale locale50 = new java.util.Locale("weekOfWeekyear", "millisOfSecond");
        java.lang.String str51 = locale47.getDisplayScript(locale50);
        java.lang.String str52 = locale44.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime36, 33, locale50);
        boolean boolean54 = property8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.LocalDateTime localDateTime55 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime56 = property8.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "19" + "'", str12, "19");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10" + "'", str26, "10");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale50.toString(), "weekofweekyear_MILLISOFSECOND");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "33" + "'", str53, "33");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField7 = islamicChronology2.centuries();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone14);
        long long20 = dateTimeZone14.convertLocalToUTC(0L, true, (-4320000001L));
        java.lang.String str22 = dateTimeZone14.getNameKey((long) 1443);
        org.joda.time.Chronology chronology23 = islamicChronology2.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.minusMonths(59);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        java.lang.String str20 = property19.getAsText();
        org.joda.time.LocalDateTime localDateTime21 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withSecondOfMinute(34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "5" + "'", str20, "5");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.DurationField durationField26 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField29 = islamicChronology2.centuries();
        org.joda.time.DurationField durationField30 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = islamicChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology35 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 1);
        int int38 = localDateTime37.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = localDateTime40.getFields();
        boolean boolean42 = dateTimeZone34.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.Chronology chronology44 = islamicChronology2.withZone(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(islamicChronology35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        boolean boolean4 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet3);
        java.lang.Object[] objArray5 = strSet1.toArray();
        boolean boolean7 = strSet1.equals((java.lang.Object) 342000000L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int13 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.plusHours((int) (byte) 100);
        int int18 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withWeekOfWeekyear(9);
        java.util.Date date21 = localDateTime20.toDate();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromDateFields(date21);
        boolean boolean23 = strSet1.equals((java.lang.Object) date21);
        java.lang.Object[] objArray24 = strSet1.toArray();
        java.lang.Object[] objArray25 = strSet1.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3600001 + "'", int18 == 3600001);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Feb 26 01:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = islamicChronology23.weekyears();
        org.joda.time.DurationField durationField25 = islamicChronology23.halfdays();
        org.joda.time.DurationField durationField26 = islamicChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        int int30 = localDateTime29.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime32.getFields();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField27.getType();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime18.withField(dateTimeFieldType38, (int) ' ');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.centuryOfEra();
        java.lang.String str42 = property41.toString();
        org.joda.time.LocalDateTime localDateTime43 = property41.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 1);
        int int46 = localDateTime45.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusHours((int) (byte) -1);
        int int50 = localDateTime45.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime45.minus(readablePeriod53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime45.millisOfSecond();
        long long56 = property55.remainder();
        java.lang.String str57 = property55.getName();
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.lang.String str59 = property55.getAsText(locale58);
        org.joda.time.LocalDateTime localDateTime60 = property55.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plus(readablePeriod63);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology67 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone66);
        org.joda.time.DurationField durationField68 = islamicChronology67.weekyears();
        org.joda.time.DurationField durationField69 = islamicChronology67.halfdays();
        org.joda.time.DurationField durationField70 = islamicChronology67.weeks();
        org.joda.time.DateTimeField dateTimeField71 = islamicChronology67.yearOfEra();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 1);
        int int74 = localDateTime73.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = localDateTime76.getFields();
        java.util.Locale locale78 = java.util.Locale.KOREA;
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.lang.String str80 = locale78.getDisplayLanguage(locale79);
        java.lang.String str81 = dateTimeField71.getAsText((org.joda.time.ReadablePartial) localDateTime76, locale78);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = dateTimeField71.getType();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime62.withField(dateTimeFieldType82, (int) ' ');
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime84.plus(readablePeriod86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime84.centuryOfEra();
        java.lang.String str89 = property88.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property88.getFieldType();
        int int91 = localDateTime43.get(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[centuryOfEra]" + "'", str42, "Property[centuryOfEra]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "millisOfSecond" + "'", str57, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(islamicChronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str80, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970" + "'", str81, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0" + "'", str89, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2922789 + "'", int91 == 2922789);
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = property8.getAsShortText(locale9);
        java.lang.String str11 = property8.getName();
        org.joda.time.LocalDateTime localDateTime12 = property8.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property8.getFieldType();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "centuryOfEra" + "'", str11, "centuryOfEra");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.equals((java.lang.Object) 10L);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = dateTimeZone1.getShortName(1970L, locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        boolean boolean14 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet19);
        boolean boolean21 = strSet15.addAll((java.util.Collection<java.lang.String>) strSet17);
        boolean boolean22 = strSet11.addAll((java.util.Collection<java.lang.String>) strSet17);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int25 = localDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour(19);
        boolean boolean30 = strSet17.remove((java.lang.Object) localDateTime29);
        boolean boolean31 = strSet9.addAll((java.util.Collection<java.lang.String>) strSet17);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        int int34 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((int) (byte) -1);
        int int38 = localDateTime33.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.minus(readablePeriod41);
        int int43 = localDateTime42.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = localDateTime42.getField(0);
        int int47 = dateTimeField45.getMaximumValue((long) (byte) 100);
        int int49 = dateTimeField45.get(70L);
        boolean boolean50 = strSet9.contains((java.lang.Object) dateTimeField45);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("");
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        timeZone54.setRawOffset(11);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.toLanguageTag();
        java.lang.String str62 = dateTimeZone58.getShortName((long) 'u', locale60);
        java.util.Set<java.lang.String> strSet63 = locale60.getUnicodeLocaleKeys();
        boolean boolean64 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet63);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology67 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone66);
        org.joda.time.DurationField durationField68 = islamicChronology67.weekyears();
        org.joda.time.DateTimeField dateTimeField69 = islamicChronology67.hourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = islamicChronology67.millisOfSecond();
        java.lang.String str71 = islamicChronology67.toString();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology74 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone73);
        java.lang.String str75 = dateTimeZone73.toString();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 1);
        int int78 = localDateTime77.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withPeriodAdded(readablePeriod81, 10);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime80.plusSeconds((int) ' ');
        boolean boolean86 = dateTimeZone73.isLocalDateTimeGap(localDateTime85);
        org.joda.time.Chronology chronology87 = islamicChronology67.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField88 = islamicChronology67.seconds();
        boolean boolean89 = strSet9.equals((java.lang.Object) islamicChronology67);
        org.joda.time.DateTimeField dateTimeField90 = islamicChronology67.millisOfDay();
        org.joda.time.DurationField durationField91 = islamicChronology67.minutes();
        org.joda.time.DateTimeField dateTimeField92 = islamicChronology67.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JPN" + "'", str7, "JPN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+01:00" + "'", str8, "+01:00");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292278993 + "'", int47 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(islamicChronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "IslamicChronology[+01:00]" + "'", str71, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(islamicChronology74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+01:00" + "'", str75, "+01:00");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("CN", 0.0d);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        java.lang.String str5 = languageRange2.getRange();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        java.lang.String str8 = languageRange2.getRange();
        java.lang.String str9 = languageRange2.getRange();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cn" + "'", str4, "cn");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "cn" + "'", str5, "cn");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "cn" + "'", str7, "cn");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cn" + "'", str8, "cn");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cn" + "'", str9, "cn");
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.weekyear();
        int int10 = dateTimeField9.getMaximumValue();
        long long12 = dateTimeField9.roundHalfFloor(6652800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292271022 + "'", int10 == 292271022);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5785200000L + "'", long12 == 5785200000L);
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getID();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((-20217598030L), dateTimeZone15);
        org.joda.time.Chronology chronology20 = islamicChronology2.withZone(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        int int26 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusHours((int) (byte) -1);
        int int30 = localDateTime25.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        int int35 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusHours((int) (byte) -1);
        int int39 = localDateTime34.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.minus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime34.millisOfSecond();
        long long45 = property44.remainder();
        java.lang.String str46 = property44.getName();
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.lang.String str48 = property44.getAsText(locale47);
        org.joda.time.LocalDateTime localDateTime49 = property44.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plus(readablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology56 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = islamicChronology56.weekyears();
        org.joda.time.DurationField durationField58 = islamicChronology56.halfdays();
        org.joda.time.DurationField durationField59 = islamicChronology56.weeks();
        org.joda.time.DateTimeField dateTimeField60 = islamicChronology56.yearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 1);
        int int63 = localDateTime62.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = localDateTime65.getFields();
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale67.getDisplayLanguage(locale68);
        java.lang.String str70 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime65, locale67);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField60.getType();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime51.withField(dateTimeFieldType71, (int) ' ');
        int int74 = localDateTime32.get(dateTimeFieldType71);
        boolean boolean75 = localDateTime23.isSupported(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime23.withWeekyear((int) (short) -1);
        java.lang.String str78 = localDateTime23.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+01:00" + "'", str18, "+01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "millisOfSecond" + "'", str46, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(islamicChronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str69, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970" + "'", str70, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-22T08:14:28.949" + "'", str78, "2022-02-22T08:14:28.949");
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        long long6 = dateTimeField4.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        int int12 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.minus(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears(100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(9);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.withMillisOfSecond(19);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfDay((-1922));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1922 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 5785200000L + "'", long6 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withHourOfDay(5);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes(1969);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = islamicChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = islamicChronology10.add(readablePeriod14, (long) 11, 82800001);
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology10.monthOfYear();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("1969-12-31T22:25:00.001");
        java.lang.String str22 = dateTimeField18.getAsShortText((-16703), locale21);
        java.lang.String str24 = locale21.getExtension('u');
        int int25 = property7.getMaximumShortTextLength(locale21);
        int int26 = property7.get();
        org.joda.time.LocalDateTime localDateTime27 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 11L + "'", long17 == 11L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-16703" + "'", str22, "-16703");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology2);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = islamicChronology2.getDateTimeMillis((-1010949492), (-306028799), 336959, 32000, 355, 362, 5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.minusMonths(59);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = property19.setCopy("-1363464");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1363464 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("GMT");
        java.util.Set<java.lang.String> strSet2 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        boolean boolean7 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet6);
        boolean boolean8 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale12.getVariant();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale12, locale14, locale15, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = null;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        boolean boolean25 = strSet4.remove((java.lang.Object) localeList21);
        boolean boolean26 = strSet4.isEmpty();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        boolean boolean41 = strSet4.remove((java.lang.Object) 0);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getISO3Country();
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        boolean boolean47 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.Spliterator<java.lang.String> strSpliterator48 = strSet4.spliterator();
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode49);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale locale53 = locale51.stripExtensions();
        java.lang.String str54 = locale51.getDisplayCountry();
        java.util.Set<java.lang.String> strSet55 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.setVariant("");
        java.util.Locale.Builder builder61 = builder59.setVariant("1970");
        java.util.Locale locale62 = builder59.build();
        java.util.Locale.setDefault(category56, locale62);
        boolean boolean64 = strSet55.contains((java.lang.Object) locale62);
        java.lang.Object[] objArray65 = strSet55.toArray();
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet55, filteringMode66);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FR" + "'", str16, "FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "KOR" + "'", str45, "KOR");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode49.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ub300\ub9cc" + "'", str54, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime1.toDateTime(dateTimeZone6);
        long long9 = dateTime8.getMillis();
        long long10 = dateTime8.getMillis();
        org.joda.time.Instant instant11 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = islamicChronology14.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone17);
        boolean boolean20 = dateTimeZone17.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology21 = islamicChronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology14.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L);
        int int25 = localDateTime24.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology28 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology28.weekyear();
        org.joda.time.ReadablePartial readablePartial30 = null;
        int[] intArray37 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray39 = dateTimeField29.addWrapPartial(readablePartial30, 100, intArray37, (int) (short) 0);
        int int41 = dateTimeField29.getMinimumValue((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 1);
        int int44 = localDateTime43.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusSeconds((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology54 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = islamicChronology54.weekyear();
        org.joda.time.ReadablePartial readablePartial56 = null;
        int[] intArray63 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray65 = dateTimeField55.addWrapPartial(readablePartial56, 100, intArray63, (int) (short) 0);
        int int66 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime51, intArray65);
        int int67 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime24, intArray65);
        boolean boolean68 = instant11.equals((java.lang.Object) intArray65);
        org.joda.time.DateTimeZone dateTimeZone69 = instant11.getZone();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 1);
        int int72 = localDateTime71.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withPeriodAdded(readablePeriod75, 10);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withDayOfYear(11);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withYear(10);
        org.joda.time.DateTime dateTime82 = localDateTime79.toDateTime();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.withYear((int) (byte) 10);
        boolean boolean85 = instant11.equals((java.lang.Object) localDateTime79);
        long long86 = instant11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone87 = instant11.getZone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(islamicChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(islamicChronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(islamicChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(islamicChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 292271022 + "'", int66 == 292271022);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone87);
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "1969");
        java.util.Locale locale10 = builder6.build();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getISO3Country();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "FR");
        java.util.Locale.Builder builder20 = builder18.addUnicodeLocaleAttribute("KOR");
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        java.lang.String str23 = locale12.getDisplayVariant(locale21);
        java.util.Locale.Builder builder24 = builder6.setLocale(locale12);
        java.util.Locale.Builder builder25 = builder6.clear();
        java.util.Locale.Builder builder26 = builder6.clearExtensions();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale.Builder builder29 = builder26.removeUnicodeLocaleAttribute("Dienstag");
        java.util.Locale.Builder builder30 = builder26.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder26.setScript("datetimefield[minuteofhour]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: datetimefield[minuteofhour] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN_#x-1969");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "KOR" + "'", str14, "KOR");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField10 = islamicChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        int int5 = timeZone3.getRawOffset();
        timeZone3.setID("IslamicChronology[+01:00]");
        java.util.TimeZone.setDefault(timeZone3);
        timeZone3.setRawOffset(33);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear(19);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = property13.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = property13.addToCopy(49);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str6 = nameProvider2.getName(locale3, "JPN", "0");
        java.lang.String str7 = locale0.getDisplayName(locale3);
        java.lang.Object obj8 = locale0.clone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(69);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        int int16 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime18.getFields();
        boolean boolean20 = dateTimeZone12.isLocalDateTimeGap(localDateTime18);
        long long22 = dateTimeZone12.convertUTCToLocal((-3598030L));
        long long24 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, (long) 283);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) locale0, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4" + "'", str7, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "en");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1970L + "'", long22 == 1970L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 244800283L + "'", long24 == 244800283L);
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.hourOfHalfday();
        int int10 = dateTimeField8.getMinimumValue(19360365045191L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((int) (byte) -1);
        int int16 = localDateTime12.getSecondOfMinute();
        int int17 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusWeeks(355);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMonths(1443);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        int int24 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDateTime26.getFields();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusDays(4);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        int int36 = localDateTime31.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.minus(readablePeriod39);
        int int41 = localDateTime40.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = localDateTime40.getField(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.centuryOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime40.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean51 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime50.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property57.getFieldType();
        int int59 = localDateTime19.get(dateTimeFieldType58);
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder61.setVariant("");
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = locale64.getScript();
        java.util.Locale.Builder builder67 = builder61.setLocale(locale64);
        java.util.Locale.Builder builder70 = builder67.setExtension('x', "1969");
        java.util.Locale locale71 = builder67.build();
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str73 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 1380, locale71);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN_#x-1969");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1380" + "'", str73, "1380");
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("3600120");
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("100");
        java.util.Locale locale8 = builder5.build();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.equals((java.lang.Object) 10L);
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeZone11.getShortName(1970L, locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.lang.String str20 = locale16.getCountry();
        java.util.Locale.setDefault(category9, locale16);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(category9, locale22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category9);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setVariant("");
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getScript();
        java.util.Locale.Builder builder31 = builder25.setLocale(locale28);
        java.lang.String str32 = locale28.getDisplayName();
        java.util.Locale.setDefault(category9, locale28);
        java.lang.String str34 = locale28.getDisplayLanguage();
        java.util.Locale.Builder builder35 = builder5.setLocale(locale28);
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology39 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.equals((java.lang.Object) 10L);
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.lang.String str44 = locale43.getISO3Country();
        java.lang.String str45 = dateTimeZone38.getShortName(1970L, locale43);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleKeys();
        java.lang.String str47 = locale43.getCountry();
        java.util.Locale.setDefault(category36, locale43);
        java.util.Locale locale49 = java.util.Locale.getDefault(category36);
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = locale49.getDisplayVariant();
        java.util.Locale.Builder builder52 = builder35.setLocale(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder55 = builder52.setExtension('x', "\uc624\uc804");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JPN" + "'", str17, "JPN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+01:00" + "'", str18, "+01:00");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JP" + "'", str20, "JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "chinois (Chine)" + "'", str32, "chinois (Chine)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(islamicChronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JPN" + "'", str44, "JPN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+01:00" + "'", str45, "+01:00");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JP" + "'", str47, "JP");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja-JP" + "'", str50, "ja-JP");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.minuteOfDay();
        java.lang.String str5 = dateTimeField4.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int13 = localDateTime12.getCenturyOfEra();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        java.lang.String str21 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, (int) (byte) 1, locale19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        int int26 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusHours((int) (byte) -1);
        int int30 = localDateTime25.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.minus(readablePeriod33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime25.millisOfSecond();
        long long36 = property35.remainder();
        java.lang.String str37 = property35.getName();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.lang.String str39 = property35.getAsText(locale38);
        org.joda.time.LocalDateTime localDateTime40 = property35.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology43 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.equals((java.lang.Object) 10L);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeZone42.getShortName(1970L, locale47);
        org.joda.time.DateTime dateTime50 = localDateTime40.toDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime40.plusMonths(7);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 1);
        int int55 = localDateTime54.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray58 = localDateTime57.getFields();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withYearOfCentury(10);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 1);
        int int63 = localDateTime62.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withPeriodAdded(readablePeriod66, 10);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withDayOfYear(11);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = localDateTime70.getFieldType((int) (byte) 0);
        int int74 = localDateTime57.get(dateTimeFieldType73);
        int int75 = localDateTime40.indexOf(dateTimeFieldType73);
        int int76 = localDateTime23.get(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str5, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str20, "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millisOfSecond" + "'", str37, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(islamicChronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JPN" + "'", str48, "JPN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+01:00" + "'", str49, "+01:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldArray58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale8.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = islamicChronology13.weekyears();
        org.joda.time.DurationField durationField15 = islamicChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology13.minuteOfHour();
        org.joda.time.DurationField durationField18 = islamicChronology13.centuries();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology13);
        org.joda.time.DurationField durationField20 = islamicChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = islamicChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = islamicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology27.yearOfEra();
        long long31 = dateTimeField29.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        int int34 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((int) (byte) -1);
        int int37 = localDateTime33.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.minus(readableDuration42);
        java.util.Locale locale44 = java.util.Locale.PRC;
        java.util.Locale locale45 = locale44.stripExtensions();
        java.lang.String str46 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, locale44);
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.util.Locale locale48 = locale47.stripExtensions();
        int int49 = dateTimeField29.getMaximumTextLength(locale47);
        java.lang.String str50 = dateTimeField23.getAsShortText((int) ' ', locale47);
        java.lang.String str51 = locale8.getDisplayVariant(locale47);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(islamicChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5785200000L + "'", long31 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "32" + "'", str50, "32");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        java.lang.String[] strArray8 = new java.lang.String[] { "millisOfSecond", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "KOR", "FR", "\u5927\u97d3\u6c11\u56fd", "\u5927\u97d3\u6c11\u56fd", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        int int11 = strSet9.size();
        java.util.Set<java.lang.String> strSet12 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        boolean boolean17 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean18 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet14);
        boolean boolean19 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = locale20.stripExtensions();
        java.lang.String str23 = locale20.getDisplayCountry();
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet25 = locale20.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet25.spliterator();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        boolean boolean31 = strSet28.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Set<java.lang.String> strSet32 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        boolean boolean37 = strSet34.removeAll((java.util.Collection<java.lang.String>) strSet36);
        boolean boolean38 = strSet32.addAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean39 = strSet28.addAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean40 = strSet25.containsAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean41 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet25);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(45, 24);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        boolean boolean46 = strSet25.contains((java.lang.Object) localDateTime45);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub300\ub9cc" + "'", str23, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField7 = islamicChronology2.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 3600);
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField8 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField10 = islamicChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = islamicChronology2.getDateTimeMillis(19386601200000L, 45, 270, 23, 355);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        java.lang.String[] strArray1 = new java.lang.String[] { "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.Object[] objArray4 = strSet2.toArray();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet2.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream6 = strSet2.stream();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet2.parallelStream();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        boolean boolean12 = dateTimeZone9.equals((java.lang.Object) 10L);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = dateTimeZone9.getShortName(1970L, locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleKeys();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        boolean boolean22 = strSet19.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.Set<java.lang.String> strSet23 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        boolean boolean28 = strSet25.removeAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean29 = strSet23.addAll((java.util.Collection<java.lang.String>) strSet25);
        boolean boolean30 = strSet19.addAll((java.util.Collection<java.lang.String>) strSet25);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 1);
        int int33 = localDateTime32.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMinuteOfHour(19);
        boolean boolean38 = strSet25.remove((java.lang.Object) localDateTime37);
        boolean boolean39 = strSet17.addAll((java.util.Collection<java.lang.String>) strSet25);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        int int42 = localDateTime41.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusHours((int) (byte) -1);
        int int46 = localDateTime41.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.minus(readablePeriod49);
        int int51 = localDateTime50.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField53 = localDateTime50.getField(0);
        int int55 = dateTimeField53.getMaximumValue((long) (byte) 100);
        int int57 = dateTimeField53.get(70L);
        boolean boolean58 = strSet17.contains((java.lang.Object) dateTimeField53);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology61 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = islamicChronology61.weekyears();
        org.joda.time.DateTimeField dateTimeField63 = islamicChronology61.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = islamicChronology61.year();
        org.joda.time.DateTimeField dateTimeField65 = islamicChronology61.weekOfWeekyear();
        boolean boolean66 = strSet17.contains((java.lang.Object) dateTimeField65);
        boolean boolean67 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet17);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1970]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1970]");
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JPN" + "'", str15, "JPN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+01:00" + "'", str16, "+01:00");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 292278993 + "'", int55 == 292278993);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(islamicChronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        long long5 = dateTimeZone1.nextTransition((long) 1);
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_INDIAN;
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1, leapYearPatternType6);
        org.joda.time.DurationField durationField8 = islamicChronology7.months();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology7.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField10.set(3582221793696L, "IslamicChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"IslamicChronology[UTC]\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+01:00" + "'", str3, "+01:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(leapYearPatternType6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = islamicChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology3.getZone();
        java.lang.String str7 = dateTimeZone6.toString();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), dateTimeZone6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("");
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        timeZone12.setRawOffset(11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
        long long20 = dateTimeZone6.getMillisKeepLocal(dateTimeZone16, 115200999L);
        long long22 = dateTimeZone6.convertUTCToLocal((-2013L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+01:00" + "'", str7, "+01:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(islamicChronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 118800999L + "'", long20 == 118800999L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3597987L + "'", long22 == 3597987L);
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("1970");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("\ud55c\uad6d\uc5b4");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("hi!");
        org.joda.time.DateTimeZone dateTimeZone11 = provider0.getZone("JP");
        org.joda.time.DateTimeZone dateTimeZone13 = provider0.getZone("53");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNull(dateTimeZone13);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((-16607), (int) 'x', (-1010949492), (-1), 248400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = islamicChronology9.weekyears();
        org.joda.time.DurationField durationField11 = islamicChronology9.months();
        org.joda.time.DurationField durationField12 = islamicChronology9.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = islamicChronology9.getZone();
        org.joda.time.Chronology chronology14 = islamicChronology2.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = islamicChronology20.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology20.yearOfEra();
        long long24 = dateTimeField22.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours((int) (byte) -1);
        int int30 = localDateTime26.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.minus(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, locale37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusMillis(9);
        int int42 = localDateTime41.getDayOfMonth();
        int int43 = localDateTime41.getDayOfYear();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.weekyear();
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime41.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology49 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone48);
        org.joda.time.DurationField durationField50 = islamicChronology49.weekyears();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology53 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology56 = islamicChronology49.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField57 = islamicChronology49.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 1);
        int int60 = localDateTime59.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology63 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = islamicChronology63.weekyear();
        org.joda.time.ReadablePartial readablePartial65 = null;
        int[] intArray72 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray74 = dateTimeField64.addWrapPartial(readablePartial65, 100, intArray72, (int) (short) 0);
        int int75 = dateTimeField57.getMaximumValue((org.joda.time.ReadablePartial) localDateTime59, intArray72);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 1);
        int int78 = localDateTime77.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.minusHours((int) (byte) -1);
        int int82 = localDateTime77.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime77.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusWeeks(60);
        int int90 = localDateTime89.size();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime89.plusSeconds((-3600000));
        org.joda.time.LocalDateTime localDateTime94 = localDateTime92.minusMonths(2922711);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime92.withSecondOfMinute(0);
        boolean boolean97 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime96);
        int[] intArray99 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime41, (long) 3600010);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5785200000L + "'", long24 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(islamicChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(islamicChronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(islamicChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 11 + "'", int75 == 11);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[1389, 10, 22, 7200010]");
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.era();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = dateTimeField7.getAsShortText(3600004L, locale9);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        int int14 = localDateTime13.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusHours((int) (byte) -1);
        int int18 = localDateTime13.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minus(readablePeriod21);
        int int23 = localDateTime22.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = localDateTime22.getField(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.centuryOfEra();
        int int27 = property26.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone29);
        boolean boolean32 = dateTimeZone29.equals((java.lang.Object) 10L);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeZone29.getShortName(1970L, locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        java.lang.String str38 = property26.getAsShortText(locale34);
        java.lang.String str39 = locale9.getDisplayScript(locale34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ita" + "'", str10, "ita");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AH" + "'", str11, "AH");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2922789 + "'", int27 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(islamicChronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JPN" + "'", str35, "JPN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+01:00" + "'", str36, "+01:00");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "19" + "'", str38, "19");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.DurationField durationField26 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(12);
        org.joda.time.Chronology chronology32 = islamicChronology2.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.era();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.millisOfSecond();
        int int10 = localDateTime1.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minusDays(82800001);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime1.toString(dateTimeFormatter13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime1.getFieldType(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 13");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T01:00:00.001" + "'", str14, "1970-01-01T01:00:00.001");
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone23);
        long long26 = dateTime25.getMillis();
        boolean boolean27 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        int int32 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusWeeks(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 86399999 + "'", int32 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int13 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime15, (int) (short) 100, locale18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localDateTime15.getFields();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withPeriodAdded(readablePeriod21, 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100" + "'", str19, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = islamicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology6.weekyear();
        org.joda.time.DurationField durationField8 = islamicChronology6.weekyears();
        org.joda.time.DateTimeZone dateTimeZone9 = islamicChronology6.getZone();
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology10.getZone();
        long long14 = dateTimeZone11.adjustOffset((long) (byte) 10, true);
        java.lang.String str16 = dateTimeZone11.getNameKey((long) 292278993);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = islamicChronology23.weekyears();
        org.joda.time.DurationField durationField25 = islamicChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology23.yearOfEra();
        org.joda.time.DurationField durationField27 = islamicChronology23.halfdays();
        org.joda.time.DurationFieldType durationFieldType28 = durationField27.getType();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withFieldAdded(durationFieldType28, (int) '#');
        boolean boolean31 = dateTimeZone11.isLocalDateTimeGap(localDateTime30);
        org.joda.time.Chronology chronology32 = islamicChronology1.withZone(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((-169L), dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        java.util.Locale locale1 = new java.util.Locale("1970-01-01T00:25:00.001");
        java.lang.String str2 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "1970-01-01t00:25:00.001");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        boolean boolean18 = property11.equals((java.lang.Object) 59);
        org.joda.time.DurationField durationField19 = property11.getDurationField();
        org.joda.time.LocalDateTime localDateTime20 = property11.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology23.secondOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology23.seconds();
        boolean boolean27 = localDateTime20.equals((java.lang.Object) durationField26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withWeekyear(2922789);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.monthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField10 = islamicChronology2.days();
        org.joda.time.DurationField durationField11 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        int int3 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear(11);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours((int) (short) 0);
        int int14 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        int int17 = localDateTime16.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDateTime16.toDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        int int26 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology31 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone30);
        long long33 = dateTime32.getMillis();
        boolean boolean34 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime32);
        long long35 = dateTime32.getMillis();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology38 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = islamicChronology38.weekyears();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology42 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology45 = islamicChronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField46 = islamicChronology38.hourOfHalfday();
        org.joda.time.DurationField durationField47 = dateTimeField46.getRangeDurationField();
        boolean boolean48 = dateTime32.equals((java.lang.Object) durationField47);
        org.joda.time.Instant instant49 = dateTime32.toInstant();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 1);
        int int52 = localDateTime51.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.minusHours((int) (byte) -1);
        int int56 = localDateTime51.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime51.minus(readablePeriod59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime51.millisOfSecond();
        long long62 = property61.remainder();
        java.lang.String str63 = property61.getName();
        java.util.Locale locale64 = java.util.Locale.CHINA;
        java.lang.String str65 = property61.getAsText(locale64);
        org.joda.time.LocalDateTime localDateTime66 = property61.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plus(readablePeriod69);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology73 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone72);
        org.joda.time.DurationField durationField74 = islamicChronology73.weekyears();
        org.joda.time.DurationField durationField75 = islamicChronology73.halfdays();
        org.joda.time.DurationField durationField76 = islamicChronology73.weeks();
        org.joda.time.DateTimeField dateTimeField77 = islamicChronology73.yearOfEra();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 1);
        int int80 = localDateTime79.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray83 = localDateTime82.getFields();
        java.util.Locale locale84 = java.util.Locale.KOREA;
        java.util.Locale locale85 = java.util.Locale.KOREA;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.lang.String str87 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime82, locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField77.getType();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime68.withField(dateTimeFieldType88, (int) ' ');
        boolean boolean91 = instant49.isSupported(dateTimeFieldType88);
        org.joda.time.DateTime dateTime92 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) instant49);
        org.joda.time.DateTimeZone dateTimeZone93 = instant49.getZone();
        org.joda.time.Instant instant94 = instant49.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(islamicChronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(islamicChronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(islamicChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(islamicChronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(islamicChronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldArray83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str86, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970" + "'", str87, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(instant94);
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder8 = builder3.addUnicodeLocaleAttribute("2022");
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.lang.String str16 = locale9.getDisplayScript(locale12);
        java.lang.String str17 = locale9.getVariant();
        java.util.Locale.Builder builder18 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder20 = builder18.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder20.setUnicodeLocaleKeyword("era", "23");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: era [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JPN" + "'", str13, "JPN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int14 = localDateTime9.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readablePeriod17);
        int int19 = localDateTime18.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = localDateTime18.getField(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.centuryOfEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean29 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.plusMinutes(24);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.dayOfYear();
        java.lang.String str39 = property38.getAsString();
        java.lang.String str40 = property38.getAsText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.Interval interval17 = property11.toInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = islamicChronology20.weekyears();
        org.joda.time.DurationField durationField22 = islamicChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology20.era();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.secondOfMinute();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.lang.String str27 = dateTimeField24.getAsText(17763840000100L, locale26);
        java.lang.String str28 = property11.getAsShortText(locale26);
        org.joda.time.LocalDateTime localDateTime29 = property11.withMinimumValue();
        boolean boolean30 = property11.isLeap();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 1);
        int int33 = localDateTime32.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology38 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDateTime32.toDateTime(dateTimeZone37);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = dateTime39.isAfter(readableInstant40);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 1);
        int int44 = localDateTime43.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology49 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDateTime43.toDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 1);
        int int53 = localDateTime52.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology58 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDateTime52.toDateTime(dateTimeZone57);
        long long60 = dateTime59.getMillis();
        boolean boolean61 = dateTime50.isAfter((org.joda.time.ReadableInstant) dateTime59);
        long long62 = dateTime59.getMillis();
        boolean boolean63 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology64 = dateTime39.getChronology();
        long long65 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime66 = property11.roundHalfFloorCopy();
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale67.getDisplayLanguage(locale68);
        java.util.Locale.setDefault(locale67);
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.lang.String str72 = locale67.getDisplayCountry(locale71);
        java.util.Locale locale73 = locale71.stripExtensions();
        java.lang.String str74 = locale73.getScript();
        java.lang.String str75 = locale73.getISO3Country();
        int int76 = property11.getMaximumShortTextLength(locale73);
        java.lang.String str77 = locale73.toLanguageTag();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(islamicChronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(islamicChronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(islamicChronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3600000L + "'", long65 == 3600000L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str69, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str72, "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "JPN" + "'", str75, "JPN");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ja-JP" + "'", str77, "ja-JP");
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = islamicChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology3.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = islamicChronology10.weekyears();
        org.joda.time.DurationField durationField12 = islamicChronology10.months();
        org.joda.time.DurationField durationField13 = islamicChronology10.centuries();
        org.joda.time.DateTimeZone dateTimeZone14 = islamicChronology10.getZone();
        org.joda.time.Chronology chronology15 = islamicChronology3.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology3.monthOfYear();
        org.joda.time.DurationField durationField17 = islamicChronology3.millis();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) islamicChronology3);
        org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.minuteOfDay();
        org.joda.time.DurationField durationField21 = islamicChronology19.months();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology19.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int25 = localDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours((int) (byte) -1);
        int int28 = localDateTime24.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.plusHours((int) (byte) 100);
        int[] intArray34 = islamicChronology19.get((org.joda.time.ReadablePartial) localDateTime32, (long) 1969);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withWeekyear((int) '4');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology40 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField41 = islamicChronology40.weekyears();
        org.joda.time.DurationField durationField42 = islamicChronology40.halfdays();
        org.joda.time.DurationField durationField43 = islamicChronology40.months();
        org.joda.time.DurationFieldType durationFieldType44 = durationField43.getType();
        boolean boolean45 = localDateTime36.isSupported(durationFieldType44);
        boolean boolean46 = localDateTime18.isSupported(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(islamicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1389, 10, 22, 3601969]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(islamicChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1);
        int int4 = localDateTime3.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfYear(11);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy(4);
        int[] intArray19 = islamicChronology0.get((org.joda.time.ReadablePartial) localDateTime17, 17758044000069L);
        java.lang.String str20 = islamicChronology0.toString();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1969, 10, 21, 82800069]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "IslamicChronology[+01:00]" + "'", str20, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDateTime9.getFields();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusDays(4);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        int int19 = localDateTime14.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.minus(readablePeriod22);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = localDateTime23.getField(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.centuryOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean34 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.weekyear();
        int[] intArray37 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime33, 17763840000001L);
        org.joda.time.DateTimeField dateTimeField38 = islamicChronology2.centuryOfEra();
        org.joda.time.DurationField durationField39 = islamicChronology2.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 3600001]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMinuteOfHour(0);
        java.util.Locale locale18 = new java.util.Locale("\u5927\u97d3\u6c11\u56fd");
        java.lang.String str19 = dateTimeField3.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDateTime12.getFieldType((int) (byte) 0);
        int int22 = localDateTime12.size();
        org.joda.time.LocalDateTime.Property property23 = localDateTime12.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals(locale18.toString(), "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100" + "'", str19, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        int int12 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        boolean boolean19 = property15.equals((java.lang.Object) "\u5927\u97d3\u6c11\u56fd");
        java.util.Locale locale23 = new java.util.Locale("+01:00", "19", "1");
        int int24 = property15.getMaximumShortTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime25 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        int int31 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, 10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfYear(11);
        int[] intArray39 = localDateTime38.getValues();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusHours((int) (short) 0);
        int int42 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime28.plus(readableDuration43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readableDuration45);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 1);
        int int50 = localDateTime49.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusHours((int) (byte) -1);
        int int53 = localDateTime49.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withMinuteOfHour((int) (byte) 1);
        int int57 = localDateTime55.getValue(0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusSeconds(11);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.yearOfCentury();
        int[] intArray62 = chronology47.get((org.joda.time.ReadablePartial) localDateTime59, 23L);
        int int63 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime27, intArray62);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "19" + "'", str17, "19");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "+01:00_19_1");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1, 23]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withFields(readablePartial9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        boolean boolean18 = property11.equals((java.lang.Object) 59);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDateTime23.getFields();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusDays(4);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime37.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean48 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.weekyear();
        boolean boolean50 = property11.equals((java.lang.Object) localDateTime47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime53 = property51.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology56 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = islamicChronology56.weekyears();
        org.joda.time.DateTimeField dateTimeField58 = islamicChronology56.yearOfEra();
        org.joda.time.DurationField durationField59 = islamicChronology56.hours();
        org.joda.time.DateTimeZone dateTimeZone60 = islamicChronology56.getZone();
        long long63 = dateTimeZone60.adjustOffset(17763836400000L, true);
        java.util.Locale locale68 = new java.util.Locale("zh", "GMT", "weekyears");
        java.lang.String str69 = dateTimeZone60.getName(29529L, locale68);
        java.lang.String str71 = locale68.getExtension('u');
        int int72 = property51.getMaximumShortTextLength(locale68);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(islamicChronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 17763836400000L + "'", long63 == 17763836400000L);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_GMT_weekyears");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+01:00" + "'", str69, "+01:00");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DurationField durationField5 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("3600120");
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder10 = builder5.setExtension('u', "en_US");
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("3660");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) "82800001");
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusYears(52);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTime dateTime15 = localDateTime1.toDateTime(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 82800001 + "'", int2 == 82800001);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+01:00" + "'", str14, "+01:00");
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        int int7 = dateTimeZone5.getOffsetFromLocal(19800L);
        java.lang.String str8 = dateTimeZone5.getID();
        java.util.TimeZone timeZone9 = dateTimeZone5.toTimeZone();
        java.lang.String str10 = timeZone9.getID();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("");
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        int int16 = timeZone12.getRawOffset();
        java.time.ZoneId zoneId17 = timeZone12.toZoneId();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone(zoneId17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone(zoneId17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone(zoneId17);
        int int22 = timeZone20.getOffset(0L);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("");
        timeZone24.setID("\u5927\u97d3\u6c11\u56fd");
        boolean boolean27 = timeZone20.hasSameRules(timeZone24);
        boolean boolean28 = timeZone9.hasSameRules(timeZone20);
        boolean boolean29 = timeZone20.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3600000 + "'", int7 == 3600000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+01:00" + "'", str8, "+01:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT+01:00" + "'", str10, "GMT+01:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField8 = islamicChronology7.weekyears();
        org.joda.time.DurationField durationField9 = islamicChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology7.yearOfEra();
        org.joda.time.DurationField durationField11 = islamicChronology7.halfdays();
        org.joda.time.DurationFieldType durationFieldType12 = durationField11.getType();
        boolean boolean13 = localDateTime1.isSupported(durationFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = islamicChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = islamicChronology17.yearOfEra();
        long long21 = dateTimeField19.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        int int24 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusHours((int) (byte) -1);
        int int27 = localDateTime23.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.minus(readableDuration32);
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, locale34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusYears(100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusMillis(4);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology46 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone45);
        boolean boolean47 = dateTimeZone45.isFixed();
        long long51 = dateTimeZone45.convertLocalToUTC((long) (byte) 100, false, 10L);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 86399, dateTimeZone45);
        boolean boolean53 = localDateTime38.isEqual((org.joda.time.ReadablePartial) localDateTime52);
        int int54 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = property14.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType57 = localDateTime55.getFieldType(1965);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1965");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(islamicChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5785200000L + "'", long21 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970" + "'", str36, "1970");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(islamicChronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-3599900L) + "'", long51 == (-3599900L));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("TWN");
        java.util.TimeZone.setDefault(timeZone9);
        int int11 = timeZone9.getRawOffset();
        boolean boolean12 = timeZone7.hasSameRules(timeZone9);
        boolean boolean13 = timeZone7.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = islamicChronology2.add(readablePeriod10, (long) (byte) 0, (-1));
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = islamicChronology2.days();
        org.joda.time.DurationField durationField17 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, 10);
        int int27 = localDateTime26.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusYears((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusYears(9);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 1);
        int int36 = localDateTime35.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology41 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = islamicChronology41.weekyears();
        org.joda.time.DurationField durationField43 = islamicChronology41.halfdays();
        org.joda.time.DurationFieldType durationFieldType44 = durationField43.getType();
        boolean boolean45 = localDateTime35.isSupported(durationFieldType44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withFieldAdded(durationFieldType44, 100);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int55 = localDateTime54.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology63 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone62);
        org.joda.time.DurationField durationField64 = islamicChronology63.weekyears();
        org.joda.time.DurationField durationField65 = islamicChronology63.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = islamicChronology63.yearOfEra();
        org.joda.time.DurationField durationField67 = islamicChronology63.halfdays();
        org.joda.time.DurationFieldType durationFieldType68 = durationField67.getType();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime58.withFieldAdded(durationFieldType68, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology73 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone72);
        org.joda.time.DurationField durationField74 = islamicChronology73.weekyears();
        org.joda.time.DurationField durationField75 = islamicChronology73.halfdays();
        org.joda.time.DurationField durationField76 = islamicChronology73.weeks();
        org.joda.time.DateTimeField dateTimeField77 = islamicChronology73.yearOfEra();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 1);
        int int80 = localDateTime79.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray83 = localDateTime82.getFields();
        java.util.Locale locale84 = java.util.Locale.KOREA;
        java.util.Locale locale85 = java.util.Locale.KOREA;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.lang.String str87 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime82, locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField77.getType();
        org.joda.time.LocalDateTime.Property property89 = localDateTime70.property(dateTimeFieldType88);
        boolean boolean90 = localDateTime54.isSupported(dateTimeFieldType88);
        int int91 = localDateTime47.get(dateTimeFieldType88);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime47.minusMonths((-3600000));
        int int94 = localDateTime47.getDayOfYear();
        int int95 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(islamicChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(islamicChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(islamicChronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldArray83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str86, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970" + "'", str87, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 51 + "'", int94 == 51);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 59 + "'", int95 == 59);
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfSecond();
        org.joda.time.DurationField durationField5 = dateTimeField4.getLeapDurationField();
        boolean boolean6 = dateTimeField4.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property11.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.DurationField durationField15 = property11.getLeapDurationField();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = property11.setCopy("-01:43", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-01:43\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.millisOfSecond();
        org.joda.time.DurationField durationField7 = islamicChronology2.seconds();
        org.joda.time.Chronology chronology8 = islamicChronology2.withUTC();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMonths(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMinuteOfHour(51);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        long long6 = dateTimeField4.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        int int12 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.minus(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears(100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((-16703));
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusHours(41);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 5785200000L + "'", long6 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours((int) (byte) -1);
        int int15 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.minus(readableDuration20);
        int int22 = localDateTime11.getSecondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime11.getFieldTypes();
        int[] intArray24 = localDateTime11.getValues();
        islamicChronology2.validate((org.joda.time.ReadablePartial) localDateTime9, intArray24);
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1, 3600001]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.dayOfYear();
        org.joda.time.DurationField durationField10 = islamicChronology2.millis();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.clockhourOfDay();
        int int12 = dateTimeField11.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 24 + "'", int12 == 24);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minus(readableDuration10);
        int int12 = localDateTime1.getSecondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime1.getFieldTypes();
        int int14 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime1.plusWeeks(59);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime1.minusDays(1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(7);
        int int21 = localDateTime20.getEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYearOfEra(16);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getAsString();
        int int14 = property11.get();
        int int15 = property11.get();
        int int16 = property11.getMaximumValue();
        long long17 = property11.remainder();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999 + "'", int16 == 999);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.year();
        long long8 = dateTimeField5.add(70L, (int) '4');
        int int10 = dateTimeField5.getMinimumValue(70L);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField5.set(2922789L, (-413279));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -413279 for year must be in the range [1,292271022]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1592092800070L + "'", long8 == 1592092800070L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekyear();
        org.joda.time.DurationField durationField5 = islamicChronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone7 = islamicChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology3.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((-18L), (org.joda.time.Chronology) islamicChronology3);
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology3.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("1970-01-01T01:00:00.100+01:00", (double) (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-8.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(60);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long5 = dateTimeZone1.convertLocalToUTC(42068415600000L, false);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        int int11 = localDateTime7.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.minus(readableDuration16);
        boolean boolean18 = dateTimeZone1.isLocalDateTimeGap(localDateTime17);
        java.util.TimeZone timeZone19 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 42068199600000L + "'", long5 == 42068199600000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        java.lang.String str17 = property15.getAsString();
        org.joda.time.LocalDateTime localDateTime19 = property15.addWrapFieldToCopy(999);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, 43);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = islamicChronology25.years();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        int int30 = localDateTime29.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) (byte) -1);
        int int34 = localDateTime29.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.minus(readablePeriod37);
        int int39 = localDateTime38.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = localDateTime38.getField(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.centuryOfEra();
        int[] intArray44 = islamicChronology25.get((org.joda.time.ReadablePartial) localDateTime38, (long) 0);
        org.joda.time.DateTimeField dateTimeField45 = islamicChronology25.millisOfDay();
        org.joda.time.DurationField durationField46 = islamicChronology25.centuries();
        org.joda.time.DateTimeZone dateTimeZone47 = islamicChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField48 = islamicChronology25.dayOfWeek();
        org.joda.time.DurationField durationField49 = islamicChronology25.minutes();
        org.joda.time.DateTimeField dateTimeField50 = islamicChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = islamicChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = islamicChronology25.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(12);
        org.joda.time.Chronology chronology55 = islamicChronology25.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = islamicChronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = islamicChronology25.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField57.getType();
        int int59 = localDateTime22.indexOf(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(islamicChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        int int3 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        int int11 = localDateTime7.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        int int16 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusSeconds((int) ' ');
        int int24 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minus(readableDuration25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime18.era();
        long long29 = islamicChronology2.set((org.joda.time.ReadablePartial) localDateTime18, 60480000000L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int37 = localDateTime36.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology45 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = islamicChronology45.weekyears();
        org.joda.time.DurationField durationField47 = islamicChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = islamicChronology45.yearOfEra();
        org.joda.time.DurationField durationField49 = islamicChronology45.halfdays();
        org.joda.time.DurationFieldType durationFieldType50 = durationField49.getType();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime40.withFieldAdded(durationFieldType50, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology55 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone54);
        org.joda.time.DurationField durationField56 = islamicChronology55.weekyears();
        org.joda.time.DurationField durationField57 = islamicChronology55.halfdays();
        org.joda.time.DurationField durationField58 = islamicChronology55.weeks();
        org.joda.time.DateTimeField dateTimeField59 = islamicChronology55.yearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 1);
        int int62 = localDateTime61.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray65 = localDateTime64.getFields();
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale66.getDisplayLanguage(locale67);
        java.lang.String str69 = dateTimeField59.getAsText((org.joda.time.ReadablePartial) localDateTime64, locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = dateTimeField59.getType();
        org.joda.time.LocalDateTime.Property property71 = localDateTime52.property(dateTimeFieldType70);
        boolean boolean72 = localDateTime36.isSupported(dateTimeFieldType70);
        boolean boolean73 = localDateTime18.isSupported(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-39490502399999L) + "'", long29 == (-39490502399999L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(islamicChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(islamicChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldArray65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str68, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970" + "'", str69, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfSecond();
        long long8 = islamicChronology2.add((long) (byte) -1, (long) 0, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        int int15 = localDateTime10.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minus(readablePeriod18);
        int int20 = localDateTime19.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = localDateTime19.getField(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withMonthOfYear((int) (short) 10);
        boolean boolean26 = islamicChronology2.equals((java.lang.Object) localDateTime19);
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField29 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 1);
        int int33 = localDateTime32.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, 10);
        int int39 = localDateTime38.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusYears((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusYears(9);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 1);
        int int48 = localDateTime47.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology53 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField54 = islamicChronology53.weekyears();
        org.joda.time.DurationField durationField55 = islamicChronology53.halfdays();
        org.joda.time.DurationFieldType durationFieldType56 = durationField55.getType();
        boolean boolean57 = localDateTime47.isSupported(durationFieldType56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime38.withFieldAdded(durationFieldType56, 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withYearOfEra(384);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfDay(4);
        int int64 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(islamicChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        java.lang.String str9 = localDateTime7.toString();
        int int10 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.era();
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        int int19 = localDateTime14.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.minus(readablePeriod22);
        int int24 = localDateTime23.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours((int) (byte) -1);
        int int31 = localDateTime26.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime26.minus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime26.millisOfSecond();
        long long37 = property36.remainder();
        java.lang.String str38 = property36.getName();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.lang.String str40 = property36.getAsText(locale39);
        org.joda.time.LocalDateTime localDateTime41 = property36.withMinimumValue();
        boolean boolean43 = property36.equals((java.lang.Object) 59);
        org.joda.time.LocalDateTime localDateTime44 = property36.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 1);
        int int47 = localDateTime46.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfYear(11);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = localDateTime54.getFieldType((int) (byte) 0);
        int int58 = localDateTime44.indexOf(dateTimeFieldType57);
        int int59 = localDateTime23.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime.Property property60 = localDateTime7.property(dateTimeFieldType57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology63 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone62);
        org.joda.time.DurationField durationField64 = islamicChronology63.weekyears();
        org.joda.time.DurationField durationField65 = islamicChronology63.halfdays();
        org.joda.time.DurationField durationField66 = islamicChronology63.weeks();
        org.joda.time.DateTimeField dateTimeField67 = islamicChronology63.yearOfEra();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 1);
        int int70 = localDateTime69.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = localDateTime72.getFields();
        java.util.Locale locale74 = java.util.Locale.KOREA;
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.lang.String str76 = locale74.getDisplayLanguage(locale75);
        java.lang.String str77 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) localDateTime72, locale74);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime72.minusSeconds((int) (short) 100);
        org.joda.time.LocalDateTime.Property property80 = localDateTime72.dayOfYear();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime72.plus(readableDuration81);
        int int83 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime72);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:25:00.001" + "'", str9, "1970-01-01T00:25:00.001");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(islamicChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str76, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970" + "'", str77, "1970");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = islamicChronology2.withZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName(3L);
        int int14 = dateTimeZone9.getOffset((long) 1970);
        int int16 = dateTimeZone9.getOffsetFromLocal((long) 24);
        org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField18 = islamicChronology17.halfdays();
        org.joda.time.DurationField durationField19 = islamicChronology17.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(islamicChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = islamicChronology0.weekyears();
        org.joda.time.DurationField durationField2 = islamicChronology0.centuries();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("GMT");
        java.util.Set<java.lang.String> strSet2 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        boolean boolean7 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet6);
        boolean boolean8 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale12.getVariant();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale12, locale14, locale15, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = null;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        boolean boolean25 = strSet4.remove((java.lang.Object) localeList21);
        boolean boolean26 = strSet4.isEmpty();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        boolean boolean41 = strSet4.remove((java.lang.Object) 0);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getISO3Country();
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        boolean boolean47 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.Spliterator<java.lang.String> strSpliterator48 = strSet4.spliterator();
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode49);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale locale53 = locale51.stripExtensions();
        java.lang.String str54 = locale51.getDisplayCountry();
        java.util.Set<java.lang.String> strSet55 = locale51.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet55);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = strSet55.add("de");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FR" + "'", str16, "FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "KOR" + "'", str45, "KOR");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode49.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ub300\ub9cc" + "'", str54, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        timeZone3.setRawOffset(11);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.toLanguageTag();
        java.lang.String str11 = dateTimeZone7.getShortName((long) 'u', locale9);
        long long13 = dateTimeZone7.previousTransition((-3599999L));
        int int15 = dateTimeZone7.getOffsetFromLocal((-3599635L));
        java.lang.String str16 = dateTimeZone7.toString();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599999L) + "'", long13 == (-3599999L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.era();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology8 = islamicChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = islamicChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField12 = islamicChronology2.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField8 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField10 = islamicChronology2.years();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        long long13 = durationField10.getMillis(1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 30617280288L + "'", long13 == 30617280288L);
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.millis();
        java.lang.String str5 = durationField4.getName();
        boolean boolean6 = durationField4.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = durationField4.subtract((-59010595198169L), 3404329200000L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millis" + "'", str5, "millis");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        int int3 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = localDateTime5.getFields();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime14.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        int int24 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime(dateTimeZone28);
        long long31 = dateTime30.getMillis();
        boolean boolean32 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 1);
        int int38 = localDateTime37.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusHours((int) (byte) -1);
        int int42 = localDateTime37.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime37.minus(readablePeriod45);
        int int47 = localDateTime46.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = localDateTime46.getField(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.centuryOfEra();
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 1);
        int int59 = localDateTime58.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusHours((int) (byte) -1);
        int int63 = localDateTime58.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime58.minus(readablePeriod66);
        int int68 = localDateTime67.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField70 = localDateTime67.getField(0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime67.centuryOfEra();
        org.joda.time.LocalDateTime.Property property72 = localDateTime67.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property72.getFieldType();
        boolean boolean74 = localDateTime56.isSupported(dateTimeFieldType73);
        int int75 = localDateTime56.getMinuteOfHour();
        boolean boolean76 = dateTime35.equals((java.lang.Object) int75);
        boolean boolean77 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime35);
        int int78 = property12.getDifference((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime79 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology84 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone83);
        org.joda.time.DurationField durationField85 = islamicChronology84.weekyears();
        org.joda.time.DateTimeField dateTimeField86 = islamicChronology84.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone87 = islamicChronology84.getZone();
        int int89 = dateTimeZone87.getOffsetFromLocal(19800L);
        long long92 = dateTimeZone87.adjustOffset((long) 292278993, true);
        long long94 = dateTimeZone87.nextTransition((long) 1910);
        org.joda.time.DateTime dateTime95 = localDateTime81.toDateTime(dateTimeZone87);
        org.joda.time.LocalDateTime localDateTime96 = new org.joda.time.LocalDateTime((long) 273, dateTimeZone87);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 23 + "'", int3 == 23);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-7199999L) + "'", long31 == (-7199999L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 23 + "'", int59 == 23);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-5640) + "'", int78 == (-5640));
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(islamicChronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3600000 + "'", int89 == 3600000);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 292278993L + "'", long92 == 292278993L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1910L + "'", long94 == 1910L);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = islamicChronology10.weekyears();
        org.joda.time.DurationField durationField12 = islamicChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.yearOfEra();
        org.joda.time.DurationField durationField14 = islamicChronology10.halfdays();
        org.joda.time.DurationFieldType durationFieldType15 = durationField14.getType();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime5.withFieldAdded(durationFieldType15, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = islamicChronology20.weekyears();
        org.joda.time.DurationField durationField22 = islamicChronology20.halfdays();
        org.joda.time.DurationField durationField23 = islamicChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.yearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime29.getFields();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.lang.String str34 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime29, locale31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField24.getType();
        org.joda.time.LocalDateTime.Property property36 = localDateTime17.property(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime17.minusSeconds(1910);
        boolean boolean39 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.dayOfMonth();
        int int41 = localDateTime38.getYearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 69 + "'", int2 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str33, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970" + "'", str34, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("DateTimeField[minuteOfDay]");
        int int3 = timeZone1.getOffset(1L);
        int int5 = timeZone1.getOffset(349200000L);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = islamicChronology4.weekyears();
        org.joda.time.DurationField durationField6 = islamicChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology4.secondOfDay();
        boolean boolean11 = strSet1.equals((java.lang.Object) islamicChronology4);
        org.joda.time.DurationField durationField12 = islamicChronology4.hours();
        java.lang.String str13 = durationField12.toString();
        long long16 = durationField12.add((-20221198030L), (long) 24);
        java.lang.String str17 = durationField12.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(islamicChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DurationField[hours]" + "'", str13, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-20134798030L) + "'", long16 == (-20134798030L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DurationField[hours]" + "'", str17, "DurationField[hours]");
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int19 = localDateTime18.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((int) (byte) 100);
        int int23 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDateTime22.getFields();
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime37.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology50 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = islamicChronology50.weekyears();
        org.joda.time.DurationField durationField52 = islamicChronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = islamicChronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = islamicChronology50.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField55 = islamicChronology50.weekyear();
        org.joda.time.DurationField durationField56 = islamicChronology50.days();
        org.joda.time.DateTimeField dateTimeField57 = islamicChronology50.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField57.getType();
        boolean boolean59 = localDateTime47.isSupported(dateTimeFieldType58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime26.property(dateTimeFieldType58);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(islamicChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = islamicChronology4.weekyears();
        org.joda.time.DurationField durationField6 = islamicChronology4.months();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology4.minuteOfHour();
        org.joda.time.DurationField durationField8 = islamicChronology4.hours();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology4.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str15 = dateTimeField9.getAsShortText(19360364981855L, locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(islamicChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8" + "'", str15, "8");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.equals((java.lang.Object) 10L);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone18.getShortName(1970L, locale23);
        org.joda.time.DateTime dateTime26 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime16.plusMonths(7);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        int int32 = localDateTime30.getMillisOfSecond();
        boolean boolean33 = localDateTime16.equals((java.lang.Object) localDateTime30);
        int int34 = localDateTime16.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime16.withYearOfEra(32);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 1);
        int int39 = localDateTime38.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusHours((int) (byte) -1);
        int int43 = localDateTime38.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.minus(readablePeriod46);
        int int48 = localDateTime47.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = localDateTime47.getField(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus(readableDuration52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 1);
        int int56 = localDateTime55.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusHours((int) (byte) -1);
        int int60 = localDateTime55.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime55.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime55.minus(readablePeriod63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime55.millisOfSecond();
        long long66 = property65.remainder();
        java.lang.String str67 = property65.getName();
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.lang.String str69 = property65.getAsText(locale68);
        org.joda.time.LocalDateTime localDateTime70 = property65.withMinimumValue();
        boolean boolean72 = property65.equals((java.lang.Object) 59);
        org.joda.time.LocalDateTime localDateTime73 = property65.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 1);
        int int76 = localDateTime75.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withPeriodAdded(readablePeriod79, 10);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withDayOfYear(11);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = localDateTime83.getFieldType((int) (byte) 0);
        int int87 = localDateTime73.indexOf(dateTimeFieldType86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime47.withField(dateTimeFieldType86, (int) (short) -1);
        boolean boolean90 = localDateTime16.isSupported(dateTimeFieldType86);
        int int91 = localDateTime16.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property92 = localDateTime16.monthOfYear();
        java.util.Date date93 = localDateTime16.toDate();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(islamicChronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JPN" + "'", str24, "JPN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+01:00" + "'", str25, "+01:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 23 + "'", int39 == 23);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 23 + "'", int56 == 23);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfSecond" + "'", str67, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 23 + "'", int76 == 23);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(date93);
// flaky:         org.junit.Assert.assertEquals(date93.toString(), "Wed Dec 31 23:00:00 GMT 1969");
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        long long6 = dateTimeField4.roundCeiling(0L);
        org.joda.time.DurationField durationField7 = dateTimeField4.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.millisOfSecond();
        int int18 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology21 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = islamicChronology21.weekyears();
        org.joda.time.DurationField durationField23 = islamicChronology21.months();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology21.millisOfSecond();
        int int25 = dateTimeField24.getMaximumValue();
        boolean boolean26 = localDateTime9.equals((java.lang.Object) int25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 5785200000L + "'", long6 == 5785200000L);
        org.junit.Assert.assertNull(durationField7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(islamicChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 999 + "'", int25 == 999);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        int int18 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone22);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime26 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = islamicChronology29.years();
        org.joda.time.DurationField durationField32 = islamicChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology29.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 1);
        int int36 = localDateTime35.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours((int) (byte) -1);
        int int39 = localDateTime35.getSecondOfMinute();
        int[] intArray46 = new int[] { 292278993, ' ', (short) 1, (short) -1, (byte) -1 };
        int[] intArray48 = dateTimeField33.set((org.joda.time.ReadablePartial) localDateTime35, (int) (byte) 0, intArray46, 10);
        islamicChronology4.validate((org.joda.time.ReadablePartial) localDateTime13, intArray46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime13.minus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusSeconds(8);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMillis(70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+01:00" + "'", str3, "+01:00");
        org.junit.Assert.assertNotNull(islamicChronology4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-7199999L) + "'", long25 == (-7199999L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 12, 1, 0, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 12, 1, 0, -1]");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology2.getZone();
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        long long13 = islamicChronology9.add(0L, 6660000000L, 2922711);
        org.joda.time.DurationField durationField14 = islamicChronology9.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 19465255260000000L + "'", long13 == 19465255260000000L);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = islamicChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology2.getZone();
        java.lang.String str9 = islamicChronology2.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours((int) (byte) -1);
        int int15 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime19, (long) 354);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.monthOfYear();
        org.joda.time.DurationField durationField25 = islamicChronology2.halfdays();
        java.lang.String str26 = durationField25.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "IslamicChronology[+01:00]" + "'", str9, "IslamicChronology[+01:00]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600354]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "halfdays" + "'", str26, "halfdays");
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology6.minuteOfDay();
        java.lang.String str9 = dateTimeField8.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int17 = localDateTime16.getCenturyOfEra();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale19.getDisplayCountry(locale23);
        java.lang.String str25 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 1, locale23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.withWeekyear(100);
        boolean boolean28 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localDateTime3.getValue(958);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 958");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str9, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str24, "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(60);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long5 = dateTimeZone1.convertLocalToUTC(42068415600000L, false);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        int int11 = localDateTime7.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.minus(readableDuration16);
        boolean boolean18 = dateTimeZone1.isLocalDateTimeGap(localDateTime17);
        java.util.TimeZone timeZone19 = dateTimeZone1.toTimeZone();
        java.lang.Object obj20 = timeZone19.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 42068199600000L + "'", long5 == 42068199600000L);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "1969");
        java.util.Locale locale10 = builder6.build();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getISO3Country();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "FR");
        java.util.Locale.Builder builder20 = builder18.addUnicodeLocaleAttribute("KOR");
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        java.lang.String str23 = locale12.getDisplayVariant(locale21);
        java.util.Locale.Builder builder24 = builder6.setLocale(locale12);
        java.util.Locale.Builder builder25 = builder6.clear();
        java.util.Locale.Builder builder26 = builder6.clearExtensions();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale.Builder builder29 = builder26.removeUnicodeLocaleAttribute("Dienstag");
        java.util.Locale.Builder builder30 = builder26.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder30.setUnicodeLocaleKeyword("2022-02-22T08:14:28.949", "1999");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T08:14:28.949 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN_#x-1969");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "KOR" + "'", str14, "KOR");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfMinute();
        long long8 = islamicChronology2.add((-3598030L), (long) 292271022, 9);
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField10 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.weekOfWeekyear();
        java.lang.String str12 = islamicChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2626841168L + "'", long8 == 2626841168L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "IslamicChronology[+01:00]" + "'", str12, "IslamicChronology[+01:00]");
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = islamicChronology2.getZone();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = islamicChronology2.add(readablePeriod26, (long) 3, 10);
        org.joda.time.DurationField durationField30 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = islamicChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("32");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMonths(2000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = localDateTime3.toString(dateTimeFormatter4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        int int17 = localDateTime16.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDateTime16.toDateTime(dateTimeZone21);
        long long24 = dateTime23.getMillis();
        boolean boolean25 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 1);
        int int28 = localDateTime27.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusHours((int) (byte) -1);
        int int32 = localDateTime27.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.minus(readablePeriod35);
        int int37 = localDateTime36.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = localDateTime36.getField(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plus(readableDuration41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 1);
        int int45 = localDateTime44.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusHours((int) (byte) -1);
        int int49 = localDateTime44.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime44.minus(readablePeriod52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime44.millisOfSecond();
        long long55 = property54.remainder();
        java.lang.String str56 = property54.getName();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = property54.getAsText(locale57);
        org.joda.time.LocalDateTime localDateTime59 = property54.withMinimumValue();
        boolean boolean61 = property54.equals((java.lang.Object) 59);
        org.joda.time.LocalDateTime localDateTime62 = property54.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 1);
        int int65 = localDateTime64.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withPeriodAdded(readablePeriod68, 10);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withDayOfYear(11);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = localDateTime72.getFieldType((int) (byte) 0);
        int int76 = localDateTime62.indexOf(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime36.withField(dateTimeFieldType75, (int) (short) -1);
        boolean boolean79 = dateTime23.isSupported(dateTimeFieldType75);
        int int80 = localDateTime3.indexOf(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0198-09-01T00:00:00.000" + "'", str5, "0198-09-01T00:00:00.000");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(islamicChronology22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7199999L) + "'", long24 == (-7199999L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 23 + "'", int45 == 23);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfSecond" + "'", str56, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        int int12 = localDateTime7.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime7.millisOfSecond();
        long long18 = property17.remainder();
        java.lang.String str19 = property17.getName();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.LocalDateTime localDateTime22 = property17.withMinimumValue();
        int[] intArray24 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime22, (-2938031L));
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = islamicChronology2.getDateTimeMillis(33, 0, 273, (-322672809), 33, 3600010, 248400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -322672809 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfSecond" + "'", str19, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1389, 10, 22, 661969]");
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        int int11 = property8.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = property8.addToCopy((-3600000L));
        org.joda.time.DurationField durationField14 = property8.getDurationField();
        org.joda.time.LocalDateTime localDateTime16 = property8.addToCopy(936);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property8.getDifference(readableInstant17);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-16842391) + "'", int18 == (-16842391));
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.secondOfDay();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = locale8.getScript();
        java.lang.String str11 = dateTimeField6.getAsShortText(30043584000000L, locale8);
        java.lang.String str12 = locale8.getScript();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "61200" + "'", str11, "61200");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        java.util.Locale locale8 = new java.util.Locale("");
        boolean boolean9 = localDateTime1.equals((java.lang.Object) "");
        int int10 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minusHours(1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes((int) 'a');
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.dayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 82800001 + "'", int10 == 82800001);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1969, 12, 31, 73380001]");
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(69);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = islamicChronology7.years();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours((int) (byte) -1);
        int int16 = localDateTime11.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.minus(readablePeriod19);
        int int21 = localDateTime20.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = localDateTime20.getField(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.centuryOfEra();
        int[] intArray26 = islamicChronology7.get((org.joda.time.ReadablePartial) localDateTime20, (long) 0);
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology7.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = locale29.getCountry();
        java.lang.String str31 = dateTimeField27.getAsShortText((-306028799989L), locale29);
        java.lang.String str32 = dateTimeZone1.getName(31528800001L, locale29);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        int int35 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusHours((int) (byte) -1);
        int int39 = localDateTime34.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.minus(readablePeriod42);
        int int44 = localDateTime43.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = localDateTime43.getField(0);
        int int48 = dateTimeField46.getMaximumValue((long) (byte) 100);
        boolean boolean49 = dateTimeZone1.equals((java.lang.Object) dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FR" + "'", str30, "FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+69:00" + "'", str32, "+69:00");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 23 + "'", int35 == 23);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minus(readableDuration10);
        int int12 = localDateTime1.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = islamicChronology15.weekyears();
        org.joda.time.DurationField durationField17 = islamicChronology15.months();
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology15.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology21 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = islamicChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24);
        boolean boolean27 = dateTimeZone24.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology28 = islamicChronology21.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology21.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology35 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = islamicChronology35.weekyear();
        org.joda.time.ReadablePartial readablePartial37 = null;
        int[] intArray44 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray46 = dateTimeField36.addWrapPartial(readablePartial37, 100, intArray44, (int) (short) 0);
        int int47 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime31, intArray44);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 1);
        int int50 = localDateTime49.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusHours((int) (byte) -1);
        int int54 = localDateTime49.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime56);
        int int58 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 1);
        int int61 = localDateTime60.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = localDateTime63.getFields();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = locale65.getDisplayCountry(locale66);
        java.lang.String str69 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, locale65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = localDateTime63.toString(dateTimeFormatter70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime63.minusDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 1);
        int int78 = localDateTime77.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology83 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone82);
        org.joda.time.DurationField durationField84 = islamicChronology83.weekyears();
        org.joda.time.DurationField durationField85 = islamicChronology83.halfdays();
        org.joda.time.DateTimeField dateTimeField86 = islamicChronology83.yearOfEra();
        org.joda.time.DurationField durationField87 = islamicChronology83.halfdays();
        org.joda.time.DurationFieldType durationFieldType88 = durationField87.getType();
        boolean boolean89 = localDateTime77.isSupported(durationFieldType88);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime75.withFieldAdded(durationFieldType88, 355);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime1.withFieldAdded(durationFieldType88, 292278993);
        int int94 = localDateTime93.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime96 = localDateTime93.plusDays(86399);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(islamicChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(islamicChronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(islamicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 23 + "'", int50 == 23);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 23 + "'", int61 == 23);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "JPN" + "'", str67, "JPN");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0" + "'", str69, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T00:00:00.001" + "'", str71, "1970-01-01T00:00:00.001");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 23 + "'", int78 == 23);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(islamicChronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 402086 + "'", int94 == 402086);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = islamicChronology3.weekyears();
        org.joda.time.DurationField durationField5 = islamicChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology3.weekyear();
        org.joda.time.DurationField durationField9 = islamicChronology3.days();
        org.joda.time.DurationField durationField10 = islamicChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((-5699999L), (org.joda.time.Chronology) islamicChronology3);
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology3.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusSeconds((int) ' ');
        int int18 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property19 = localDateTime12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay(43);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.monthOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 10);
        int int8 = localDateTime7.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusYears((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        long long13 = property11.remainder();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3155670000001L + "'", long13 == 3155670000001L);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMinutes(100);
        int[] intArray5 = localDateTime2.getValues();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = islamicChronology8.weekyears();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology15 = islamicChronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField16 = islamicChronology8.millis();
        org.joda.time.DurationFieldType durationFieldType17 = durationField16.getType();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.withFieldAdded(durationFieldType17, (-292275054));
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.minusDays(366);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime21.getFieldType(90);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 90");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[2022, 2, 22, 22472332]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(islamicChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DurationField durationField6 = islamicChronology2.millis();
        org.joda.time.DurationField durationField7 = islamicChronology2.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = islamicChronology10.weekyears();
        org.joda.time.DurationField durationField12 = islamicChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology10.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        int int20 = localDateTime19.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours((int) (byte) -1);
        int int23 = localDateTime19.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.minus(readableDuration28);
        int int30 = localDateTime19.getSecondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDateTime19.getFieldTypes();
        int[] intArray32 = localDateTime19.getValues();
        islamicChronology10.validate((org.joda.time.ReadablePartial) localDateTime17, intArray32);
        int int34 = localDateTime17.getWeekOfWeekyear();
        int int35 = localDateTime17.size();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = islamicChronology2.set((org.joda.time.ReadablePartial) localDateTime17, 745731336693600000L);
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1969, 12, 31, 82800001]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfCentury(10);
        int int8 = localDateTime4.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusYears(53);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        int int14 = localDateTime13.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfYear(11);
        int[] intArray22 = localDateTime21.getValues();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusHours((int) (short) 0);
        int int25 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int33 = localDateTime32.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.getLocalDateTime();
        int int36 = localDateTime35.getWeekyear();
        int int37 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        boolean boolean38 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 1);
        int int41 = localDateTime40.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((int) (byte) -1);
        int int44 = localDateTime40.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.plusMonths((-1));
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMillis(3605100);
        boolean boolean51 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.plus(readablePeriod52);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 1, 11, 82800001]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 23 + "'", int41 == 23);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = islamicChronology8.weekyears();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology15 = islamicChronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology8.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology22.weekyear();
        org.joda.time.ReadablePartial readablePartial24 = null;
        int[] intArray31 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray33 = dateTimeField23.addWrapPartial(readablePartial24, 100, intArray31, (int) (short) 0);
        int int34 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDateTime18, intArray31);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 1);
        int int37 = localDateTime36.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusHours((int) (byte) -1);
        int int41 = localDateTime36.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime43);
        int int45 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 1);
        int int48 = localDateTime47.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = localDateTime50.getFields();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale52.getDisplayCountry(locale53);
        java.lang.String str56 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime50.toString(dateTimeFormatter57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime50.minusDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMillis((int) 'a');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plus(readableDuration63);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(islamicChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(islamicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JPN" + "'", str54, "JPN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.001" + "'", str58, "1970-01-01T00:00:00.001");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField9 = islamicChronology2.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField7 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = islamicChronology2.months();
        org.joda.time.DurationFieldType durationFieldType13 = durationField12.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u82f1\u8a9e" + "'", str1, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1);
        int int5 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime7.getFields();
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long13 = dateTimeZone1.convertLocalToUTC(296L, true);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int15 = localDateTime14.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599704L) + "'", long13 == (-3599704L));
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29672504 + "'", int15 == 29672504);
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = islamicChronology2.getZone();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = islamicChronology2.add(readablePeriod26, (long) 3, 10);
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.monthOfYear();
        org.joda.time.DurationField durationField31 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField32 = islamicChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMillis(60);
        int int39 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology44 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = islamicChronology44.yearOfCentury();
        org.joda.time.DurationField durationField46 = islamicChronology44.years();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 1);
        int int49 = localDateTime48.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusHours((int) (byte) -1);
        int int53 = localDateTime48.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.minus(readablePeriod56);
        int int58 = localDateTime57.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField60 = localDateTime57.getField(0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.centuryOfEra();
        int[] intArray63 = islamicChronology44.get((org.joda.time.ReadablePartial) localDateTime57, (long) 0);
        org.joda.time.DateTimeField dateTimeField64 = islamicChronology44.millisOfDay();
        org.joda.time.DurationField durationField65 = islamicChronology44.centuries();
        org.joda.time.DateTimeZone dateTimeZone66 = islamicChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField67 = islamicChronology44.dayOfWeek();
        org.joda.time.DurationField durationField68 = islamicChronology44.minutes();
        org.joda.time.DateTimeField dateTimeField69 = islamicChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = islamicChronology44.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 1);
        int int73 = localDateTime72.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.minusHours((int) (byte) -1);
        int int77 = localDateTime72.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime72.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime72.minus(readablePeriod80);
        int int82 = localDateTime81.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField84 = localDateTime81.getField(0);
        org.joda.time.LocalDateTime.Property property85 = localDateTime81.centuryOfEra();
        org.joda.time.LocalDateTime.Property property86 = localDateTime81.millisOfSecond();
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        int int88 = property86.getMaximumTextLength(locale87);
        java.util.Locale locale89 = java.util.Locale.JAPANESE;
        java.lang.String str90 = locale87.getDisplayLanguage(locale89);
        int int91 = dateTimeField70.getMaximumTextLength(locale87);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = dateTimeField33.set(2922789L, "22", locale87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(islamicChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 23 + "'", int49 == 23);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 23 + "'", int73 == 23);
        org.junit.Assert.assertNotNull(localDateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str90, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        boolean boolean4 = dateTimeZone2.isFixed();
        long long8 = dateTimeZone2.convertLocalToUTC((long) (byte) 100, false, 10L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        int int20 = localDateTime19.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDateTime19.toDateTime(dateTimeZone24);
        long long27 = dateTime26.getMillis();
        boolean boolean28 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        int int34 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((int) (byte) -1);
        int int38 = localDateTime33.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.minus(readablePeriod41);
        int int43 = localDateTime42.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = localDateTime42.getField(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.centuryOfEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime42.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 1);
        int int55 = localDateTime54.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusHours((int) (byte) -1);
        int int59 = localDateTime54.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime54.minus(readablePeriod62);
        int int64 = localDateTime63.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField66 = localDateTime63.getField(0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime63.centuryOfEra();
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = localDateTime52.isSupported(dateTimeFieldType69);
        int int71 = localDateTime52.getMinuteOfHour();
        boolean boolean72 = dateTime31.equals((java.lang.Object) int71);
        boolean boolean73 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime31);
        int int74 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime31);
        long long76 = dateTimeZone2.previousTransition(6652800000L);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(118100999L, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599900L) + "'", long8 == (-3599900L));
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(islamicChronology25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-7199999L) + "'", long27 == (-7199999L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 23 + "'", int34 == 23);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3600000 + "'", int74 == 3600000);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 6652800000L + "'", long76 == 6652800000L);
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = islamicChronology2.hours();
        org.joda.time.DurationField durationField10 = islamicChronology2.days();
        java.lang.String str11 = durationField10.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(locale13);
        int int17 = property11.getMaximumShortTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime19 = property11.addToCopy(100L);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, 3601970);
        int int23 = localDateTime19.getHourOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = islamicChronology13.years();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        int int18 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours((int) (byte) -1);
        int int22 = localDateTime17.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minus(readablePeriod25);
        int int27 = localDateTime26.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = localDateTime26.getField(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.centuryOfEra();
        int[] intArray32 = islamicChronology13.get((org.joda.time.ReadablePartial) localDateTime26, (long) 0);
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology13.hourOfDay();
        org.joda.time.DurationField durationField34 = islamicChronology13.centuries();
        boolean boolean35 = property8.equals((java.lang.Object) durationField34);
        java.lang.String str36 = property8.getAsText();
        org.joda.time.LocalDateTime localDateTime38 = property8.addToCopy(11);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMinuteOfHour(19);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = islamicChronology14.weekyears();
        org.joda.time.DurationField durationField16 = islamicChronology14.halfdays();
        org.joda.time.DurationFieldType durationFieldType17 = durationField16.getType();
        boolean boolean18 = localDateTime8.isSupported(durationFieldType17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime8.withDayOfYear(23);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        int int23 = localDateTime22.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusHours((int) (byte) -1);
        int int27 = localDateTime22.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime22.minus(readablePeriod30);
        int int32 = localDateTime31.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField34 = localDateTime31.getField(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.centuryOfEra();
        int int36 = property35.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = property35.setCopy(0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 1);
        int int42 = localDateTime40.getValue((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plus(readablePeriod43);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 1);
        int int47 = localDateTime46.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusHours((int) (byte) -1);
        int int51 = localDateTime46.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime46.minus(readablePeriod54);
        int int56 = localDateTime55.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField58 = localDateTime55.getField(0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.centuryOfEra();
        org.joda.time.LocalDateTime.Property property60 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime55.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology68 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone67);
        org.joda.time.DurationField durationField69 = islamicChronology68.weekyears();
        org.joda.time.DurationField durationField70 = islamicChronology68.halfdays();
        org.joda.time.DateTimeField dateTimeField71 = islamicChronology68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField72 = islamicChronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField73 = islamicChronology68.weekyear();
        org.joda.time.DurationField durationField74 = islamicChronology68.days();
        org.joda.time.DateTimeField dateTimeField75 = islamicChronology68.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField75.getType();
        boolean boolean77 = localDateTime65.isSupported(dateTimeFieldType76);
        int int78 = localDateTime40.get(dateTimeFieldType76);
        boolean boolean79 = localDateTime38.isSupported(dateTimeFieldType76);
        boolean boolean80 = localDateTime20.isSupported(dateTimeFieldType76);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime6.withField(dateTimeFieldType76, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = localDateTime6.toString("0099-01-01t01:00:00.001_KOREAN_DurationField[seconds]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(islamicChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 23 + "'", int47 == 23);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(islamicChronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = islamicChronology2.add(readablePeriod8, 0L, (-6962));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.Interval interval17 = property11.toInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = islamicChronology20.weekyears();
        org.joda.time.DurationField durationField22 = islamicChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology20.era();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.secondOfMinute();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.lang.String str27 = dateTimeField24.getAsText(17763840000100L, locale26);
        java.lang.String str28 = property11.getAsShortText(locale26);
        org.joda.time.LocalDateTime localDateTime29 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology37 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDateTime31.toDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 1);
        int int41 = localDateTime40.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology46 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDateTime40.toDateTime(dateTimeZone45);
        long long48 = dateTime47.getMillis();
        boolean boolean49 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime47.getZone();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int58 = localDateTime57.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = property59.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime62 = property59.roundFloorCopy();
        boolean boolean63 = dateTime47.equals((java.lang.Object) localDateTime62);
        int int64 = property11.getDifference((org.joda.time.ReadableInstant) dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(islamicChronology37);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 23 + "'", int41 == 23);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(islamicChronology46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-7199999L) + "'", long48 == (-7199999L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3600000 + "'", int64 == 3600000);
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = islamicChronology2.add(readablePeriod10, (long) (byte) 0, (-1));
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology2.weekyear();
        int int18 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField19 = islamicChronology2.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = islamicChronology2.getDateTimeMillis(3, 52, 1036122487, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.centuryOfEra();
        long long9 = dateTimeField7.roundHalfFloor(259200576L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 342572400000L + "'", long9 == 342572400000L);
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        boolean boolean5 = dateTimeZone2.equals((java.lang.Object) 10L);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeZone2.getShortName(1970L, locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        java.lang.String str11 = locale7.getCountry();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int25 = localDateTime24.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((int) (byte) 100);
        int int29 = property26.getMaximumValue();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale31.getDisplayCountry(locale32);
        java.util.Locale.setDefault(category30, locale32);
        int int36 = property26.getMaximumTextLength(locale32);
        java.lang.String str37 = locale32.getVariant();
        java.lang.String str38 = locale32.getDisplayVariant();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = locale41.getDisplayCountry(locale42);
        java.util.Locale.setDefault(category40, locale42);
        java.lang.String str46 = locale39.getDisplayScript(locale42);
        java.lang.String str47 = locale39.getVariant();
        java.lang.String str48 = locale32.getDisplayScript(locale39);
        java.util.Locale.setDefault(category0, locale32);
        java.util.Set<java.lang.String> strSet50 = locale32.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JPN" + "'", str8, "JPN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+01:00" + "'", str9, "+01:00");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JP" + "'", str11, "JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JPN" + "'", str33, "JPN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JPN" + "'", str43, "JPN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet50);
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        long long11 = islamicChronology2.getDateTimeMillis(43200004L, 5, 10, (int) (short) 0, (int) (short) 100);
        org.joda.time.DurationField durationField12 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 15000100L + "'", long11 == 15000100L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfHour();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology2.getLeapYearPatternType();
        java.lang.String str9 = islamicChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(leapYearPatternType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "IslamicChronology[+01:00]" + "'", str9, "IslamicChronology[+01:00]");
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = islamicChronology9.weekyears();
        org.joda.time.DurationField durationField11 = islamicChronology9.months();
        org.joda.time.DurationField durationField12 = islamicChronology9.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = islamicChronology9.getZone();
        org.joda.time.Chronology chronology14 = islamicChronology2.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField15 = islamicChronology2.months();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) 2551440384L);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears(183);
        int int20 = localDateTime19.size();
        int[] intArray22 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime19, 19360357841629L);
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 2, 22, 22241629]");
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        boolean boolean12 = dateTimeZone9.equals((java.lang.Object) 10L);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = dateTimeZone9.getShortName(1970L, locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleKeys();
        java.lang.String str18 = locale14.getCountry();
        java.util.Locale.setDefault(category7, locale14);
        java.lang.String str20 = locale14.getScript();
        java.util.Locale.Builder builder21 = builder6.setLocale(locale14);
        java.lang.Object obj22 = locale14.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JPN" + "'", str15, "JPN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+01:00" + "'", str16, "+01:00");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JP" + "'", str18, "JP");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "ja_JP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "ja_JP");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "ja_JP");
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = islamicChronology11.weekyears();
        org.joda.time.DurationField durationField13 = islamicChronology11.months();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology11.minuteOfHour();
        org.joda.time.DurationField durationField15 = islamicChronology11.hours();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology19 = islamicChronology11.withZone(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getShortName(100L);
        org.joda.time.Chronology chronology22 = islamicChronology2.withZone(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(islamicChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DurationField durationField22 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology2.monthOfYear();
        org.joda.time.DurationField durationField24 = dateTimeField23.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) 60);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int10 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime16);
        boolean boolean18 = dateTimeZone1.isLocalDateTimeGap(localDateTime17);
        int int19 = localDateTime17.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        timeZone3.setID("\u5927\u97d3\u6c11\u56fd");
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        timeZone3.setID("19");
        timeZone3.setID("ja_JP");
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology13.era();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        int int23 = localDateTime18.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime18.millisOfSecond();
        long long29 = property28.remainder();
        java.lang.String str30 = property28.getAsString();
        org.joda.time.LocalDateTime localDateTime31 = property28.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime31.getFieldTypes();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.getISO3Country();
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str39 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime31, 19, locale35);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        int int42 = localDateTime41.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusMinutes(1);
        int int45 = localDateTime41.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.minusMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMonths(2632);
        java.util.Locale locale50 = java.util.Locale.PRC;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale50.getScript();
        java.util.Locale locale53 = locale50.stripExtensions();
        java.lang.String str54 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime47, locale50);
        java.lang.String str55 = timeZone3.getDisplayName(locale50);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "KOR" + "'", str37, "KOR");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "19" + "'", str39, "19");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23 + "'", int42 == 23);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10" + "'", str54, "10");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GMT+00:00" + "'", str55, "GMT+00:00");
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = islamicChronology2.millis();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMonths(5);
        long long15 = islamicChronology2.set((org.joda.time.ReadablePartial) localDateTime13, (long) 2922711);
        int[] intArray16 = localDateTime13.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 19373058873187L + "'", long15 == 19373058873187L);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2022, 7, 22, 22473187]");
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        long long8 = dateTimeZone6.convertUTCToLocal((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.util.Date date10 = localDateTime9.toDate();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromDateFields(date10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromDateFields(date10);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3600000L + "'", long8 == 3600000L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 22 08:14:33 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        int int6 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusHours((int) (byte) -1);
        int int9 = localDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusHours((int) (byte) 100);
        int[] intArray15 = islamicChronology0.get((org.joda.time.ReadablePartial) localDateTime13, (long) 1969);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekyear((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plus(readablePeriod19);
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1389, 10, 21, 82801969]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField10 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("weekyear");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weekyear" + "'", str2, "weekyear");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        java.lang.String str10 = property8.toString();
        int int11 = property8.getMinimumValue();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = locale12.stripExtensions();
        java.lang.String str15 = locale12.getDisplayCountry();
        java.lang.String str16 = property8.getAsShortText(locale12);
        org.joda.time.LocalDateTime localDateTime17 = property8.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = islamicChronology20.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology20.yearOfEra();
        long long24 = dateTimeField22.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours((int) (byte) -1);
        int int30 = localDateTime26.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.minus(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, locale37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plus(readablePeriod40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusYears(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusMillis(4);
        int int46 = localDateTime45.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusMillis(7);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology51 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField52 = islamicChronology51.weekyears();
        org.joda.time.DurationField durationField53 = islamicChronology51.halfdays();
        org.joda.time.DurationField durationField54 = islamicChronology51.months();
        org.joda.time.DurationFieldType durationFieldType55 = durationField54.getType();
        boolean boolean56 = localDateTime45.isSupported(durationFieldType55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime17.withFieldAdded(durationFieldType55, 86399999);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[centuryOfEra]" + "'", str10, "Property[centuryOfEra]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u53f0\u6e7e" + "'", str15, "\u53f0\u6e7e");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5785200000L + "'", long24 == 5785200000L);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969" + "'", str39, "1969");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69 + "'", int46 == 69);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(islamicChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object obj2 = null;
        boolean boolean3 = strSet1.remove(obj2);
        java.lang.Object[] objArray4 = strSet1.toArray();
        int int5 = strSet1.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        int int6 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusSeconds((int) ' ');
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localDateTime16.toString(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+01:00" + "'", str3, "+01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0100-01-04T00:00:00.000" + "'", str18, "0100-01-04T00:00:00.000");
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.Chronology chronology11 = islamicChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField12 = islamicChronology2.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = islamicChronology4.weekyears();
        org.joda.time.DurationField durationField6 = islamicChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology4.secondOfDay();
        boolean boolean11 = strSet1.equals((java.lang.Object) islamicChronology4);
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology4.secondOfDay();
        java.lang.String str13 = islamicChronology4.toString();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology4.millisOfSecond();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(islamicChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "IslamicChronology[+01:00]" + "'", str13, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1961);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        java.lang.String str10 = dateTimeZone8.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusSeconds((int) ' ');
        boolean boolean21 = dateTimeZone8.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = islamicChronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+01:00" + "'", str10, "+01:00");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        java.util.Locale locale2 = new java.util.Locale("1969-12-31T23:25:00.101", "1978-01-31T01:03:00.001");
        org.junit.Assert.assertEquals(locale2.toString(), "1969-12-31t23:25:00.101_1978-01-31T01:03:00.001");
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet4);
        boolean boolean6 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet2);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale10.getVariant();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale10, locale12, locale13, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = null;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        boolean boolean23 = strSet2.remove((java.lang.Object) localeList19);
        boolean boolean24 = strSet2.isEmpty();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        boolean boolean27 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = islamicChronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = islamicChronology30.millisOfSecond();
        long long36 = islamicChronology30.add((long) (byte) -1, (long) 0, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 1);
        int int39 = localDateTime38.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusHours((int) (byte) -1);
        int int43 = localDateTime38.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.minus(readablePeriod46);
        int int48 = localDateTime47.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = localDateTime47.getField(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.withMonthOfYear((int) (short) 10);
        boolean boolean54 = islamicChronology30.equals((java.lang.Object) localDateTime47);
        org.joda.time.DurationField durationField55 = islamicChronology30.minutes();
        boolean boolean56 = strSet26.remove((java.lang.Object) islamicChronology30);
        java.util.Spliterator<java.lang.String> strSpliterator57 = strSet26.spliterator();
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder58.setVariant("");
        java.util.Locale locale61 = java.util.Locale.PRC;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.lang.String str63 = locale61.getScript();
        java.util.Locale.Builder builder64 = builder58.setLocale(locale61);
        java.util.Locale locale65 = builder64.build();
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology71 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone70);
        org.joda.time.DurationField durationField72 = islamicChronology71.weekyears();
        org.joda.time.DurationField durationField73 = islamicChronology71.halfdays();
        org.joda.time.DateTimeField dateTimeField74 = islamicChronology71.yearOfEra();
        org.joda.time.DateTimeField dateTimeField75 = islamicChronology71.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = islamicChronology71.monthOfYear();
        org.joda.time.DateTimeField dateTimeField77 = islamicChronology71.secondOfDay();
        boolean boolean78 = strSet68.equals((java.lang.Object) islamicChronology71);
        java.util.Spliterator<java.lang.String> strSpliterator79 = strSet68.spliterator();
        org.joda.time.tz.Provider provider80 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider80);
        java.util.Set<java.lang.String> strSet82 = provider80.getAvailableIDs();
        boolean boolean83 = strSet68.removeAll((java.util.Collection<java.lang.String>) strSet82);
        boolean boolean84 = strSet66.addAll((java.util.Collection<java.lang.String>) strSet68);
        boolean boolean85 = strSet26.addAll((java.util.Collection<java.lang.String>) strSet68);
        java.lang.Object obj86 = null;
        boolean boolean87 = strSet26.equals(obj86);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FR" + "'", str14, "FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(islamicChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 23 + "'", int39 == 23);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(islamicChronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSpliterator79);
        org.junit.Assert.assertNotNull(provider80);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.weekOfWeekyear();
        java.util.Locale locale11 = new java.util.Locale("+00:00", "Korean (South Korea)", "+100:00");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale15.getScript();
        java.util.Locale.Builder builder18 = builder12.setLocale(locale15);
        java.util.Locale.Builder builder21 = builder18.setExtension('x', "1969");
        java.util.Locale locale22 = builder18.build();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale22.getDisplayCountry(locale24);
        java.lang.String str27 = locale11.getDisplayLanguage(locale24);
        java.lang.String str28 = dateTimeField6.getAsText(17768332799999000L, locale11);
        java.util.Set<java.lang.String> strSet29 = locale11.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals(locale11.toString(), "+00:00_KOREAN (SOUTH KOREA)_+100:00");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN_#x-1969");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc911\uad6d" + "'", str26, "\uc911\uad6d");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "29" + "'", str28, "29");
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minus(readableDuration10);
        int int12 = localDateTime1.getSecondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime1.getFieldTypes();
        int int14 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime1.plusWeeks(59);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime1.minusDays(1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfCentury();
        java.lang.String str20 = localDateTime18.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969-12-30T23:00:00.001" + "'", str20, "1969-12-30T23:00:00.001");
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = islamicChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withMillisOfSecond(60);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusYears(100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withYearOfEra(45);
        int int29 = localDateTime28.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 22);
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = islamicChronology2.getDateTimeMillis(3L, 1965, 53, 1380, 10179683);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1965 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = islamicChronology2.withZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getName(3L);
        long long14 = dateTimeZone9.convertUTCToLocal(17763840000000L);
        java.lang.String str15 = dateTimeZone9.toString();
        long long18 = dateTimeZone9.convertLocalToUTC((long) 41, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 17763840000000L + "'", long14 == 17763840000000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 41L + "'", long18 == 41L);
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withHourOfDay(5);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes(1969);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(90);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int13 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.centuryOfEra();
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = property16.addWrapFieldToCopy((-3600000));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withSecondOfMinute(0);
        int int23 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED;
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1, leapYearPatternType2);
        org.joda.time.DurationField durationField4 = islamicChronology3.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.weekyear();
        org.joda.time.DurationField durationField6 = islamicChronology3.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(leapYearPatternType2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        java.lang.String str22 = property20.getAsString();
        org.joda.time.LocalDateTime localDateTime24 = property20.addWrapFieldToCopy(999);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks(11);
        int[] intArray28 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime26, (-86400001L));
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.centuryOfEra();
        org.joda.time.DurationField durationField31 = dateTimeField30.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1389, 10, 21, 3599999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNull(durationField31);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = islamicChronology17.weekyears();
        org.joda.time.DurationField durationField19 = islamicChronology17.halfdays();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        boolean boolean21 = localDateTime11.isSupported(durationFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime9.withFieldAdded(durationFieldType20, (-16385303));
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMinutes((-1921));
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.year();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        int int30 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfDay();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.plusMinutes((int) (short) 1);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(islamicChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DurationField durationField6 = islamicChronology2.years();
        java.lang.String str7 = durationField6.toString();
        int int10 = durationField6.getDifference(2193696L, 111600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DurationField[years]" + "'", str7, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("1970");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("\ud55c\uad6d\uc5b4");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime2 = localDateTime1.toDateTime();
        int int3 = localDateTime1.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.millisOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plus(readableDuration5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        boolean boolean10 = localDateTime1.isSupported(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(69);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = islamicChronology7.years();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours((int) (byte) -1);
        int int16 = localDateTime11.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.minus(readablePeriod19);
        int int21 = localDateTime20.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = localDateTime20.getField(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.centuryOfEra();
        int[] intArray26 = islamicChronology7.get((org.joda.time.ReadablePartial) localDateTime20, (long) 0);
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology7.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = locale29.getCountry();
        java.lang.String str31 = dateTimeField27.getAsShortText((-306028799989L), locale29);
        java.lang.String str32 = dateTimeZone1.getName(31528800001L, locale29);
        java.lang.Class<?> wildcardClass33 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FR" + "'", str30, "FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+69:00" + "'", str32, "+69:00");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder3.setLanguage("3600101");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 3600101 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DurationField durationField5 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.secondOfDay();
        int int8 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField9 = islamicChronology2.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = islamicChronology2.getDateTimeMillis(3599901, 0, 26, 82832, 576, 0, 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82832 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = islamicChronology2.add(readablePeriod5, 3600001L, (int) 'a');
        org.joda.time.DurationField durationField9 = islamicChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone10 = islamicChronology2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = islamicChronology2.getDateTimeMillis(31, 39047, 8, (int) (byte) 0, 601, 10800001, 7588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 601 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3600001L + "'", long8 == 3600001L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField8 = islamicChronology2.days();
        org.joda.time.DurationField durationField9 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = islamicChronology2.get(readablePeriod12, 24800404040L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = islamicChronology0.add(readablePeriod4, (-19360364951665L), 14);
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology0.minuteOfDay();
        org.joda.time.Chronology chronology9 = islamicChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-19360364951665L) + "'", long7 == (-19360364951665L));
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = islamicChronology23.weekyears();
        org.joda.time.DurationField durationField25 = islamicChronology23.halfdays();
        org.joda.time.DurationField durationField26 = islamicChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        int int30 = localDateTime29.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime32.getFields();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField27.getType();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime18.withField(dateTimeFieldType38, (int) ' ');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.centuryOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 1);
        int int48 = localDateTime47.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusHours((int) (byte) -1);
        int int52 = localDateTime47.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime47.minus(readablePeriod55);
        int int57 = localDateTime56.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField59 = localDateTime56.getField(0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plus(readableDuration61);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 1);
        int int65 = localDateTime64.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.minusHours((int) (byte) -1);
        int int69 = localDateTime64.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime64.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime64.minus(readablePeriod72);
        int int74 = localDateTime73.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.minusHours((int) (short) 1);
        int int77 = localDateTime62.compareTo((org.joda.time.ReadablePartial) localDateTime76);
        int int78 = property45.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        int int79 = localDateTime62.getDayOfWeek();
        int int80 = localDateTime62.getEra();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 12 + "'", int52 == 12);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 12 + "'", int69 == 12);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = islamicChronology2.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale1.getUnicodeLocaleType("FR");
        java.lang.String str7 = nameProvider0.getName(locale1, "\uc601\uc5b4", "GMT+00:00");
        java.lang.String str8 = locale1.getDisplayVariant();
        java.lang.String str9 = locale1.toLanguageTag();
        java.lang.String str11 = locale1.getExtension('u');
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder17 = builder14.addUnicodeLocaleAttribute("3600120");
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("100");
        java.util.Locale locale20 = builder19.build();
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.setVariant("");
        java.util.Locale locale25 = builder24.build();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str29 = locale25.getUnicodeLocaleType("41");
        java.util.Set<java.lang.String> strSet30 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale20.getDisplayCountry(locale25);
        java.lang.String str32 = locale25.getISO3Country();
        java.lang.String str33 = locale1.getDisplayVariant(locale25);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Chinese");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Chinese' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.year();
        long long8 = dateTimeField5.add(70L, (int) '4');
        int int10 = dateTimeField5.getMaximumValue((long) 3601970);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        int int16 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime18.getFields();
        boolean boolean20 = dateTimeZone12.isLocalDateTimeGap(localDateTime18);
        int int22 = dateTimeZone12.getOffsetFromLocal((long) 5);
        java.util.TimeZone timeZone23 = dateTimeZone12.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) 3601970, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1592092800070L + "'", long8 == 1592092800070L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292271022 + "'", int10 == 292271022);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3600000 + "'", int22 == 3600000);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+01:00");
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.DurationField durationField26 = islamicChronology2.minutes();
        org.joda.time.DurationField durationField27 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField31 = dateTimeField30.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNull(durationField31);
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        int int9 = dateTimeField6.getDifference((long) (byte) 0, (long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = islamicChronology12.weekyears();
        org.joda.time.DurationField durationField14 = islamicChronology12.halfdays();
        org.joda.time.DurationField durationField15 = islamicChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime21.getFields();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale23);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime37.minusMonths(59);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (short) 0);
        org.joda.time.tz.NameProvider nameProvider48 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str52 = nameProvider48.getShortName(locale49, "jpn", "jpn");
        java.lang.String str53 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale49);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.lang.String str55 = locale54.getVariant();
        java.lang.String str56 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale54);
        int int57 = localDateTime45.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime45.minus(readablePeriod58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime45.minusMonths(2922711);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withSecondOfMinute(41);
        int int64 = localDateTime61.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(nameProvider48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1965" + "'", str53, "1965");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-241595) + "'", int64 == (-241595));
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = islamicChronology2.getDateTimeMillis(411199, 69, 8340001, 576);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("KOR", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("CN");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale10.getVariant();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale10, locale12, locale13, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = null;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.util.Set<java.lang.String> strSet23 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        boolean boolean28 = strSet25.removeAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean29 = strSet23.addAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale33.getVariant();
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale33, locale35, locale36, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale.FilteringMode filteringMode44 = null;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList42, filteringMode44);
        boolean boolean46 = strSet25.remove((java.lang.Object) localeList42);
        java.util.Locale locale47 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.Locale locale49 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList48);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FR" + "'", str14, "FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "FR" + "'", str37, "FR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNull(locale49);
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("millis");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.setExtension('a', "DateTimeField[clockhourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: DateTimeField[clockhourOfDay] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMinutes(100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = islamicChronology9.weekyears();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology16 = islamicChronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = islamicChronology20.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology20.yearOfEra();
        long long24 = dateTimeField22.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours((int) (byte) -1);
        int int30 = localDateTime26.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.minus(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, locale37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plus(readablePeriod40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusYears(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusMillis(4);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology49 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone48);
        boolean boolean50 = dateTimeZone48.isFixed();
        long long54 = dateTimeZone48.convertLocalToUTC((long) (byte) 100, false, 10L);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 86399, dateTimeZone48);
        boolean boolean56 = localDateTime41.isEqual((org.joda.time.ReadablePartial) localDateTime55);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.setVariant("");
        java.util.Locale locale60 = builder59.build();
        java.util.Locale locale62 = new java.util.Locale("");
        java.util.Locale.Builder builder63 = builder59.setLocale(locale62);
        java.util.Locale locale64 = builder59.build();
        java.lang.String str65 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale64);
        java.lang.String str66 = localDateTime2.toString("-01:00", locale64);
        org.joda.time.LocalDateTime.Property property67 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime2.withYearOfEra(274);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = localDateTime69.toString(dateTimeFormatter70);
        int int72 = localDateTime69.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5785200000L + "'", long24 == 5785200000L);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969" + "'", str39, "1969");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(islamicChronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-3599900L) + "'", long54 == (-3599900L));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-01:00" + "'", str66, "-01:00");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0274-02-22T06:14:34.549" + "'", str71, "0274-02-22T06:14:34.549");
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 34 + "'", int72 == 34);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfSecond();
        long long8 = islamicChronology2.add((long) (byte) -1, (long) 0, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        int int15 = localDateTime10.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minus(readablePeriod18);
        int int20 = localDateTime19.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = localDateTime19.getField(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withMonthOfYear((int) (short) 10);
        boolean boolean26 = islamicChronology2.equals((java.lang.Object) localDateTime19);
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = islamicChronology2.minutes();
        int int29 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField30 = islamicChronology2.hours();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType31 = islamicChronology2.getLeapYearPatternType();
        org.joda.time.DateTimeZone dateTimeZone32 = islamicChronology2.getZone();
        org.joda.time.DurationField durationField33 = islamicChronology2.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(leapYearPatternType31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        java.lang.String str12 = property11.getAsText();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setVariant("");
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale17.getScript();
        java.util.Locale.Builder builder20 = builder14.setLocale(locale17);
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale13.getDisplayCountry(locale17);
        java.util.Locale locale23 = locale17.stripExtensions();
        java.lang.String str24 = property11.getAsShortText(locale17);
        java.lang.String str25 = locale17.getISO3Country();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "14" + "'", str12, "14");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "14" + "'", str24, "14");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CHN" + "'", str25, "CHN");
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1);
        int int5 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime7.getFields();
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.lang.String str13 = dateTimeZone1.getName(2143231200001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean15 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+01:00" + "'", str13, "+01:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology0.year();
        org.joda.time.DurationField durationField6 = islamicChronology0.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = islamicChronology0.getDateTimeMillis((-184927057), 57, 0, 0, (int) (byte) 1, (-322672809), 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -322672809 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = islamicChronology2.hours();
        long long10 = durationField7.subtract(8793592050589800110L, 82800001);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 8793293970586200110L + "'", long10 == 8793293970586200110L);
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.year();
        org.joda.time.DurationField durationField5 = islamicChronology2.months();
        long long6 = durationField5.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType7 = durationField5.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = durationField5.getMillis(178588800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 178588800000 * 2551440384");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2551440384L + "'", long6 == 2551440384L);
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        long long14 = durationField11.getDifferenceAsLong((-3599997L), (-43199900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getAsString();
        org.joda.time.LocalDateTime localDateTime14 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property11.roundCeilingCopy();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = property11.getAsText(locale16);
        java.lang.String str19 = property11.getAsText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        timeZone3.setID("\u5927\u97d3\u6c11\u56fd");
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        int int7 = timeZone1.getRawOffset();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("");
        timeZone10.setID("\u5927\u97d3\u6c11\u56fd");
        boolean boolean13 = timeZone10.observesDaylightTime();
        int int15 = timeZone10.getOffset(1586536258406400000L);
        boolean boolean16 = timeZone1.hasSameRules(timeZone10);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("");
        timeZone18.setID("\u5927\u97d3\u6c11\u56fd");
        java.util.TimeZone.setDefault(timeZone18);
        timeZone18.setID("\ud55c\uad6d\uc5b4");
        boolean boolean24 = timeZone10.hasSameRules(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(45, 24);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        timeZone28.setID("0");
        boolean boolean31 = timeZone18.hasSameRules(timeZone28);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        org.joda.time.LocalDateTime localDateTime14 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = property11.addToCopy((long) '4');
        int int17 = property11.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.year();
        org.joda.time.DurationField durationField10 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMinutes(1);
        int int12 = localDateTime8.getWeekOfWeekyear();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "FR");
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("KOR");
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder20 = builder18.setLocale(locale19);
        java.lang.String str21 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, locale19);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.lang.String str25 = locale24.getISO3Country();
        java.lang.String str26 = locale23.getDisplayCountry(locale24);
        java.util.Locale.setDefault(category22, locale24);
        java.lang.String str28 = locale24.getISO3Country();
        java.lang.String str29 = locale24.getVariant();
        java.lang.String str30 = locale24.getCountry();
        java.lang.String str31 = locale19.getDisplayVariant(locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JPN" + "'", str25, "JPN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JPN" + "'", str28, "JPN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JP" + "'", str30, "JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField11 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = islamicChronology2.get(readablePeriod13, 44L, (-30617308799991L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = islamicChronology2.getZone();
        int int27 = dateTimeZone25.getOffset(30335385600001L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3600000 + "'", int27 == 3600000);
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = islamicChronology8.weekyears();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology15 = islamicChronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology8.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology22.weekyear();
        org.joda.time.ReadablePartial readablePartial24 = null;
        int[] intArray31 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray33 = dateTimeField23.addWrapPartial(readablePartial24, 100, intArray31, (int) (short) 0);
        int int34 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDateTime18, intArray31);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 1);
        int int37 = localDateTime36.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusHours((int) (byte) -1);
        int int41 = localDateTime36.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime43);
        int int45 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 1);
        int int48 = localDateTime47.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = localDateTime50.getFields();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale52.getDisplayCountry(locale53);
        java.lang.String str56 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime50.toString(dateTimeFormatter57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime50.minusDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 1);
        int int67 = localDateTime66.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withPeriodAdded(readablePeriod70, 10);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withDayOfYear(11);
        int[] intArray75 = localDateTime74.getValues();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusYears((int) (short) -1);
        java.lang.String str78 = localDateTime74.toString();
        org.joda.time.LocalDateTime.Property property79 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime.Property property80 = localDateTime74.dayOfWeek();
        boolean boolean81 = localDateTime64.isEqual((org.joda.time.ReadablePartial) localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(islamicChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(islamicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JPN" + "'", str54, "JPN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T02:00:00.001" + "'", str58, "1970-01-01T02:00:00.001");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0100-01-11T01:00:00.001" + "'", str78, "0100-01-11T01:00:00.001");
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = islamicChronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.yearOfEra();
        long long15 = dateTimeField13.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        int int18 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours((int) (byte) -1);
        int int21 = localDateTime17.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.minus(readableDuration26);
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime27, locale28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plus(readablePeriod31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withYear((int) (byte) 0);
        int[] intArray40 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime32, (-3599997L));
        org.joda.time.DateTimeField dateTimeField41 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField42 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology45 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = islamicChronology45.weekyears();
        org.joda.time.DateTimeField dateTimeField47 = islamicChronology45.yearOfEra();
        org.joda.time.DurationField durationField48 = islamicChronology45.hours();
        org.joda.time.DateTimeField dateTimeField49 = islamicChronology45.hourOfHalfday();
        org.joda.time.DurationField durationField50 = islamicChronology45.seconds();
        int int51 = durationField42.compareTo(durationField50);
        long long54 = durationField50.getValueAsLong(33L, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(islamicChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 5785200000L + "'", long15 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970" + "'", str30, "1970");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1389, 10, 22, 3]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(islamicChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = islamicChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.era();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.clockhourOfDay();
        int int29 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology2.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DurationField durationField22 = islamicChronology2.minutes();
        org.joda.time.DurationField durationField23 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField25 = islamicChronology2.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("JPN");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int14 = localDateTime9.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.millisOfSecond();
        long long20 = property19.remainder();
        java.lang.String str21 = property19.getName();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.lang.String str23 = property19.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime24 = property19.withMinimumValue();
        boolean boolean26 = property19.equals((java.lang.Object) 59);
        int int27 = property19.getMaximumValue();
        int int28 = property19.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property19.withMaximumValue();
        int int30 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withMinuteOfHour((-6962));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6962 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = islamicChronology3.weekyears();
        org.joda.time.DurationField durationField5 = islamicChronology3.months();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = islamicChronology3.millis();
        java.lang.String str8 = islamicChronology3.toString();
        java.lang.String str9 = islamicChronology3.toString();
        java.lang.String str10 = islamicChronology3.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(17758051200069L, (org.joda.time.Chronology) islamicChronology3);
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField13 = islamicChronology3.millis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "IslamicChronology[+01:00]" + "'", str8, "IslamicChronology[+01:00]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "IslamicChronology[+01:00]" + "'", str9, "IslamicChronology[+01:00]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "IslamicChronology[+01:00]" + "'", str10, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        int int9 = property8.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear(11);
        int[] intArray10 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = property13.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime18 = property13.addToCopy(100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear(42);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = islamicChronology2.millis();
        java.lang.String str7 = islamicChronology2.toString();
        java.lang.String str8 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField10, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IslamicChronology[+01:00]" + "'", str7, "IslamicChronology[+01:00]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "IslamicChronology[+01:00]" + "'", str8, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = islamicChronology2.years();
        java.lang.String str9 = durationField8.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        int int3 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfDay();
        long long8 = islamicChronology2.add(2015L, (-3598030L), 19);
        org.joda.time.DurationField durationField9 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.era();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfYear(11);
        int[] intArray21 = localDateTime20.getValues();
        int[] intArray22 = null;
        int int23 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime20, intArray22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        int int26 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusHours((int) (byte) -1);
        int int29 = localDateTime25.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime25.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.minus(readableDuration34);
        int int36 = localDateTime25.getSecondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = localDateTime25.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime25.minus(readableDuration38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        int int42 = localDateTime41.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusHours((int) (byte) -1);
        int int46 = localDateTime41.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.withMillisOfSecond((int) (byte) 100);
        int[] intArray49 = localDateTime41.getValues();
        int[] intArray50 = localDateTime41.getValues();
        int int51 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime39, intArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime39.withDate(67, 364, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 364 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-68360555L) + "'", long8 == (-68360555L));
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 3600001]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1970, 1, 1, 3600001]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField8 = islamicChronology2.days();
        org.joda.time.DurationField durationField9 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.secondOfMinute();
        org.joda.time.DurationField durationField11 = islamicChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField12.set(7199941L, "ja_jp");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ja_jp\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.secondOfMinute();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = locale9.stripExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet14 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str15 = dateTimeField7.getAsShortText(1592092800070L, locale9);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = islamicChronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology18.secondOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology18.days();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology18.dayOfMonth();
        int int26 = dateTimeField24.getLeapAmount((long) 49);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology29.secondOfDay();
        org.joda.time.DurationField durationField32 = islamicChronology29.seconds();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        long long42 = islamicChronology29.set((org.joda.time.ReadablePartial) localDateTime33, 2015L);
        int int43 = localDateTime33.getSecondOfMinute();
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.util.Locale.setDefault(locale44);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = locale44.getDisplayCountry(locale48);
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale50.getISO3Country();
        java.lang.String str53 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime33, locale50);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 1);
        int int56 = localDateTime55.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusMinutes(1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withDayOfMonth(4);
        boolean boolean61 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        int[] intArray62 = localDateTime33.getValues();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.toLanguageTag();
        java.lang.String str66 = locale64.getDisplayName();
        java.lang.String str67 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, 1910, locale64);
        int int68 = dateTimeField7.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u53f0\u6e7e" + "'", str12, "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(islamicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 19360365275304L + "'", long42 == 19360365275304L);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str46, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str49, "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JPN" + "'", str52, "JPN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "22" + "'", str53, "22");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[2022, 2, 22, 29675304]");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str66, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1910" + "'", str67, "1910");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 59 + "'", int68 == 59);
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        int int30 = localDateTime29.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) (byte) -1);
        int int34 = localDateTime29.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime29.millisOfSecond();
        long long40 = property39.remainder();
        java.lang.String str41 = property39.getName();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = property39.getAsText(locale42);
        org.joda.time.LocalDateTime localDateTime44 = property39.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMonths(45);
        java.util.Locale locale50 = new java.util.Locale("2022-02-22T08:08:42.225", "Property[centuryOfEra]", "\u897f\u5143");
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.lang.String str52 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime46, locale50);
        int int53 = localDateTime46.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withDurationAdded(readableDuration54, 24263);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "millisOfSecond" + "'", str41, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "\u897f\u5143");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22t08:08:42.225" + "'", str51, "2022-02-22t08:08:42.225");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "13" + "'", str52, "13");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 13 + "'", int53 == 13);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("");
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        boolean boolean11 = strSet5.equals((java.lang.Object) timeZone7);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale13.getISO3Country();
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        strSet16.clear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        int int20 = localDateTime19.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours((int) (byte) -1);
        int int24 = localDateTime19.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.minus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime19.millisOfSecond();
        long long30 = property29.remainder();
        java.lang.String str31 = property29.getName();
        int int32 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property29.addWrapFieldToCopy(70);
        org.joda.time.LocalDateTime localDateTime35 = property29.roundFloorCopy();
        boolean boolean36 = strSet16.remove((java.lang.Object) localDateTime35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.lang.String str41 = locale40.getVariant();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale40, locale42, locale43, locale45, locale46 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = null;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        boolean boolean58 = strSet55.removeAll((java.util.Collection<java.lang.String>) strSet57);
        boolean boolean59 = strSet53.addAll((java.util.Collection<java.lang.String>) strSet55);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.lang.String str64 = locale63.getVariant();
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = locale66.getCountry();
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale63, locale65, locale66, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale.FilteringMode filteringMode74 = null;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList72, filteringMode74);
        boolean boolean76 = strSet55.remove((java.lang.Object) localeList72);
        java.util.Locale locale77 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap78);
        java.util.Collection<java.util.Locale> localeCollection80 = null;
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, localeCollection80);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap82);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap84);
        java.util.RandomAccess[] randomAccessArray86 = new java.util.RandomAccess[] { languageRangeList38 };
        java.util.RandomAccess[] randomAccessArray87 = strSet16.toArray(randomAccessArray86);
        boolean boolean88 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet16);
        int int89 = strSet16.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ub300\ub9cc" + "'", str3, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "KOR" + "'", str15, "KOR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "FR" + "'", str44, "FR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "FR" + "'", str67, "FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(locale77);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(languageRangeList83);
        org.junit.Assert.assertNotNull(languageRangeList85);
        org.junit.Assert.assertNotNull(randomAccessArray86);
        org.junit.Assert.assertNotNull(randomAccessArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale5 = new java.util.Locale("");
        java.util.Locale.Builder builder6 = builder2.setLocale(locale5);
        java.util.Locale locale7 = builder2.build();
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale.Builder builder10 = builder8.setVariant("catalan");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguage("1970-01-01T00:00:00.101");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1970-01-01T00:00:00.101 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.minuteOfDay();
        long long13 = dateTimeField10.addWrapField(19360361440124L, 3632);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 19360406560124L + "'", long13 == 19360406560124L);
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = islamicChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField7 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField11 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology2.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = islamicChronology2.add(readablePeriod15, (-34586034507360L), 90);
        org.joda.time.DurationField durationField19 = islamicChronology2.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-34586034507360L) + "'", long18 == (-34586034507360L));
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localDateTime34.getFields();
        boolean boolean36 = dateTimeZone28.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.TimeZone timeZone38 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology39 = islamicChronology2.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField40 = islamicChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField42 = islamicChronology2.days();
        long long45 = durationField42.getDifferenceAsLong(18682354800000L, 10522044893730L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 94448L + "'", long45 == 94448L);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readableDuration7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfYear(11);
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours((int) (short) 0);
        int int22 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property23 = localDateTime8.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale5 = new java.util.Locale("");
        java.util.Locale.Builder builder6 = builder2.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.String str10 = locale7.getDisplayCountry();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale7.getDisplayCountry(locale11);
        java.util.Locale.Builder builder14 = builder2.setLocale(locale11);
        java.util.Locale locale15 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder14.setVariant("centuries");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: centuries [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ub300\ub9cc" + "'", str10, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u53f0\u7063" + "'", str13, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField4 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertNotNull(islamicChronology7);
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = islamicChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology2.getZone();
        java.lang.String str9 = islamicChronology2.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours((int) (byte) -1);
        int int15 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime19, (long) 354);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.hourOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = islamicChronology2.getDateTimeMillis((int) '#', 10179683, 27, 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10179683 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "IslamicChronology[+01:00]" + "'", str9, "IslamicChronology[+01:00]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600354]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        int int3 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusHours((int) (byte) -1);
        int int7 = localDateTime2.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.millisOfSecond();
        long long13 = property12.remainder();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.util.Locale.setDefault(locale14);
        int int18 = property12.getMaximumShortTextLength(locale14);
        java.lang.String str19 = locale0.getDisplayVariant(locale14);
        java.util.Locale locale20 = locale14.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = locale14.getUnicodeLocaleType("1970-01-01T01:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1970-01-01T01:00:00.100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = islamicChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField2 = islamicChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.yearOfEra();
        int int4 = islamicChronology0.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("280");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder5.setLanguageTag("DateTimeField[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: DateTimeField[dayOfMonth] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = islamicChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology2.getZone();
        int int10 = dateTimeZone8.getOffsetFromLocal(1645510339364L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3600000 + "'", int10 == 3600000);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDateTime12.getFields();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDayOfMonth(14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = islamicChronology23.weekyears();
        org.joda.time.DurationField durationField25 = islamicChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology23.halfdayOfDay();
        org.joda.time.DurationField durationField28 = islamicChronology23.halfdays();
        org.joda.time.DateTimeZone dateTimeZone29 = islamicChronology23.getZone();
        java.lang.String str30 = islamicChronology23.toString();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 1);
        int int33 = localDateTime32.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusHours((int) (byte) -1);
        int int36 = localDateTime32.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundCeilingCopy();
        int[] intArray42 = islamicChronology23.get((org.joda.time.ReadablePartial) localDateTime40, (long) 354);
        islamicChronology2.validate((org.joda.time.ReadablePartial) localDateTime20, intArray42);
        int int44 = localDateTime20.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "IslamicChronology[+01:00]" + "'", str30, "IslamicChronology[+01:00]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1389, 10, 22, 3600354]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.addWrapFieldToCopy((-3600000));
        org.joda.time.LocalDateTime localDateTime13 = property8.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = islamicChronology16.weekyears();
        org.joda.time.DurationField durationField18 = islamicChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = islamicChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology16.monthOfYear();
        org.joda.time.Chronology chronology22 = islamicChronology16.withUTC();
        org.joda.time.DurationField durationField23 = islamicChronology16.weekyears();
        org.joda.time.DurationField durationField24 = islamicChronology16.weeks();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology16);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localDateTime34.getFields();
        boolean boolean36 = dateTimeZone28.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.TimeZone timeZone38 = dateTimeZone28.toTimeZone();
        long long40 = dateTimeZone28.previousTransition((long) 24);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(11L, dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 1);
        int int45 = localDateTime44.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusHours((int) (byte) -1);
        int int49 = localDateTime44.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime44.minus(readablePeriod52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime44.millisOfSecond();
        long long55 = property54.remainder();
        java.lang.String str56 = property54.getName();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = property54.getAsText(locale57);
        org.joda.time.LocalDateTime localDateTime59 = property54.withMinimumValue();
        boolean boolean61 = property54.equals((java.lang.Object) 59);
        int int62 = property54.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 1);
        int int65 = localDateTime64.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology70 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = localDateTime64.toDateTime(dateTimeZone69);
        long long72 = dateTime71.getMillis();
        long long73 = property54.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime75 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int76 = property8.getDifference((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.LocalDateTime localDateTime77 = property8.getLocalDateTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 24L + "'", long40 == 24L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfSecond" + "'", str56, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 999 + "'", int62 == 999);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(islamicChronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3600000L + "'", long73 == 3600000L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder8 = builder3.addUnicodeLocaleAttribute("2022");
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.lang.String str16 = locale9.getDisplayScript(locale12);
        java.lang.String str17 = locale9.getVariant();
        java.util.Locale.Builder builder18 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder20 = builder18.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder18.setLanguageTag("GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: GMT+00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JPN" + "'", str13, "JPN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.weekyear();
        long long10 = dateTimeField8.roundFloor(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-25059600000L) + "'", long10 == (-25059600000L));
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = property8.getAsShortText(locale9);
        boolean boolean12 = property8.equals((java.lang.Object) "\u5927\u97d3\u6c11\u56fd");
        org.joda.time.LocalDateTime localDateTime13 = property8.roundHalfFloorCopy();
        int int14 = localDateTime13.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("JPN");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = islamicChronology23.weekyears();
        org.joda.time.DurationField durationField25 = islamicChronology23.halfdays();
        org.joda.time.DurationField durationField26 = islamicChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        int int30 = localDateTime29.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime32.getFields();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField27.getType();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime18.withField(dateTimeFieldType38, (int) ' ');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime18.plusSeconds(1);
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = localDateTime18.getFields();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime18.plusMonths(31);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 1);
        int int49 = localDateTime48.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology54 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = localDateTime48.toDateTime(dateTimeZone53);
        java.lang.String str56 = dateTimeZone53.getID();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((-20217598030L), dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.minus(readablePeriod60);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime61);
        int int63 = localDateTime62.getMillisOfSecond();
        int int64 = localDateTime62.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(islamicChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(islamicChronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+01:00" + "'", str56, "+01:00");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 970 + "'", int63 == 970);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.addWrapFieldToCopy((-3600000));
        org.joda.time.LocalDateTime localDateTime13 = property8.getLocalDateTime();
        int int14 = property8.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property8.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = property8.setCopy("ko");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ko\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField6 = islamicChronology2.seconds();
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        boolean boolean10 = islamicChronology2.equals((java.lang.Object) charSet9);
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str8, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = islamicChronology27.years();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        int int36 = localDateTime31.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.minus(readablePeriod39);
        int int41 = localDateTime40.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = localDateTime40.getField(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.centuryOfEra();
        int[] intArray46 = islamicChronology27.get((org.joda.time.ReadablePartial) localDateTime40, (long) 0);
        org.joda.time.DateTimeField dateTimeField47 = islamicChronology27.millisOfDay();
        org.joda.time.DurationField durationField48 = islamicChronology27.centuries();
        org.joda.time.DateTimeZone dateTimeZone49 = islamicChronology27.getZone();
        org.joda.time.Chronology chronology50 = islamicChronology2.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = islamicChronology2.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = islamicChronology2.getDateTimeMillis((long) 9, (-6), 601, 4040, 27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(islamicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getAsString();
        org.joda.time.LocalDateTime localDateTime14 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property11.roundCeilingCopy();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = property11.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology26 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime20.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = islamicChronology30.weekyears();
        org.joda.time.DurationField durationField32 = islamicChronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology30.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 1);
        int int36 = localDateTime35.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours((int) (byte) -1);
        int int40 = localDateTime35.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.minus(readablePeriod43);
        int int45 = localDateTime44.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = localDateTime44.getField(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        int int51 = localDateTime50.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withDayOfYear(11);
        int[] intArray59 = localDateTime58.getValues();
        islamicChronology30.validate((org.joda.time.ReadablePartial) localDateTime44, intArray59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime44.withMillisOfDay(0);
        boolean boolean63 = dateTime27.equals((java.lang.Object) localDateTime62);
        java.lang.String str64 = dateTime27.toString();
        org.joda.time.Chronology chronology65 = dateTime27.getChronology();
        int int66 = property11.getDifference((org.joda.time.ReadableInstant) dateTime27);
        int int67 = property11.getLeapAmount();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime69 = property11.setCopy("1969-12-04T23:01:00.001");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-04T23:01:00.001\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(islamicChronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(islamicChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01T01:00:00.001+01:00" + "'", str64, "1970-01-01T01:00:00.001+01:00");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3600000 + "'", int66 == 3600000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale5 = new java.util.Locale("");
        java.util.Locale.Builder builder6 = builder2.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("JPN");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale10.getVariant();
        java.util.Locale.Builder builder13 = builder9.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder14.setLanguage("1970-01-01T01:00:00.100+01:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1970-01-01T01:00:00.100+01:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        java.util.Locale locale3 = new java.util.Locale("65", "seconds", "1970-01-01T00:00:00.001");
        org.junit.Assert.assertEquals(locale3.toString(), "65_SECONDS_1970-01-01T00:00:00.001");
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.lang.String str4 = nameProvider0.getName(locale1, "JPN", "0");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime6.millisOfSecond();
        long long17 = property16.remainder();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.util.Locale.setDefault(locale18);
        int int22 = property16.getMaximumShortTextLength(locale18);
        java.lang.String str25 = nameProvider0.getName(locale18, "IslamicChronology[+01:00]", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale30 = new java.util.Locale("weekOfWeekyear", "millisOfSecond");
        java.lang.String str31 = locale27.getDisplayScript(locale30);
        java.lang.String str34 = nameProvider0.getShortName(locale30, "weekOfWeekyear", "GMT+01:00");
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str38 = nameProvider0.getShortName(locale35, "8", "\u97e9\u56fd");
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder40.setVariant("");
        java.util.Locale.Builder builder44 = builder42.setVariant("1970");
        java.util.Locale locale45 = builder42.build();
        java.util.Locale.setDefault(category39, locale45);
        java.util.Locale locale47 = locale45.stripExtensions();
        java.util.Locale.setDefault(locale45);
        java.lang.String str51 = nameProvider0.getShortName(locale45, "1970-01-01T00:59:59.998", "29");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale30.toString(), "weekofweekyear_MILLISOFSECOND");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        java.lang.String str10 = dateTimeZone8.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusSeconds((int) ' ');
        boolean boolean21 = dateTimeZone8.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = islamicChronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField24 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+01:00" + "'", str10, "+01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        long long6 = dateTimeField4.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        int int12 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.minus(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMillis(9);
        int int24 = localDateTime23.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours((int) (byte) -1);
        int int31 = localDateTime26.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime26.minus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime26.millisOfSecond();
        long long37 = property36.remainder();
        java.lang.String str38 = property36.getName();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.lang.String str40 = property36.getAsText(locale39);
        org.joda.time.LocalDateTime localDateTime41 = property36.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusYears(4);
        boolean boolean44 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime23.withDayOfMonth(1380);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1380 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 5785200000L + "'", long6 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = islamicChronology3.years();
        org.joda.time.DurationField durationField6 = islamicChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = islamicChronology3.getZone();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 2922711, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(69);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        org.joda.time.DurationField durationField14 = property11.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField15 = property11.getField();
        org.joda.time.DateTimeField dateTimeField16 = property11.getField();
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        int int18 = property11.getMaximumTextLength(locale17);
        org.joda.time.tz.Provider provider19 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider19);
        org.joda.time.DateTimeZone dateTimeZone22 = provider19.getZone("1970");
        java.util.Set<java.lang.String> strSet23 = provider19.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone25 = provider19.getZone("\ud55c\uad6d\uc5b4");
        java.util.Set<java.lang.String> strSet26 = provider19.getAvailableIDs();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.lang.String str30 = locale28.getISO3Country();
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        int int34 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((int) (byte) -1);
        int int37 = localDateTime33.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.centuryOfEra();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = property40.getAsShortText(locale41);
        boolean boolean44 = property40.equals((java.lang.Object) "\u5927\u97d3\u6c11\u56fd");
        java.util.Locale locale48 = new java.util.Locale("+01:00", "19", "1");
        int int49 = property40.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale48.toLanguageTag();
        java.lang.String str51 = locale28.getDisplayLanguage(locale48);
        boolean boolean52 = strSet26.equals((java.lang.Object) locale48);
        java.util.Locale locale53 = locale48.stripExtensions();
        java.lang.String str54 = locale17.getDisplayLanguage(locale53);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(provider19);
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "KOR" + "'", str30, "KOR");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "19" + "'", str42, "19");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals(locale48.toString(), "+01:00_19_1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 7 + "'", int49 == 7);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "x-lvariant-1" + "'", str50, "x-lvariant-1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Korean" + "'", str51, "Korean");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "+01:00_19_1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japanese" + "'", str54, "Japanese");
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.DurationField durationField26 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.year();
        java.lang.String str30 = dateTimeField29.toString();
        long long32 = dateTimeField29.remainder(29113254000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DateTimeField[year]" + "'", str30, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 20995200000L + "'", long32 == 20995200000L);
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        int int14 = localDateTime10.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withMinuteOfHour((int) (byte) 1);
        int int18 = localDateTime16.getValue(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusSeconds(11);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears(67);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology26 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = islamicChronology26.years();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        int int31 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusHours((int) (byte) -1);
        int int35 = localDateTime30.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.minus(readablePeriod38);
        int int40 = localDateTime39.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = localDateTime39.getField(0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.centuryOfEra();
        int[] intArray45 = islamicChronology26.get((org.joda.time.ReadablePartial) localDateTime39, (long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.withMillisOfSecond(60);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 1);
        int int50 = localDateTime49.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusHours((int) (byte) -1);
        int int53 = localDateTime49.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withMinuteOfHour((int) (byte) 1);
        int int57 = localDateTime55.getValue(0);
        boolean boolean58 = localDateTime47.equals((java.lang.Object) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime47.minusYears(183);
        int[] intArray61 = localDateTime60.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = dateTimeField8.set((org.joda.time.ReadablePartial) localDateTime20, 936, intArray61, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 936");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(islamicChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1787, 1, 1, 3600060]");
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = property8.getAsShortText(locale9);
        boolean boolean12 = property8.equals((java.lang.Object) "\u5927\u97d3\u6c11\u56fd");
        java.util.Locale locale16 = new java.util.Locale("+01:00", "19", "1");
        int int17 = property8.getMaximumShortTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime18 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.era();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(locale16.toString(), "+01:00_19_1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withMinuteOfHour((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plus(readablePeriod8);
        int int10 = localDateTime1.getEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone17);
        boolean boolean20 = dateTimeZone17.equals((java.lang.Object) 10L);
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = dateTimeZone17.getShortName(1970L, locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        java.lang.String str26 = property14.getAsShortText(locale22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = islamicChronology29.weekyears();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology33 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology36 = islamicChronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField37 = islamicChronology29.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 1);
        int int40 = localDateTime39.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology43 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = islamicChronology43.weekyear();
        org.joda.time.ReadablePartial readablePartial45 = null;
        int[] intArray52 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray54 = dateTimeField44.addWrapPartial(readablePartial45, 100, intArray52, (int) (short) 0);
        int int55 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDateTime39, intArray52);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 1);
        int int58 = localDateTime57.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.minusHours((int) (byte) -1);
        int int62 = localDateTime57.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime64);
        int int66 = localDateTime65.getEra();
        int int67 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.withPeriodAdded(readablePeriod68, 359999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = localDateTime65.withDayOfWeek((-5640));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5640 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(islamicChronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+01:00" + "'", str24, "+01:00");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "19" + "'", str26, "19");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(islamicChronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(islamicChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 11 + "'", int55 == 11);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField5 = islamicChronology2.seconds();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = islamicChronology2.add(readablePeriod6, 30335378400001L, (-19));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30335378400001L + "'", long9 == 30335378400001L);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.equals((java.lang.Object) 10L);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone18.getShortName(1970L, locale23);
        org.joda.time.DateTime dateTime26 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime16.plusMonths(7);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        int int32 = localDateTime30.getMillisOfSecond();
        boolean boolean33 = localDateTime16.equals((java.lang.Object) localDateTime30);
        int int34 = localDateTime16.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime16.withYearOfEra(32);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime16.withSecondOfMinute(24);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime16.plus(readableDuration39);
        int int41 = localDateTime16.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(islamicChronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JPN" + "'", str24, "JPN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+01:00" + "'", str25, "+01:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DurationField durationField22 = islamicChronology2.minutes();
        org.joda.time.DurationField durationField23 = islamicChronology2.minutes();
        org.joda.time.DurationField durationField24 = islamicChronology2.millis();
        long long27 = durationField24.getValueAsLong(19360365060414L, 2967561L);
        long long30 = durationField24.add(61234531200014L, (long) (-683357));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 19360365060414L + "'", long27 == 19360365060414L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 61234530516657L + "'", long30 == 61234530516657L);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = islamicChronology5.years();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology5.yearOfCentury();
        long long10 = dateTimeField8.roundCeiling((long) 1970);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int19 = localDateTime18.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = islamicChronology25.years();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        int int30 = localDateTime29.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) (byte) -1);
        int int34 = localDateTime29.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.minus(readablePeriod37);
        int int39 = localDateTime38.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = localDateTime38.getField(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.centuryOfEra();
        int[] intArray44 = islamicChronology25.get((org.joda.time.ReadablePartial) localDateTime38, (long) 0);
        org.joda.time.DateTimeField dateTimeField45 = islamicChronology25.hourOfDay();
        org.joda.time.DurationField durationField46 = islamicChronology25.centuries();
        boolean boolean47 = property20.equals((java.lang.Object) durationField46);
        org.joda.time.LocalDateTime localDateTime48 = property20.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        int int51 = localDateTime50.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusHours((int) (byte) -1);
        int int55 = localDateTime50.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime50.millisOfSecond();
        long long61 = property60.remainder();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale.setDefault(locale62);
        int int66 = property60.getMaximumShortTextLength(locale62);
        java.lang.String str67 = property20.getAsShortText(locale62);
        java.lang.String str68 = dateTimeField8.getAsShortText(306172828800019L, locale62);
        java.lang.String str69 = dateTimeZone0.getShortName((-25059600000L), locale62);
        boolean boolean70 = locale62.hasExtensions();
        boolean boolean71 = locale62.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(islamicChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5785200000L + "'", long10 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(islamicChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "89" + "'", str68, "89");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+01:00" + "'", str69, "+01:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        int int12 = localDateTime7.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime7.millisOfSecond();
        long long18 = property17.remainder();
        java.lang.String str19 = property17.getName();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.LocalDateTime localDateTime22 = property17.withMinimumValue();
        int[] intArray24 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime22, (-2938031L));
        org.joda.time.DurationField durationField25 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = islamicChronology29.weekyears();
        org.joda.time.DurationField durationField31 = islamicChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = islamicChronology29.yearOfEra();
        java.util.Locale locale34 = new java.util.Locale("");
        java.lang.String str35 = locale34.getISO3Language();
        int int36 = dateTimeField32.getMaximumShortTextLength(locale34);
        long long38 = dateTimeField32.roundHalfEven((long) ' ');
        java.lang.String str40 = dateTimeField32.getAsShortText((-20217598030L));
        long long43 = dateTimeField32.set((-262800000L), "12");
        long long45 = dateTimeField32.roundHalfFloor((long) 59);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology49 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone48);
        org.joda.time.DurationField durationField50 = islamicChronology49.weekyears();
        org.joda.time.DurationField durationField51 = islamicChronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = islamicChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = islamicChronology49.halfdayOfDay();
        org.joda.time.DurationField durationField54 = islamicChronology49.halfdays();
        org.joda.time.DateTimeZone dateTimeZone55 = islamicChronology49.getZone();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(3600001L, dateTimeZone55);
        int int57 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime56, locale58);
        int int61 = dateTimeField26.getMaximumValue(42068199600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfSecond" + "'", str19, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1389, 10, 22, 661969]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 5785200000L + "'", long38 == 5785200000L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1389" + "'", str40, "1389");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-42160266000000L) + "'", long43 == (-42160266000000L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 5785200000L + "'", long45 == 5785200000L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(islamicChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "4" + "'", str59, "4");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int[] intArray28 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime26, 10L);
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField32 = islamicChronology2.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1389, 10, 22, 3600010]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = islamicChronology13.years();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        int int18 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours((int) (byte) -1);
        int int22 = localDateTime17.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minus(readablePeriod25);
        int int27 = localDateTime26.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = localDateTime26.getField(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.centuryOfEra();
        int[] intArray32 = islamicChronology13.get((org.joda.time.ReadablePartial) localDateTime26, (long) 0);
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology13.hourOfDay();
        org.joda.time.DurationField durationField34 = islamicChronology13.centuries();
        boolean boolean35 = property8.equals((java.lang.Object) durationField34);
        org.joda.time.LocalDateTime localDateTime36 = property8.withMaximumValue();
        org.joda.time.DurationField durationField37 = property8.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property8.getFieldType();
        int int39 = property8.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime40 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withWeekyear(0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withMinuteOfHour((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.toString();
        long long13 = dateTimeZone9.nextTransition((long) 1);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) 'x');
        int int17 = dateTimeZone9.getStandardOffset(0L);
        org.joda.time.DateTime dateTime18 = localDateTime1.toDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime1.minusYears(24);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime1.minusHours(3600);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(islamicChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+01:00" + "'", str11, "+01:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3600000 + "'", int17 == 3600000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("DateTimeField[monthOfYear]");
        boolean boolean2 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField8 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(355);
        org.joda.time.Chronology chronology12 = islamicChronology2.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = islamicChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMinutes(100);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int14 = localDateTime9.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readablePeriod17);
        int int19 = localDateTime18.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = localDateTime18.getField(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.centuryOfEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        int int31 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusHours((int) (byte) -1);
        int int35 = localDateTime30.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.minus(readablePeriod38);
        int int40 = localDateTime39.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = localDateTime39.getField(0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.centuryOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property44.getFieldType();
        boolean boolean46 = localDateTime28.isSupported(dateTimeFieldType45);
        int int47 = localDateTime28.getMinuteOfHour();
        boolean boolean48 = dateTime7.equals((java.lang.Object) int47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        int int51 = localDateTime50.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology56 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDateTime50.toDateTime(dateTimeZone55);
        java.lang.String str58 = dateTimeZone55.getID();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 1);
        int int61 = localDateTime60.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology66 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDateTime60.toDateTime(dateTimeZone65);
        long long68 = dateTime67.getMillis();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 1);
        int int71 = localDateTime70.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology76 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDateTime70.toDateTime(dateTimeZone75);
        long long78 = dateTime77.getMillis();
        long long79 = dateTime77.getMillis();
        boolean boolean80 = dateTime67.isAfter((org.joda.time.ReadableInstant) dateTime77);
        int int81 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean82 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime77.getZone();
        org.joda.time.DateTime dateTime84 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        java.lang.String str85 = localDateTime4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime87 = localDateTime4.withMillisOfDay((-69556));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -69556 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(islamicChronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+01:00" + "'", str58, "+01:00");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(islamicChronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(islamicChronology76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3600000 + "'", int81 == 3600000);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-22T09:54:36.607" + "'", str85, "2022-02-22T09:54:36.607");
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("GMT");
        java.util.Set<java.lang.String> strSet2 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        boolean boolean7 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet6);
        boolean boolean8 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale12.getVariant();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale12, locale14, locale15, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = null;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        boolean boolean25 = strSet4.remove((java.lang.Object) localeList21);
        boolean boolean26 = strSet4.isEmpty();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = localDateTime37.getField(0);
        boolean boolean41 = strSet4.remove((java.lang.Object) 0);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getISO3Country();
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        boolean boolean47 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.Spliterator<java.lang.String> strSpliterator48 = strSet4.spliterator();
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode49);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale locale53 = locale51.stripExtensions();
        java.lang.String str54 = locale51.getDisplayCountry();
        java.util.Set<java.lang.String> strSet55 = locale51.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet55);
        java.util.Collection<java.lang.String> strCollection57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList1, strCollection57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FR" + "'", str16, "FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "KOR" + "'", str45, "KOR");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode49.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ub300\ub9cc" + "'", str54, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = islamicChronology2.millis();
        java.lang.String str7 = islamicChronology2.toString();
        org.joda.time.DurationField durationField8 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IslamicChronology[+01:00]" + "'", str7, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfMinute();
        long long8 = islamicChronology2.add((-3598030L), (long) 292271022, 9);
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField10 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.secondOfMinute();
        java.lang.String str14 = dateTimeField12.getAsText((-3600000L));
        long long17 = dateTimeField12.add(74286706435200000L, 8970);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2626841168L + "'", long8 == 2626841168L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 74286706444170000L + "'", long17 == 74286706444170000L);
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField5 = islamicChronology2.seconds();
        long long8 = durationField5.getMillis(9, 2143231200001L);
        long long11 = durationField5.getMillis(17763840005100L, (long) (-50623));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 9000L + "'", long8 == 9000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 17763840005100000L + "'", long11 == 17763840005100000L);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        int int14 = property11.getMinimumValueOverall();
        int int15 = property11.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = property11.roundHalfFloorCopy();
        org.joda.time.Interval interval17 = property11.toInterval();
        java.lang.String str18 = property11.getAsText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property11.getAsText(locale19);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = islamicChronology9.weekyears();
        org.joda.time.DurationField durationField11 = islamicChronology9.months();
        org.joda.time.DurationField durationField12 = islamicChronology9.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = islamicChronology9.getZone();
        org.joda.time.Chronology chronology14 = islamicChronology2.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale1.getDisplayCountry(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.lang.Object obj8 = locale7.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JPN" + "'", str3, "JPN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "ja_JP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "ja_JP");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "ja_JP");
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.weekOfWeekyear();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology2.getLeapYearPatternType();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        int int17 = localDateTime16.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusHours((int) (byte) -1);
        int int21 = localDateTime16.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minus(readablePeriod24);
        int int26 = localDateTime25.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = localDateTime25.getField(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean36 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.weekyear();
        int int38 = localDateTime35.getDayOfWeek();
        int int39 = localDateTime35.getYear();
        int int40 = localDateTime35.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.plusYears(3);
        long long44 = islamicChronology2.set((org.joda.time.ReadablePartial) localDateTime35, (long) 336959);
        java.lang.String str45 = islamicChronology2.toString();
        org.joda.time.DurationField durationField46 = islamicChronology2.halfdays();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = islamicChronology2.get(readablePeriod47, (-61084799941L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(leapYearPatternType6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 17763840005100L + "'", long44 == 17763840005100L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "IslamicChronology[+01:00]" + "'", str45, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        boolean boolean3 = locale0.hasExtensions();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        int int6 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusHours((int) (byte) -1);
        int int10 = localDateTime5.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime5.millisOfSecond();
        long long16 = property15.remainder();
        java.lang.String str17 = property15.getName();
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.lang.String str19 = property15.getAsText(locale18);
        org.joda.time.LocalDateTime localDateTime20 = property15.withMinimumValue();
        org.joda.time.Interval interval21 = property15.toInterval();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = islamicChronology24.weekyears();
        org.joda.time.DurationField durationField26 = islamicChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology24.era();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology24.secondOfMinute();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = dateTimeField28.getAsText(17763840000100L, locale30);
        java.lang.String str32 = property15.getAsShortText(locale30);
        org.joda.time.LocalDateTime localDateTime33 = property15.withMinimumValue();
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.setVariant("");
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = locale37.getScript();
        java.util.Locale.Builder builder40 = builder34.setLocale(locale37);
        java.lang.String str41 = property15.getAsText(locale37);
        java.util.Set<java.lang.String> strSet42 = locale37.getUnicodeLocaleKeys();
        java.lang.String str43 = locale0.getDisplayLanguage(locale37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfSecond" + "'", str17, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u671d\u9c9c\u6587" + "'", str43, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        boolean boolean18 = property11.equals((java.lang.Object) 59);
        int int19 = property11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 1);
        int int22 = localDateTime21.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime(dateTimeZone26);
        long long29 = dateTime28.getMillis();
        long long30 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str31 = property11.toString();
        int int32 = property11.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 999 + "'", int19 == 999);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(islamicChronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600000L + "'", long30 == 3600000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[millisOfSecond]" + "'", str31, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = islamicChronology2.add(readablePeriod10, (long) (byte) 0, (-1));
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology2.era();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField17 = islamicChronology2.eras();
        java.lang.String str18 = durationField17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UnsupportedDurationField[eras]" + "'", str18, "UnsupportedDurationField[eras]");
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        int int6 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusSeconds((int) ' ');
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.weekyear();
        java.lang.String str16 = localDateTime13.toString();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+01:00" + "'", str3, "+01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0100-01-01T01:00:32.001" + "'", str16, "0100-01-01T01:00:32.001");
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField8 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField9 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.year();
        long long12 = dateTimeField10.roundFloor(19373058831893L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 19355929200000L + "'", long12 == 19355929200000L);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = islamicChronology2.getZone();
        org.joda.time.DurationField durationField27 = islamicChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField31 = islamicChronology2.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = durationField31.getMillis(19360368539362L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 19360368539362 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        strSet4.clear();
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.stream();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet6.spliterator();
        boolean boolean9 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = islamicChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology12.yearOfEra();
        long long16 = dateTimeField14.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        int int22 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.minus(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        java.lang.String str33 = locale29.getUnicodeLocaleType("JP");
        java.util.Locale.setDefault(locale29);
        java.util.Set<java.lang.String> strSet35 = locale29.getUnicodeLocaleKeys();
        boolean boolean36 = strSet6.removeAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KOR" + "'", str3, "KOR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5785200000L + "'", long16 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor37);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getID();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((-20217598030L), dateTimeZone15);
        org.joda.time.Chronology chronology20 = islamicChronology2.withZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = islamicChronology2.add(readablePeriod21, 3599881L, 359999);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+01:00" + "'", str18, "+01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3599881L + "'", long24 == 3599881L);
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField7 = islamicChronology2.centuries();
        long long13 = islamicChronology2.getDateTimeMillis(70L, (int) (short) 10, 12, (int) (byte) 10, 0);
        org.joda.time.DurationField durationField14 = islamicChronology2.millis();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = islamicChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 33130000L + "'", long13 == 33130000L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime1.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getID();
        java.util.TimeZone timeZone10 = dateTimeZone6.toTimeZone();
        int int12 = dateTimeZone6.getOffset(3608969L);
        java.lang.String str13 = dateTimeZone6.getID();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+01:00" + "'", str9, "+01:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3600000 + "'", int12 == 3600000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+01:00" + "'", str13, "+01:00");
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = islamicChronology2.weeks();
        long long11 = islamicChronology2.add(100L, 1970L, 10);
        org.joda.time.DurationField durationField12 = islamicChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone13 = islamicChronology2.getZone();
        java.lang.Object obj14 = null;
        boolean boolean15 = islamicChronology2.equals(obj14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear(11);
        int[] intArray27 = localDateTime26.getValues();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusHours((int) (short) 0);
        int int30 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime16.plus(readableDuration31);
        boolean boolean33 = islamicChronology2.equals((java.lang.Object) localDateTime32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 19800L + "'", long11 == 19800L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = property8.getAsShortText(locale9);
        boolean boolean12 = property8.equals((java.lang.Object) "\u5927\u97d3\u6c11\u56fd");
        org.joda.time.LocalDateTime localDateTime13 = property8.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.equals((java.lang.Object) 10L);
        java.lang.String str20 = dateTimeZone15.getName((long) '#');
        long long24 = dateTimeZone15.convertLocalToUTC(3L, false, 86400000L);
        org.joda.time.DateTime dateTime25 = localDateTime13.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minusMonths(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        java.lang.String str29 = property28.getAsText();
        int int30 = property28.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+01:00" + "'", str20, "+01:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599997L) + "'", long24 == (-3599997L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1999" + "'", str29, "1999");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        int int14 = property11.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property11.addWrapFieldToCopy(70);
        java.lang.String str17 = property11.getAsShortText();
        java.lang.String str18 = property11.toString();
        int int19 = property11.getMaximumValue();
        java.lang.String str20 = property11.getAsString();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        int int23 = localDateTime22.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime25.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusDays(4);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        int int31 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusHours((int) (byte) -1);
        int int35 = localDateTime30.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.minus(readablePeriod38);
        int int40 = localDateTime39.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = localDateTime39.getField(0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.centuryOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean50 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfDay(24);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.hourOfDay();
        int int55 = localDateTime53.getDayOfWeek();
        int int56 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[millisOfSecond]" + "'", str18, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 999 + "'", int19 == 999);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.hourOfHalfday();
        java.lang.String str11 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField14 = islamicChronology2.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "IslamicChronology[+01:00]" + "'", str11, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        java.lang.String str9 = localDateTime7.toString();
        int int10 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.era();
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.hourOfDay();
        boolean boolean13 = property12.isLeap();
        long long14 = property12.remainder();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:25:00.001" + "'", str9, "1970-01-01T00:25:00.001");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1500001L + "'", long14 == 1500001L);
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.dayOfWeek();
        org.joda.time.DurationField durationField26 = islamicChronology2.months();
        org.joda.time.DurationField durationField27 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyear();
        org.joda.time.DurationField durationField8 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField10 = islamicChronology2.days();
        long long11 = durationField10.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(35, (-16607), 2632, 31, 1069);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = islamicChronology2.getZone();
        org.joda.time.DurationField durationField29 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) "82800001");
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMinutes(29);
        int int9 = localDateTime4.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        timeZone1.setID("\u5927\u97d3\u6c11\u56fd");
        boolean boolean4 = timeZone1.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId5 = timeZone1.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: ????");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        java.lang.String str6 = islamicChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfDay();
        java.lang.String str9 = islamicChronology2.toString();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology2.getLeapYearPatternType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IslamicChronology[+01:00]" + "'", str6, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "IslamicChronology[+01:00]" + "'", str9, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(leapYearPatternType10);
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getID();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((-20217598030L), dateTimeZone15);
        org.joda.time.Chronology chronology20 = islamicChronology2.withZone(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        int int26 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusHours((int) (byte) -1);
        int int30 = localDateTime25.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        int int35 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusHours((int) (byte) -1);
        int int39 = localDateTime34.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.minus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime34.millisOfSecond();
        long long45 = property44.remainder();
        java.lang.String str46 = property44.getName();
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.lang.String str48 = property44.getAsText(locale47);
        org.joda.time.LocalDateTime localDateTime49 = property44.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plus(readablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology56 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = islamicChronology56.weekyears();
        org.joda.time.DurationField durationField58 = islamicChronology56.halfdays();
        org.joda.time.DurationField durationField59 = islamicChronology56.weeks();
        org.joda.time.DateTimeField dateTimeField60 = islamicChronology56.yearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 1);
        int int63 = localDateTime62.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = localDateTime65.getFields();
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale67.getDisplayLanguage(locale68);
        java.lang.String str70 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime65, locale67);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField60.getType();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime51.withField(dateTimeFieldType71, (int) ' ');
        int int74 = localDateTime32.get(dateTimeFieldType71);
        boolean boolean75 = localDateTime23.isSupported(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime23.withWeekyear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime23.plusHours((-322672809));
        org.joda.time.LocalDateTime localDateTime81 = localDateTime23.withWeekyear(3600);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+01:00" + "'", str18, "+01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "millisOfSecond" + "'", str46, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(islamicChronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str69, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970" + "'", str70, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-16385302));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        long long11 = islamicChronology2.getDateTimeMillis(43200004L, 5, 10, (int) (short) 0, (int) (short) 100);
        org.joda.time.DurationField durationField12 = islamicChronology2.months();
        org.joda.time.DurationField durationField13 = islamicChronology2.minutes();
        java.lang.String str14 = durationField13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 15000100L + "'", long11 == 15000100L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DurationField[minutes]" + "'", str14, "DurationField[minutes]");
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        int int5 = timeZone3.getRawOffset();
        timeZone3.setID("IslamicChronology[+01:00]");
        int int9 = timeZone3.getOffset(2143231200001L);
        java.lang.String str10 = timeZone3.getID();
        boolean boolean11 = timeZone3.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "IslamicChronology[+01:00]" + "'", str10, "IslamicChronology[+01:00]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.centuryOfEra();
        org.joda.time.DurationField durationField7 = islamicChronology2.months();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours((int) (byte) -1);
        int int14 = localDateTime9.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.millisOfSecond();
        long long20 = property19.remainder();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.util.Locale.setDefault(locale21);
        int int25 = property19.getMaximumShortTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime27 = property19.addToCopy(100L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, 3601970);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology33 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = islamicChronology33.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = islamicChronology33.millisOfSecond();
        long long39 = islamicChronology33.add((long) (byte) -1, (long) 0, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        int int42 = localDateTime41.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusHours((int) (byte) -1);
        int int46 = localDateTime41.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.minus(readablePeriod49);
        int int51 = localDateTime50.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField53 = localDateTime50.getField(0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withMonthOfYear((int) (short) 10);
        boolean boolean57 = islamicChronology33.equals((java.lang.Object) localDateTime50);
        org.joda.time.DateTimeField dateTimeField58 = islamicChronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = islamicChronology33.year();
        org.joda.time.Chronology chronology60 = islamicChronology33.withUTC();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 1);
        int int63 = localDateTime62.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.minusHours((int) (byte) -1);
        int int67 = localDateTime62.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime62.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime62.minus(readablePeriod70);
        int int72 = localDateTime71.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField74 = localDateTime71.getField(0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime71.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.withMonthOfYear((int) (short) 10);
        int[] intArray79 = chronology60.get((org.joda.time.ReadablePartial) localDateTime71, (-4320000001L));
        islamicChronology2.validate((org.joda.time.ReadablePartial) localDateTime27, intArray79);
        org.joda.time.DurationField durationField81 = islamicChronology2.halfdays();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = islamicChronology2.get(readablePeriod82, (-183593900L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(islamicChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1389, 9, 1, 86399999]");
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMinutes(292278993);
        int[] intArray13 = localDateTime12.getValues();
        int int14 = localDateTime12.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2555, 9, 19, 45180000]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        strSet4.clear();
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.stream();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet6.spliterator();
        boolean boolean9 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = islamicChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology12.yearOfEra();
        long long16 = dateTimeField14.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        int int22 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.minus(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        java.lang.String str33 = locale29.getUnicodeLocaleType("JP");
        java.util.Locale.setDefault(locale29);
        java.util.Set<java.lang.String> strSet35 = locale29.getUnicodeLocaleKeys();
        boolean boolean36 = strSet6.removeAll((java.util.Collection<java.lang.String>) strSet35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(82800001);
        org.joda.time.chrono.IslamicChronology islamicChronology39 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = islamicChronology39.months();
        org.joda.time.DurationField durationField41 = islamicChronology39.weeks();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology39);
        boolean boolean43 = strSet35.contains((java.lang.Object) localDateTime42);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KOR" + "'", str3, "KOR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5785200000L + "'", long16 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(islamicChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.lang.String str4 = nameProvider0.getName(locale1, "JPN", "0");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime6.millisOfSecond();
        long long17 = property16.remainder();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.util.Locale.setDefault(locale18);
        int int22 = property16.getMaximumShortTextLength(locale18);
        java.lang.String str25 = nameProvider0.getName(locale18, "IslamicChronology[+01:00]", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.setVariant("");
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale30.getScript();
        java.util.Locale.Builder builder33 = builder27.setLocale(locale30);
        java.util.Locale locale34 = locale30.stripExtensions();
        java.lang.String str35 = locale26.getDisplayCountry(locale30);
        java.lang.String str38 = nameProvider0.getName(locale26, "ko_KR", "+01:00");
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale locale41 = locale39.stripExtensions();
        java.lang.String str42 = locale39.getDisplayCountry();
        java.util.Set<java.lang.String> strSet43 = locale39.getUnicodeLocaleKeys();
        java.lang.String str46 = nameProvider0.getShortName(locale39, "yearOfEra", "\ud55c\uad6d\uc5b4");
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 1);
        int int49 = localDateTime48.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusHours((int) (byte) -1);
        int int52 = localDateTime48.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.centuryOfEra();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = property55.getAsShortText(locale56);
        java.lang.String str60 = nameProvider0.getName(locale56, "11", "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder62.setVariant("");
        java.util.Locale locale65 = java.util.Locale.PRC;
        java.util.Locale locale66 = locale65.stripExtensions();
        java.lang.String str67 = locale65.getScript();
        java.util.Locale.Builder builder68 = builder62.setLocale(locale65);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology71 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone70);
        org.joda.time.DurationField durationField72 = islamicChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField73 = islamicChronology71.yearOfEra();
        long long75 = dateTimeField73.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 1);
        int int78 = localDateTime77.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.minusHours((int) (byte) -1);
        int int81 = localDateTime77.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime77.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime77.minus(readableDuration86);
        java.util.Locale locale88 = java.util.Locale.PRC;
        java.util.Locale locale89 = locale88.stripExtensions();
        java.lang.String str90 = dateTimeField73.getAsShortText((org.joda.time.ReadablePartial) localDateTime87, locale88);
        java.lang.String str91 = locale65.getDisplayCountry(locale88);
        boolean boolean92 = locale65.hasExtensions();
        java.util.Locale locale93 = locale65.stripExtensions();
        java.lang.String str96 = nameProvider0.getShortName(locale65, "19", "1970-01-01T00:00:00.001");
        java.lang.String str97 = locale65.getLanguage();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ub300\ub9cc" + "'", str42, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "19" + "'", str57, "19");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(islamicChronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 5785200000L + "'", long75 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1970" + "'", str90, "1970");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u4e2d\u56fd" + "'", str91, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "zh_CN");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "zh" + "'", str97, "zh");
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = islamicChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        boolean boolean9 = dateTimeZone6.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology10 = islamicChronology3.withZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = islamicChronology3.add(readablePeriod11, (long) (byte) 0, (-1));
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(1511999999L, (org.joda.time.Chronology) islamicChronology3);
        org.joda.time.DurationField durationField17 = islamicChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology3.millisOfDay();
        org.joda.time.DurationField durationField19 = dateTimeField18.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(islamicChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        int int5 = timeZone3.getRawOffset();
        boolean boolean6 = timeZone3.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int8 = timeZone3.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minus(readablePeriod3);
        java.util.Date date5 = localDateTime4.toDate();
        int int6 = localDateTime4.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 08:14:37 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = islamicChronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology4.millisOfSecond();
        java.lang.String str8 = islamicChronology4.toString();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology4.dayOfMonth();
        java.util.Locale locale14 = new java.util.Locale("weekOfWeekyear", "millisOfSecond");
        java.lang.String str15 = dateTimeField10.getAsText(3600101, locale14);
        java.lang.String str16 = locale0.getDisplayScript(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale14.getUnicodeLocaleType("1970-01-02T13:49:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1970-01-02T13:49:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(islamicChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "IslamicChronology[+01:00]" + "'", str8, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals(locale14.toString(), "weekofweekyear_MILLISOFSECOND");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3600101" + "'", str15, "3600101");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfMinute();
        long long7 = dateTimeField4.add((-3595129L), 262805100L);
        int int9 = dateTimeField4.get(82017901236L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 262801504871L + "'", long7 == 262801504871L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(5);
        int[] intArray16 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime12, 10800010L);
        int int17 = localDateTime12.getYearOfCentury();
        int[] intArray18 = localDateTime12.getValues();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minus(readableDuration19);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime12.getField(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1389, 10, 22, 14400010]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 3600000]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = islamicChronology13.years();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        int int18 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours((int) (byte) -1);
        int int22 = localDateTime17.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minus(readablePeriod25);
        int int27 = localDateTime26.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = localDateTime26.getField(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.centuryOfEra();
        int[] intArray32 = islamicChronology13.get((org.joda.time.ReadablePartial) localDateTime26, (long) 0);
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology13.hourOfDay();
        org.joda.time.DurationField durationField34 = islamicChronology13.centuries();
        boolean boolean35 = property8.equals((java.lang.Object) durationField34);
        org.joda.time.LocalDateTime localDateTime36 = property8.withMaximumValue();
        org.joda.time.DurationField durationField37 = property8.getRangeDurationField();
        java.lang.String str38 = property8.getAsString();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 1);
        int int41 = localDateTime40.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology46 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDateTime40.toDateTime(dateTimeZone45);
        long long48 = dateTime47.getMillis();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        int int51 = localDateTime50.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology56 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDateTime50.toDateTime(dateTimeZone55);
        long long58 = dateTime57.getMillis();
        long long59 = dateTime57.getMillis();
        boolean boolean60 = dateTime47.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology61 = dateTime57.getChronology();
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        boolean boolean63 = dateTime57.equals((java.lang.Object) filteringMode62);
        int int64 = property8.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DurationField durationField65 = property8.getRangeDurationField();
        int int66 = property8.get();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(islamicChronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(islamicChronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode62.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear(11);
        int[] intArray10 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = islamicChronology15.weekyears();
        org.joda.time.DurationField durationField17 = islamicChronology15.months();
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology15.minuteOfHour();
        org.joda.time.DurationField durationField19 = islamicChronology15.hours();
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology15.yearOfCentury();
        org.joda.time.DurationField durationField21 = islamicChronology15.months();
        org.joda.time.DurationFieldType durationFieldType22 = durationField21.getType();
        boolean boolean23 = localDateTime9.isSupported(durationFieldType22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.withYearOfEra(9);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getISO3Country();
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        strSet30.clear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        int int34 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((int) (byte) -1);
        int int38 = localDateTime33.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime33.millisOfSecond();
        long long44 = property43.remainder();
        java.lang.String str45 = property43.getName();
        int int46 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime48 = property43.addWrapFieldToCopy(70);
        org.joda.time.LocalDateTime localDateTime49 = property43.roundFloorCopy();
        boolean boolean50 = strSet30.remove((java.lang.Object) localDateTime49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime49.toDateTime(dateTimeZone51);
        org.joda.time.chrono.IslamicChronology islamicChronology53 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = islamicChronology53.minuteOfDay();
        org.joda.time.DurationField durationField55 = islamicChronology53.months();
        org.joda.time.DateTimeField dateTimeField56 = islamicChronology53.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 1);
        int int59 = localDateTime58.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusHours((int) (byte) -1);
        int int62 = localDateTime58.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.plusHours((int) (byte) 100);
        int[] intArray68 = islamicChronology53.get((org.joda.time.ReadablePartial) localDateTime66, (long) 1969);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime71 = localDateTime70.toDateTime();
        int int72 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime9.minusSeconds((-16385));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "KOR" + "'", str29, "KOR");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "millisOfSecond" + "'", str45, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(islamicChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1389, 10, 22, 3601969]");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusMonths((-1));
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        int int12 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = islamicChronology17.weekyears();
        org.joda.time.DurationField durationField19 = islamicChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology17.yearOfEra();
        org.joda.time.DurationField durationField21 = islamicChronology17.halfdays();
        org.joda.time.DurationFieldType durationFieldType22 = durationField21.getType();
        boolean boolean23 = localDateTime11.isSupported(durationFieldType22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime1.withFieldAdded(durationFieldType22, 12);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.monthOfYear();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 1);
        int int33 = localDateTime32.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withDayOfYear(11);
        int[] intArray41 = localDateTime40.getValues();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plusHours((int) (short) 0);
        int int44 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime30.plus(readableDuration45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime30.plusWeeks(8340001);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int56 = localDateTime55.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = property57.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 1);
        int int61 = localDateTime60.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology66 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone65);
        org.joda.time.DurationField durationField67 = islamicChronology66.weekyears();
        org.joda.time.DurationField durationField68 = islamicChronology66.halfdays();
        org.joda.time.DurationFieldType durationFieldType69 = durationField68.getType();
        boolean boolean70 = localDateTime60.isSupported(durationFieldType69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime58.withFieldAdded(durationFieldType69, (-16385303));
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 1);
        int int75 = localDateTime74.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withPeriodAdded(readablePeriod78, 10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withDayOfYear(11);
        org.joda.time.Chronology chronology83 = localDateTime82.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = localDateTime82.getFieldType((int) (byte) 0);
        boolean boolean86 = localDateTime72.isSupported(dateTimeFieldType85);
        org.joda.time.LocalDateTime.Property property87 = localDateTime48.property(dateTimeFieldType85);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime29.withField(dateTimeFieldType85, 359999);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime29.minusSeconds(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType93 = localDateTime29.getFieldType(2922711);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2922711");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(islamicChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(islamicChronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        boolean boolean4 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet3);
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        boolean boolean10 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet9);
        boolean boolean11 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet7);
        boolean boolean12 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet7);
        java.lang.Object[] objArray13 = strSet1.toArray();
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream15 = strSet14.stream();
        boolean boolean16 = strSet1.retainAll((java.util.Collection<java.lang.String>) strSet14);
        boolean boolean17 = strSet14.isEmpty();
        java.lang.String[] strArray19 = new java.lang.String[] { "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object[] objArray22 = strSet20.toArray();
        java.util.stream.Stream<java.lang.String> strStream23 = strSet20.parallelStream();
        boolean boolean24 = strSet14.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean26 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet25);
        int int27 = strSet20.size();
        java.lang.Object[] objArray28 = strSet20.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1970]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1970]");
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 576 + "'", int27 == 576);
        org.junit.Assert.assertNotNull(objArray28);
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.DurationField durationField8 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.year();
        org.joda.time.DurationField durationField11 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        int int18 = localDateTime14.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.plusMonths((-1));
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int25 = localDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = islamicChronology30.weekyears();
        org.joda.time.DurationField durationField32 = islamicChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology30.yearOfEra();
        org.joda.time.DurationField durationField34 = islamicChronology30.halfdays();
        org.joda.time.DurationFieldType durationFieldType35 = durationField34.getType();
        boolean boolean36 = localDateTime24.isSupported(durationFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime14.withFieldAdded(durationFieldType35, 12);
        java.util.Date date39 = localDateTime14.toDate();
        int int40 = localDateTime14.size();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime14.plusSeconds(10800001);
        int int43 = localDateTime42.getEra();
        int int44 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(islamicChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 01:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = islamicChronology2.weeks();
        long long11 = islamicChronology2.add(100L, 1970L, 10);
        org.joda.time.DurationField durationField12 = islamicChronology2.seconds();
        long long15 = durationField12.getMillis(19360365022171L, (long) 70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 19800L + "'", long11 == 19800L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 19360365022171000L + "'", long15 == 19360365022171000L);
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        timeZone1.setID("\u5927\u97d3\u6c11\u56fd");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("");
        timeZone7.setID("\u5927\u97d3\u6c11\u56fd");
        boolean boolean10 = timeZone5.hasSameRules(timeZone7);
        timeZone7.setID("19");
        timeZone7.setID("60");
        boolean boolean15 = timeZone1.hasSameRules(timeZone7);
        boolean boolean16 = timeZone1.observesDaylightTime();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("");
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        int int22 = timeZone18.getRawOffset();
        java.time.ZoneId zoneId23 = timeZone18.toZoneId();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone(zoneId23);
        int int28 = timeZone26.getOffset(0L);
        java.util.TimeZone.setDefault(timeZone26);
        timeZone26.setID("DurationField[seconds]");
        boolean boolean32 = timeZone1.hasSameRules(timeZone26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId33 = timeZone1.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: ????");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("GMT");
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        boolean boolean12 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet11);
        boolean boolean13 = strSet7.addAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale17.getVariant();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale17, locale19, locale20, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale.FilteringMode filteringMode28 = null;
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList26, filteringMode28);
        boolean boolean30 = strSet9.remove((java.lang.Object) localeList26);
        boolean boolean31 = strSet9.isEmpty();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        int int34 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((int) (byte) -1);
        int int38 = localDateTime33.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.minus(readablePeriod41);
        int int43 = localDateTime42.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = localDateTime42.getField(0);
        boolean boolean46 = strSet9.remove((java.lang.Object) 0);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Set<java.lang.String> strSet51 = locale48.getUnicodeLocaleAttributes();
        boolean boolean52 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet9.spliterator();
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet9, filteringMode54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap57);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology63 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone62);
        org.joda.time.DurationField durationField64 = islamicChronology63.weekyears();
        org.joda.time.DurationField durationField65 = islamicChronology63.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = islamicChronology63.yearOfEra();
        org.joda.time.DateTimeField dateTimeField67 = islamicChronology63.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = islamicChronology63.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = islamicChronology63.secondOfDay();
        boolean boolean70 = strSet60.equals((java.lang.Object) islamicChronology63);
        java.util.stream.Stream<java.lang.String> strStream71 = strSet60.stream();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale locale73 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleAttributes();
        boolean boolean77 = strSet74.removeAll((java.util.Collection<java.lang.String>) strSet76);
        java.lang.Object[] objArray78 = strSet74.toArray();
        boolean boolean80 = strSet74.equals((java.lang.Object) 342000000L);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) 1);
        int int83 = localDateTime82.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.minusHours((int) (byte) -1);
        int int86 = localDateTime82.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime82.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime82.plusHours((int) (byte) 100);
        int int91 = localDateTime82.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime82.withWeekOfWeekyear(9);
        java.util.Date date94 = localDateTime93.toDate();
        org.joda.time.LocalDateTime localDateTime95 = org.joda.time.LocalDateTime.fromDateFields(date94);
        boolean boolean96 = strSet74.equals((java.lang.Object) date94);
        java.lang.Object[] objArray97 = strSet74.toArray();
        boolean boolean98 = strSet60.removeAll((java.util.Collection<java.lang.String>) strSet74);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "KOR" + "'", str50, "KOR");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSpliterator53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode54.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(islamicChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3600001 + "'", int91 == 3600001);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Feb 26 01:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.monthOfYear();
        org.joda.time.DurationField durationField8 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime13.getFields();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusDays(4);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        int int23 = localDateTime18.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minus(readablePeriod26);
        int int28 = localDateTime27.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = localDateTime27.getField(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        boolean boolean38 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.weekyear();
        int int40 = property39.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime42 = property39.addWrapFieldToCopy(45);
        int int43 = property39.get();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology46 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = islamicChronology46.weekyears();
        org.joda.time.DurationField durationField48 = islamicChronology46.months();
        org.joda.time.DurationField durationField49 = islamicChronology46.centuries();
        org.joda.time.DateTimeField dateTimeField50 = islamicChronology46.clockhourOfHalfday();
        boolean boolean51 = property39.equals((java.lang.Object) dateTimeField50);
        org.joda.time.LocalDateTime localDateTime53 = property39.addWrapFieldToCopy((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property39.getFieldType();
        org.joda.time.LocalDateTime localDateTime56 = property39.addWrapFieldToCopy(402086);
        int int57 = localDateTime56.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology61 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = islamicChronology61.weekyears();
        org.joda.time.DurationField durationField63 = islamicChronology61.halfdays();
        org.joda.time.DateTimeField dateTimeField64 = islamicChronology61.yearOfEra();
        org.joda.time.DurationField durationField65 = islamicChronology61.halfdays();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology61);
        org.joda.time.DateTimeField dateTimeField67 = islamicChronology61.yearOfEra();
        java.util.Locale locale68 = java.util.Locale.US;
        int int69 = dateTimeField67.getMaximumShortTextLength(locale68);
        java.lang.String str70 = locale68.getDisplayLanguage();
        java.lang.String str71 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime56, (-16385303), locale68);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(islamicChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4040 + "'", int57 == 4040);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(islamicChronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc601\uc5b4" + "'", str70, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-16385303" + "'", str71, "-16385303");
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.millis();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DurationField durationField6 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = islamicChronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = islamicChronology13.years();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        int int18 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours((int) (byte) -1);
        int int22 = localDateTime17.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minus(readablePeriod25);
        int int27 = localDateTime26.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = localDateTime26.getField(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.centuryOfEra();
        int[] intArray32 = islamicChronology13.get((org.joda.time.ReadablePartial) localDateTime26, (long) 0);
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology13.hourOfDay();
        org.joda.time.DurationField durationField34 = islamicChronology13.centuries();
        boolean boolean35 = property8.equals((java.lang.Object) durationField34);
        org.joda.time.LocalDateTime localDateTime36 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks(1070);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusSeconds(86399);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        int int42 = localDateTime40.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        org.joda.time.DurationField durationField8 = islamicChronology2.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getID();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((-20217598030L), dateTimeZone15);
        org.joda.time.Chronology chronology20 = islamicChronology2.withZone(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+01:00" + "'", str18, "+01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.withMinimumValue();
        boolean boolean18 = property11.equals((java.lang.Object) 59);
        int int19 = property11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 1);
        int int22 = localDateTime21.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime(dateTimeZone26);
        long long29 = dateTime28.getMillis();
        long long30 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime32 = property11.setCopy(5);
        int int33 = localDateTime32.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusWeeks(970);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int43 = localDateTime42.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        boolean boolean48 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusHours(1439);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 999 + "'", int19 == 999);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(islamicChronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600000L + "'", long30 == 3600000L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.era();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        int int14 = localDateTime10.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        java.lang.String str18 = localDateTime16.toString();
        int int19 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.era();
        int int21 = localDateTime16.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = islamicChronology24.weekyears();
        org.joda.time.DurationField durationField26 = islamicChronology24.halfdays();
        org.joda.time.DurationField durationField27 = islamicChronology24.weeks();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology24.clockhourOfHalfday();
        java.lang.String str32 = islamicChronology24.toString();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        int int35 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusHours((int) (byte) -1);
        int int39 = localDateTime34.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.minus(readablePeriod42);
        int int44 = localDateTime43.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = localDateTime43.getField(0);
        int[] intArray48 = islamicChronology24.get((org.joda.time.ReadablePartial) localDateTime43, 4276800000L);
        int int49 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16, intArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = localDateTime16.withDate(362, 45, 86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:25:00.001" + "'", str18, "1970-01-01T00:25:00.001");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "IslamicChronology[+01:00]" + "'", str32, "IslamicChronology[+01:00]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1389, 12, 12, 46800000]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        int int3 = islamicChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology2.getZone();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        boolean boolean8 = dateTimeField7.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("era");
        java.util.Locale locale7 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale7.getUnicodeLocaleType("zh-CN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: zh-CN");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "era");
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfMinute();
        long long8 = islamicChronology2.add((-3598030L), (long) 292271022, 9);
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField10 = islamicChronology2.years();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = islamicChronology2.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2626841168L + "'", long8 == 2626841168L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField9 = islamicChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.era();
        boolean boolean12 = dateTimeField10.isLeap(29548800000000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        java.util.Locale locale2 = new java.util.Locale("centuryOfEra", "\u5927\u97d3\u6c11\u56fd");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone14 = dateTimeZone4.toTimeZone();
        java.lang.String str16 = dateTimeZone4.getName(2143231200001L);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setVariant("");
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale22.getScript();
        java.util.Locale.Builder builder25 = builder19.setLocale(locale22);
        java.util.Locale locale26 = locale22.stripExtensions();
        java.lang.String str27 = locale18.getDisplayCountry(locale22);
        java.lang.String str28 = locale22.getDisplayVariant();
        java.lang.String str29 = dateTimeZone4.getShortName(2015L, locale22);
        java.lang.String str30 = locale2.getDisplayScript(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = locale22.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(islamicChronology5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+01:00" + "'", str16, "+01:00");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+01:00" + "'", str29, "+01:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withMonthOfYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYear(292278993);
        int[] intArray21 = localDateTime16.getValues();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusYears((-292275054));
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = property24.getLeapAmount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 10, 1, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = islamicChronology15.weekyears();
        org.joda.time.DurationField durationField17 = islamicChronology15.millis();
        org.joda.time.DurationField durationField18 = islamicChronology15.hours();
        org.joda.time.DurationField durationField19 = islamicChronology15.centuries();
        org.joda.time.DateTimeField dateTimeField20 = islamicChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology15.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = islamicChronology24.weekyears();
        org.joda.time.DurationField durationField26 = islamicChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology24.yearOfEra();
        org.joda.time.DurationField durationField28 = islamicChronology24.halfdays();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology24);
        java.util.Locale locale32 = new java.util.Locale("\u5927\u97d3\u6c11\u56fd");
        java.lang.String str33 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, (int) (byte) 0, locale32);
        java.lang.String str34 = dateTimeField11.getAsText(32011L, locale32);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(islamicChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(islamicChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals(locale32.toString(), "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "32" + "'", str34, "32");
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        long long6 = dateTimeField4.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        int int12 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.minus(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears(100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusMillis(4);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = localDateTime27.toString(dateTimeFormatter31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        int int35 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusHours((int) (byte) -1);
        int int39 = localDateTime34.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.minus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime34.millisOfSecond();
        long long45 = property44.remainder();
        java.lang.String str46 = property44.getName();
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.lang.String str48 = property44.getAsText(locale47);
        org.joda.time.LocalDateTime localDateTime49 = property44.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusYears(4);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plus(readablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology56 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = islamicChronology56.weekyear();
        org.joda.time.ReadablePartial readablePartial58 = null;
        int[] intArray65 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray67 = dateTimeField57.addWrapPartial(readablePartial58, 100, intArray65, (int) (short) 0);
        int int69 = dateTimeField57.getMinimumValue((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 1);
        int int72 = localDateTime71.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withPeriodAdded(readablePeriod75, 10);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusSeconds((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology82 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField83 = islamicChronology82.weekyear();
        org.joda.time.ReadablePartial readablePartial84 = null;
        int[] intArray91 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray93 = dateTimeField83.addWrapPartial(readablePartial84, 100, intArray91, (int) (short) 0);
        int int94 = dateTimeField57.getMaximumValue((org.joda.time.ReadablePartial) localDateTime79, intArray93);
        boolean boolean95 = localDateTime53.isAfter((org.joda.time.ReadablePartial) localDateTime79);
        boolean boolean96 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date97 = localDateTime79.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -999 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 5785200000L + "'", long6 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T01:00:00.005" + "'", str32, "1970-01-01T01:00:00.005");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "millisOfSecond" + "'", str46, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(islamicChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(islamicChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 292271022 + "'", int94 == 292271022);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        int int23 = localDateTime18.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minus(readablePeriod26);
        int int28 = localDateTime27.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = localDateTime27.getField(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minusMonths(59);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis((int) (short) 0);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str42 = nameProvider38.getShortName(locale39, "jpn", "jpn");
        java.lang.String str43 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime35, locale39);
        java.util.Locale locale44 = locale39.stripExtensions();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1965" + "'", str43, "1965");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        int int8 = timeZone7.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.clockhourOfDay();
        java.lang.String str28 = islamicChronology2.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "IslamicChronology[+01:00]" + "'", str28, "IslamicChronology[+01:00]");
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        int int3 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear(11);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours((int) (short) 0);
        int int14 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int15 = localDateTime10.getEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusWeeks(50);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        long long12 = property11.remainder();
        java.lang.String str13 = property11.getName();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = property11.getAsText(locale14);
        java.util.Locale locale16 = null;
        java.lang.String str17 = property11.getAsText(locale16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        boolean boolean21 = dateTimeZone19.isFixed();
        long long25 = dateTimeZone19.convertLocalToUTC((long) (byte) 100, false, 10L);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 1);
        int int28 = localDateTime27.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology33 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 1);
        int int37 = localDateTime36.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology42 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime(dateTimeZone41);
        long long44 = dateTime43.getMillis();
        boolean boolean45 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        int int51 = localDateTime50.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusHours((int) (byte) -1);
        int int55 = localDateTime50.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.minus(readablePeriod58);
        int int60 = localDateTime59.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField62 = localDateTime59.getField(0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.centuryOfEra();
        org.joda.time.LocalDateTime.Property property64 = localDateTime59.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime59.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 1);
        int int72 = localDateTime71.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.minusHours((int) (byte) -1);
        int int76 = localDateTime71.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime71.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime71.minus(readablePeriod79);
        int int81 = localDateTime80.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField83 = localDateTime80.getField(0);
        org.joda.time.LocalDateTime.Property property84 = localDateTime80.centuryOfEra();
        org.joda.time.LocalDateTime.Property property85 = localDateTime80.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property85.getFieldType();
        boolean boolean87 = localDateTime69.isSupported(dateTimeFieldType86);
        int int88 = localDateTime69.getMinuteOfHour();
        boolean boolean89 = dateTime48.equals((java.lang.Object) int88);
        boolean boolean90 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime48);
        int int91 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime48);
        int int92 = property11.getDifference((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime93 = property11.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3599900L) + "'", long25 == (-3599900L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(islamicChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(islamicChronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3600000 + "'", int91 == 3600000);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3599901 + "'", int92 == 3599901);
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology0);
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology0.weekyearOfCentury();
        int int5 = dateTimeField4.getMinimumValue();
        org.joda.time.DurationField durationField6 = dateTimeField4.getLeapDurationField();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(durationField6);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = islamicChronology2.withZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getShortName(100L);
        int int14 = dateTimeZone9.getStandardOffset(30043584539362L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = islamicChronology18.weekyears();
        org.joda.time.DurationField durationField20 = islamicChronology18.halfdays();
        org.joda.time.DurationField durationField21 = islamicChronology18.weeks();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int25 = localDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMinutes(1);
        int int28 = localDateTime24.getWeekOfWeekyear();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder29.setExtension('a', "FR");
        java.util.Locale.Builder builder34 = builder32.addUnicodeLocaleAttribute("KOR");
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder36 = builder34.setLocale(locale35);
        java.lang.String str37 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale35);
        int int38 = localDateTime24.getYearOfCentury();
        org.joda.time.DateTime dateTime39 = localDateTime24.toDateTime();
        int int40 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology43 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = islamicChronology43.weekyear();
        org.joda.time.DurationField durationField45 = islamicChronology43.weekyears();
        org.joda.time.DateTimeZone dateTimeZone46 = islamicChronology43.getZone();
        long long48 = dateTimeZone46.convertUTCToLocal(3582218193696L);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(82800001);
        org.joda.time.chrono.IslamicChronology islamicChronology51 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = islamicChronology51.weekyearOfCentury();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType53 = islamicChronology51.getLeapYearPatternType();
        org.joda.time.chrono.IslamicChronology islamicChronology54 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone46, leapYearPatternType53);
        org.joda.time.chrono.IslamicChronology islamicChronology55 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9, leapYearPatternType53);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(islamicChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 70 + "'", int38 == 70);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(islamicChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3582221793696L + "'", long48 == 3582221793696L);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(islamicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(leapYearPatternType53);
        org.junit.Assert.assertNotNull(islamicChronology54);
        org.junit.Assert.assertNotNull(islamicChronology55);
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(45);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.weekOfWeekyear();
        int int4 = dateTimeField3.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localDateTime34.getFields();
        boolean boolean36 = dateTimeZone28.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.TimeZone timeZone38 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology39 = islamicChronology2.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField40 = islamicChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = islamicChronology2.dayOfYear();
        org.joda.time.DurationField durationField44 = islamicChronology2.seconds();
        java.lang.String str45 = durationField44.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "seconds" + "'", str45, "seconds");
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology0.year();
        org.joda.time.DurationField durationField6 = islamicChronology0.weekyears();
        org.joda.time.DateTimeZone dateTimeZone7 = islamicChronology0.getZone();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withMillisOfSecond(60);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusYears(100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withYearOfEra(45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property11.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(2022);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMinutes(59);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField2 = islamicChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = islamicChronology0.millis();
        long long6 = durationField3.getValueAsLong(117L, (long) 349200000);
        long long9 = durationField3.subtract(3582218193696L, (long) (-981));
        long long10 = durationField3.getUnitMillis();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 117L + "'", long6 == 117L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3582218194677L + "'", long9 == 3582218194677L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.equals((java.lang.Object) 10L);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = dateTimeZone1.getShortName(1970L, locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        boolean boolean14 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet19);
        boolean boolean21 = strSet15.addAll((java.util.Collection<java.lang.String>) strSet17);
        boolean boolean22 = strSet11.addAll((java.util.Collection<java.lang.String>) strSet17);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int25 = localDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour(19);
        boolean boolean30 = strSet17.remove((java.lang.Object) localDateTime29);
        boolean boolean31 = strSet9.addAll((java.util.Collection<java.lang.String>) strSet17);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        int int34 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((int) (byte) -1);
        int int38 = localDateTime33.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.minus(readablePeriod41);
        int int43 = localDateTime42.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = localDateTime42.getField(0);
        int int47 = dateTimeField45.getMaximumValue((long) (byte) 100);
        int int49 = dateTimeField45.get(70L);
        boolean boolean50 = strSet9.contains((java.lang.Object) dateTimeField45);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("");
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        timeZone54.setRawOffset(11);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.toLanguageTag();
        java.lang.String str62 = dateTimeZone58.getShortName((long) 'u', locale60);
        java.util.Set<java.lang.String> strSet63 = locale60.getUnicodeLocaleKeys();
        boolean boolean64 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet63);
        strSet9.clear();
        int int66 = strSet9.size();
        java.util.Spliterator<java.lang.String> strSpliterator67 = strSet9.spliterator();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JPN" + "'", str7, "JPN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+01:00" + "'", str8, "+01:00");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292278993 + "'", int47 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(strSpliterator67);
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        java.lang.String str5 = dateTimeZone1.getShortName((-10317778518813696L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+01:00" + "'", str5, "+01:00");
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.tz.NameProvider nameProvider4 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.lang.String str8 = nameProvider4.getName(locale5, "JPN", "0");
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) (byte) -1);
        int int15 = localDateTime10.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime10.millisOfSecond();
        long long21 = property20.remainder();
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.util.Locale.setDefault(locale22);
        int int26 = property20.getMaximumShortTextLength(locale22);
        java.lang.String str29 = nameProvider4.getName(locale22, "IslamicChronology[+01:00]", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.setVariant("");
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale34.getScript();
        java.util.Locale.Builder builder37 = builder31.setLocale(locale34);
        java.util.Locale locale38 = locale34.stripExtensions();
        java.lang.String str39 = locale30.getDisplayCountry(locale34);
        java.lang.String str42 = nameProvider4.getName(locale30, "ko_KR", "+01:00");
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        boolean boolean44 = locale43.hasExtensions();
        java.util.Locale locale45 = locale43.stripExtensions();
        java.lang.String str46 = locale43.getDisplayCountry();
        java.util.Set<java.lang.String> strSet47 = locale43.getUnicodeLocaleKeys();
        java.lang.String str50 = nameProvider4.getShortName(locale43, "yearOfEra", "\ud55c\uad6d\uc5b4");
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 1);
        int int53 = localDateTime52.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusHours((int) (byte) -1);
        int int56 = localDateTime52.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = property59.getAsShortText(locale60);
        java.lang.String str64 = nameProvider4.getName(locale60, "11", "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider4);
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale68.getISO3Language();
        java.lang.String str70 = locale66.getDisplayCountry(locale68);
        java.lang.String str73 = nameProvider4.getName(locale68, "359999", "\u5927\u97d3\u6c11\u56fd_1970-01-01T01:00:05.100_168");
        java.lang.String str74 = dateTimeZone1.getName((long) '#', locale68);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(nameProvider4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ub300\ub9cc" + "'", str46, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "19" + "'", str61, "19");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "jpn" + "'", str69, "jpn");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str70, "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 59);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusYears(2922789);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withHourOfDay(0);
        boolean boolean20 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime.Property property21 = localDateTime11.millisOfDay();
        java.lang.Class<?> wildcardClass22 = localDateTime11.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology0);
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology0.minuteOfHour();
        java.lang.String str5 = islamicChronology0.toString();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology0.monthOfYear();
        org.joda.time.DurationField durationField7 = islamicChronology0.minutes();
        int int10 = durationField7.getDifference(24866939710L, 4276800000L);
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "IslamicChronology[+01:00]" + "'", str5, "IslamicChronology[+01:00]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 343168 + "'", int10 == 343168);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = islamicChronology2.withZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getShortName(100L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = islamicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = islamicChronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = islamicChronology13.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), dateTimeZone16);
        long long20 = islamicChronology2.set((org.joda.time.ReadablePartial) localDateTime18, 60315329443000L);
        org.joda.time.DateTimeField dateTimeField21 = islamicChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+01:00" + "'", str17, "+01:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 17763839999999L + "'", long20 == 17763839999999L);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        int int5 = timeZone3.getRawOffset();
        boolean boolean6 = timeZone3.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = timeZone3.getOffset(10, 3601970, (-2425309), (-16385301), 82832, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes(100);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        int int19 = localDateTime14.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.minus(readablePeriod22);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = localDateTime23.getField(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.centuryOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 1);
        int int36 = localDateTime35.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours((int) (byte) -1);
        int int40 = localDateTime35.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.minus(readablePeriod43);
        int int45 = localDateTime44.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = localDateTime44.getField(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.centuryOfEra();
        org.joda.time.LocalDateTime.Property property49 = localDateTime44.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        boolean boolean51 = localDateTime33.isSupported(dateTimeFieldType50);
        int int52 = localDateTime33.getMinuteOfHour();
        boolean boolean53 = dateTime12.equals((java.lang.Object) int52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 1);
        int int56 = localDateTime55.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology61 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = localDateTime55.toDateTime(dateTimeZone60);
        java.lang.String str63 = dateTimeZone60.getID();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 1);
        int int66 = localDateTime65.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology71 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = localDateTime65.toDateTime(dateTimeZone70);
        long long73 = dateTime72.getMillis();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 1);
        int int76 = localDateTime75.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology81 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = localDateTime75.toDateTime(dateTimeZone80);
        long long83 = dateTime82.getMillis();
        long long84 = dateTime82.getMillis();
        boolean boolean85 = dateTime72.isAfter((org.joda.time.ReadableInstant) dateTime82);
        int int86 = dateTimeZone60.getOffset((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean87 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime82.getZone();
        org.joda.time.DateTime dateTime89 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        long long91 = islamicChronology2.set((org.joda.time.ReadablePartial) localDateTime9, 9185187933840384L);
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology2);
        org.joda.time.DurationField durationField93 = islamicChronology2.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(islamicChronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+01:00" + "'", str63, "+01:00");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(islamicChronology71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(islamicChronology81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3600000 + "'", int86 == 3600000);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 19360371279205L + "'", long91 == 19360371279205L);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        java.util.Locale locale8 = new java.util.Locale("");
        boolean boolean9 = localDateTime1.equals((java.lang.Object) "");
        int int10 = localDateTime1.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minus(readableDuration11);
        int int13 = localDateTime12.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3600001 + "'", int10 == 3600001);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.roundHalfEvenCopy();
        org.joda.time.DurationField durationField15 = property11.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField5 = dateTimeField4.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = islamicChronology8.weekyears();
        org.joda.time.DurationField durationField10 = islamicChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology8.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        int int18 = localDateTime14.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.plusMonths((-1));
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int25 = localDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = islamicChronology30.weekyears();
        org.joda.time.DurationField durationField32 = islamicChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology30.yearOfEra();
        org.joda.time.DurationField durationField34 = islamicChronology30.halfdays();
        org.joda.time.DurationFieldType durationFieldType35 = durationField34.getType();
        boolean boolean36 = localDateTime24.isSupported(durationFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime14.withFieldAdded(durationFieldType35, 12);
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale40.getUnicodeLocaleType("FR");
        java.lang.String str46 = nameProvider39.getName(locale40, "\uc601\uc5b4", "GMT+00:00");
        java.lang.String str47 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale40);
        java.lang.String str48 = locale40.getISO3Language();
        java.util.Locale locale49 = locale40.stripExtensions();
        int int50 = dateTimeField4.getMaximumShortTextLength(locale40);
        java.util.Locale locale51 = locale40.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(islamicChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(islamicChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        int int5 = timeZone3.getRawOffset();
        boolean boolean6 = timeZone3.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.lang.String str9 = timeZone3.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str9, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime1.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getID();
        long long11 = dateTimeZone6.convertUTCToLocal(0L);
        int int13 = dateTimeZone6.getOffsetFromLocal((-25059600000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        boolean boolean17 = dateTimeZone15.isFixed();
        long long21 = dateTimeZone15.convertLocalToUTC((long) (byte) 100, false, 10L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = islamicChronology25.weekyears();
        org.joda.time.DurationField durationField27 = islamicChronology25.months();
        org.joda.time.DurationField durationField28 = islamicChronology25.centuries();
        org.joda.time.DateTimeZone dateTimeZone29 = islamicChronology25.getZone();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType30 = islamicChronology25.getLeapYearPatternType();
        org.joda.time.chrono.IslamicChronology islamicChronology31 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22, leapYearPatternType30);
        org.joda.time.chrono.IslamicChronology islamicChronology32 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType30);
        long long34 = dateTimeZone6.getMillisKeepLocal(dateTimeZone15, 5044032608400000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+01:00" + "'", str9, "+01:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600000 + "'", int13 == 3600000);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599900L) + "'", long21 == (-3599900L));
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(islamicChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(leapYearPatternType30);
        org.junit.Assert.assertNotNull(islamicChronology31);
        org.junit.Assert.assertNotNull(islamicChronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5044032608400000L + "'", long34 == 5044032608400000L);
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = islamicChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        int int6 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusHours((int) (byte) -1);
        int int9 = localDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusHours((int) (byte) 100);
        int[] intArray15 = islamicChronology0.get((org.joda.time.ReadablePartial) localDateTime13, (long) 1969);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekyear((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        java.lang.String str19 = property18.getName();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1389, 10, 22, 3601969]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfYear" + "'", str19, "dayOfYear");
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet4);
        boolean boolean6 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet2);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale10.getVariant();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale10, locale12, locale13, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = null;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        boolean boolean23 = strSet2.remove((java.lang.Object) localeList19);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = locale24.stripExtensions();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Set<java.lang.String> strSet28 = locale24.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet29 = locale24.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet29.spliterator();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        boolean boolean35 = strSet32.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Set<java.lang.String> strSet36 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        boolean boolean41 = strSet38.removeAll((java.util.Collection<java.lang.String>) strSet40);
        boolean boolean42 = strSet36.addAll((java.util.Collection<java.lang.String>) strSet38);
        boolean boolean43 = strSet32.addAll((java.util.Collection<java.lang.String>) strSet38);
        boolean boolean44 = strSet29.containsAll((java.util.Collection<java.lang.String>) strSet38);
        strSet29.clear();
        boolean boolean46 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = locale47.stripExtensions();
        java.lang.String str50 = locale47.getDisplayCountry();
        java.util.Set<java.lang.String> strSet51 = locale47.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet52 = locale47.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet52.spliterator();
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        boolean boolean58 = strSet55.removeAll((java.util.Collection<java.lang.String>) strSet57);
        java.util.Set<java.lang.String> strSet59 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        boolean boolean64 = strSet61.removeAll((java.util.Collection<java.lang.String>) strSet63);
        boolean boolean65 = strSet59.addAll((java.util.Collection<java.lang.String>) strSet61);
        boolean boolean66 = strSet55.addAll((java.util.Collection<java.lang.String>) strSet61);
        boolean boolean67 = strSet52.containsAll((java.util.Collection<java.lang.String>) strSet61);
        boolean boolean68 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.stream.Stream<java.lang.String> strStream69 = strSet2.stream();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology72 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField73 = islamicChronology72.yearOfCentury();
        org.joda.time.DurationField durationField74 = islamicChronology72.years();
        org.joda.time.DurationField durationField75 = islamicChronology72.halfdays();
        org.joda.time.DurationField durationField76 = islamicChronology72.hours();
        int int77 = islamicChronology72.getMinimumDaysInFirstWeek();
        boolean boolean78 = strSet2.equals((java.lang.Object) int77);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FR" + "'", str14, "FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u53f0\u6e7e" + "'", str27, "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u53f0\u6e7e" + "'", str50, "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strSpliterator53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(islamicChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int3 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = islamicChronology6.weekyears();
        org.joda.time.DurationField durationField8 = islamicChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology6.yearOfEra();
        org.joda.time.DurationField durationField10 = islamicChronology6.halfdays();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology6);
        int int12 = localDateTime11.getYearOfEra();
        int int13 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        int int17 = property14.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1443 + "'", int12 == 1443);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("ita");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1);
        int int4 = localDateTime3.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours((int) (byte) -1);
        int int7 = localDateTime3.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        java.lang.String str11 = localDateTime9.toString();
        int int12 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.era();
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        int int17 = localDateTime16.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusHours((int) (byte) -1);
        int int21 = localDateTime16.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minus(readablePeriod24);
        int int26 = localDateTime25.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusHours((int) (byte) -1);
        int int33 = localDateTime28.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime28.millisOfSecond();
        long long39 = property38.remainder();
        java.lang.String str40 = property38.getName();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.LocalDateTime localDateTime43 = property38.withMinimumValue();
        boolean boolean45 = property38.equals((java.lang.Object) 59);
        org.joda.time.LocalDateTime localDateTime46 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 1);
        int int49 = localDateTime48.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withPeriodAdded(readablePeriod52, 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withDayOfYear(11);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDateTime56.getFieldType((int) (byte) 0);
        int int60 = localDateTime46.indexOf(dateTimeFieldType59);
        int int61 = localDateTime25.get(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property62 = localDateTime9.property(dateTimeFieldType59);
        int int63 = localDateTime9.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime9.withDurationAdded(readableDuration64, (-16385301));
        java.util.Date date67 = localDateTime9.toDate();
        boolean boolean68 = timeZone1.inDaylightTime(date67);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:25:00.001" + "'", str11, "1970-01-01T00:25:00.001");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "millisOfSecond" + "'", str40, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 25 + "'", int63 == 25);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:25:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale3);
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale.Builder builder11 = builder6.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguage("DurationField[weeks]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: DurationField[weeks] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        int int23 = localDateTime22.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusHours((int) (byte) -1);
        int int27 = localDateTime22.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime22.minus(readablePeriod30);
        int int32 = localDateTime31.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField34 = localDateTime31.getField(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.centuryOfEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
        boolean boolean38 = localDateTime20.isSupported(dateTimeFieldType37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime20.withDayOfYear((-70556));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -70556 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        boolean boolean4 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet3);
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet1.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet1.spliterator();
        int int7 = strSet1.size();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale8.getDisplayLanguage();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.lang.String str14 = nameProvider10.getName(locale11, "JPN", "0");
        java.lang.String str15 = locale8.getDisplayName(locale11);
        java.lang.String str16 = locale11.getScript();
        java.util.Set<java.lang.String> strSet17 = locale11.getUnicodeLocaleAttributes();
        boolean boolean18 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u82f1\u8a9e" + "'", str9, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc601\uc5b4" + "'", str15, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet4);
        boolean boolean6 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet2);
        java.util.stream.Stream<java.lang.String> strStream7 = strSet2.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet2.stream();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strSet2.spliterator();
        int int10 = strSet2.size();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(strSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology7.minuteOfDay();
        org.joda.time.DurationField durationField9 = islamicChronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology7.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(23, 3632, 248400000, 2022, 33, 0, 19, (org.joda.time.Chronology) islamicChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(islamicChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfYear();
        org.joda.time.DurationField durationField8 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        int int13 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((int) (byte) -1);
        int int17 = localDateTime12.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.millisOfSecond();
        int int23 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.minusWeeks(10);
        int int26 = localDateTime12.getEra();
        int int27 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        int int29 = dateTimeField10.get(0L);
        java.lang.String str30 = dateTimeField10.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "clockhourOfDay" + "'", str30, "clockhourOfDay");
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("inglese");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "inglese" + "'", str2, "inglese");
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology9 = islamicChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        boolean boolean14 = dateTimeZone12.isFixed();
        long long18 = dateTimeZone12.convertLocalToUTC((long) (byte) 100, false, 10L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 86399, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone12);
        int[] intArray22 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime20, 9185187933840384L);
        int int23 = localDateTime20.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(islamicChronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599900L) + "'", long18 == (-3599900L));
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[301389, 12, 8, 49440384]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        int int3 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYear((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear(11);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours((int) (short) 0);
        int int14 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100, (int) (short) 10, (int) (short) 10, (int) (byte) 0, 0, (int) ' ');
        int int22 = localDateTime21.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property23.getLocalDateTime();
        int int25 = localDateTime24.getWeekyear();
        int int26 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime0.minusMonths(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 1, 11, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        int int15 = property14.getMaximumValue();
        boolean boolean16 = property14.isLeap();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfCentury(10);
        int int25 = localDateTime21.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plus(readableDuration26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plus(readablePeriod28);
        int int30 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.yearOfEra();
        int int32 = localDateTime27.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DurationField durationField5 = islamicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField10 = islamicChronology2.days();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = islamicChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = islamicChronology9.weekyears();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology16 = islamicChronology9.withZone(dateTimeZone12);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getISO3Country();
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str23 = dateTimeZone12.getName(24796800001L, locale19);
        org.joda.time.Chronology chronology24 = islamicChronology2.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = islamicChronology2.getDateTimeMillis(9, 1969, 162, (-16385), 49, 30, 2924681);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16385 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(islamicChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(islamicChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "KOR" + "'", str21, "KOR");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+01:00" + "'", str23, "+01:00");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        java.lang.String str17 = property15.getAsString();
        org.joda.time.LocalDateTime localDateTime19 = property15.addWrapFieldToCopy(999);
        int int20 = property15.getMaximumValue();
        org.joda.time.chrono.IslamicChronology islamicChronology21 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology21.minuteOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology21.months();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours((int) (byte) -1);
        int int30 = localDateTime26.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.plusHours((int) (byte) 100);
        int[] intArray36 = islamicChronology21.get((org.joda.time.ReadablePartial) localDateTime34, (long) 1969);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        long long41 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        int int42 = property15.getMaximumValueOverall();
        java.lang.String str43 = property15.getName();
        org.joda.time.LocalDateTime localDateTime44 = property15.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 999 + "'", int20 == 999);
        org.junit.Assert.assertNotNull(islamicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1389, 10, 22, 3601969]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 60525608400000L + "'", long41 == 60525608400000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 999 + "'", int42 == 999);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "millisOfSecond" + "'", str43, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        int int5 = timeZone1.getRawOffset();
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId6);
        int int11 = timeZone9.getOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = islamicChronology16.weekyears();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology23 = islamicChronology16.withZone(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = islamicChronology16.add(readablePeriod24, (long) (byte) 0, (-1));
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology16.dayOfMonth();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology32 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = islamicChronology32.weekyears();
        org.joda.time.DurationField durationField34 = islamicChronology32.halfdays();
        org.joda.time.DurationField durationField35 = islamicChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField36 = islamicChronology32.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 1);
        int int39 = localDateTime38.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusHours((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = localDateTime41.getFields();
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime41, locale43);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.minusSeconds((int) (short) 100);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime48, 82800001, locale50);
        java.util.Locale locale54 = new java.util.Locale("");
        java.lang.String str55 = locale54.getVariant();
        java.lang.String str56 = dateTimeField28.getAsShortText((int) (short) 0, locale54);
        java.lang.String str57 = timeZone9.getDisplayName(true, (int) (byte) 0, locale54);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(islamicChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(islamicChronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(islamicChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "82800001" + "'", str51, "82800001");
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GMT" + "'", str57, "GMT");
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.secondOfDay();
        org.joda.time.DurationField durationField5 = dateTimeField4.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = islamicChronology8.weekyears();
        org.joda.time.DurationField durationField10 = islamicChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = islamicChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = islamicChronology8.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        int int15 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusHours((int) (byte) -1);
        int int18 = localDateTime14.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.plusMonths((-1));
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int25 = localDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = islamicChronology30.weekyears();
        org.joda.time.DurationField durationField32 = islamicChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = islamicChronology30.yearOfEra();
        org.joda.time.DurationField durationField34 = islamicChronology30.halfdays();
        org.joda.time.DurationFieldType durationFieldType35 = durationField34.getType();
        boolean boolean36 = localDateTime24.isSupported(durationFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime14.withFieldAdded(durationFieldType35, 12);
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale40.getUnicodeLocaleType("FR");
        java.lang.String str46 = nameProvider39.getName(locale40, "\uc601\uc5b4", "GMT+00:00");
        java.lang.String str47 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale40);
        java.lang.String str48 = locale40.getISO3Language();
        java.util.Locale locale49 = locale40.stripExtensions();
        int int50 = dateTimeField4.getMaximumShortTextLength(locale40);
        long long53 = dateTimeField4.getDifferenceAsLong((long) 53, 428400001L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(islamicChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(islamicChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-428399L) + "'", long53 == (-428399L));
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "FR");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setScript("3601");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 3601 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = islamicChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = islamicChronology2.getZone();
        org.joda.time.DurationField durationField10 = islamicChronology2.days();
        boolean boolean11 = durationField10.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = islamicChronology2.hours();
        long long8 = durationField5.getMillis((-843), 10522044893730L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3034800000L) + "'", long8 == (-3034800000L));
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        int int11 = localDateTime6.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minus(readablePeriod14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.centuryOfEra();
        int[] intArray21 = islamicChronology2.get((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField22 = islamicChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = islamicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField26 = islamicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField27 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = islamicChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = islamicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1389, 10, 22, 3600000]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusHours((int) (byte) -1);
        int int6 = localDateTime1.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minus(readablePeriod9);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = localDateTime10.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withMonthOfYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYear(292278993);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusDays(53);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        int int26 = localDateTime24.getValue((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        int int31 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusHours((int) (byte) -1);
        int int35 = localDateTime30.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.minus(readablePeriod38);
        int int40 = localDateTime39.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = localDateTime39.getField(0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.centuryOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withTime((int) (byte) 1, 0, 5, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology52 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = islamicChronology52.weekyears();
        org.joda.time.DurationField durationField54 = islamicChronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = islamicChronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = islamicChronology52.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField57 = islamicChronology52.weekyear();
        org.joda.time.DurationField durationField58 = islamicChronology52.days();
        org.joda.time.DateTimeField dateTimeField59 = islamicChronology52.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = dateTimeField59.getType();
        boolean boolean61 = localDateTime49.isSupported(dateTimeFieldType60);
        int int62 = localDateTime24.get(dateTimeFieldType60);
        org.joda.time.LocalDateTime.Property property63 = localDateTime24.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        boolean boolean65 = localDateTime16.isSupported(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(islamicChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.dayOfYear();
        org.joda.time.DurationField durationField6 = islamicChronology2.seconds();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = islamicChronology2.add(readablePeriod7, 3600003L, (-322672809));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3600003L + "'", long10 == 3600003L);
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.year();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.era();
        org.joda.time.DateTimeField dateTimeField8 = islamicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setExtension('a', "GMT");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = islamicChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = islamicChronology2.years();
        org.joda.time.DurationField durationField5 = islamicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = islamicChronology2.weekyears();
        org.joda.time.DurationField durationField4 = islamicChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = islamicChronology8.weekyears();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology15 = islamicChronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField16 = islamicChronology8.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = islamicChronology22.weekyear();
        org.joda.time.ReadablePartial readablePartial24 = null;
        int[] intArray31 = new int[] { (short) 100, 10, 100, (short) -1, (byte) 10 };
        int[] intArray33 = dateTimeField23.addWrapPartial(readablePartial24, 100, intArray31, (int) (short) 0);
        int int34 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDateTime18, intArray31);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 1);
        int int37 = localDateTime36.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusHours((int) (byte) -1);
        int int41 = localDateTime36.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime43);
        int int45 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology48 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = islamicChronology48.weekyears();
        org.joda.time.DurationField durationField50 = islamicChronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField51 = islamicChronology48.yearOfEra();
        org.joda.time.DurationField durationField52 = islamicChronology48.halfdays();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) islamicChronology48);
        int int54 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology58 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = islamicChronology58.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField60 = islamicChronology58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 1);
        int int64 = localDateTime63.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.minusHours((int) (byte) -1);
        int int68 = localDateTime63.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime63.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime63.minus(readablePeriod71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime63.millisOfSecond();
        long long74 = property73.remainder();
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = java.util.Locale.KOREA;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.util.Locale.setDefault(locale75);
        int int79 = property73.getMaximumShortTextLength(locale75);
        java.lang.String str80 = dateTimeField60.getAsShortText((-4319999989L), locale75);
        java.lang.String str81 = dateTimeField5.getAsText(3, locale75);
        java.lang.String str82 = locale75.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(islamicChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(islamicChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(islamicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(islamicChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(islamicChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "11" + "'", str80, "11");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "3" + "'", str81, "3");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "kor" + "'", str82, "kor");
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        int int5 = timeZone3.getRawOffset();
        timeZone3.setID("IslamicChronology[+01:00]");
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = islamicChronology18.weekyears();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone21);
        boolean boolean24 = dateTimeZone21.equals((java.lang.Object) 10L);
        org.joda.time.Chronology chronology25 = islamicChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = islamicChronology18.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = islamicChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = islamicChronology29.yearOfEra();
        long long33 = dateTimeField31.roundCeiling(0L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 1);
        int int36 = localDateTime35.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours((int) (byte) -1);
        int int39 = localDateTime35.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime35.minus(readableDuration44);
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, locale46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plus(readablePeriod49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusYears(100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.plusMillis(4);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology58 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone57);
        boolean boolean59 = dateTimeZone57.isFixed();
        long long63 = dateTimeZone57.convertLocalToUTC((long) (byte) 100, false, 10L);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 86399, dateTimeZone57);
        boolean boolean65 = localDateTime50.isEqual((org.joda.time.ReadablePartial) localDateTime64);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.setVariant("");
        java.util.Locale locale69 = builder68.build();
        java.util.Locale locale71 = new java.util.Locale("");
        java.util.Locale.Builder builder72 = builder68.setLocale(locale71);
        java.util.Locale locale73 = builder68.build();
        java.lang.String str74 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime64, locale73);
        java.lang.String str75 = localDateTime11.toString("-01:00", locale73);
        java.util.Locale locale76 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.lang.String str79 = locale78.getISO3Language();
        java.lang.String str80 = locale76.getDisplayCountry(locale78);
        java.lang.String str81 = locale73.getDisplayCountry(locale76);
        java.lang.String str82 = locale73.getDisplayCountry();
        java.lang.String str83 = timeZone3.getDisplayName(locale73);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(islamicChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(islamicChronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(islamicChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 5785200000L + "'", long33 == 5785200000L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(islamicChronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3599900L) + "'", long63 == (-3599900L));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "jpn" + "'", str79, "jpn");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str80, "\u5927\u97d3\u6c11\u56fd");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "GMT+00:00" + "'", str83, "GMT+00:00");
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField2 = islamicChronology0.centuryOfEra();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType3 = islamicChronology0.getLeapYearPatternType();
        org.joda.time.DateTimeField dateTimeField4 = islamicChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.getID();
        java.util.TimeZone timeZone15 = dateTimeZone11.toTimeZone();
        org.joda.time.Chronology chronology16 = islamicChronology0.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField17 = islamicChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField18 = islamicChronology0.era();
        org.junit.Assert.assertNotNull(islamicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(leapYearPatternType3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(islamicChronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+01:00" + "'", str14, "+01:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        double double90 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0E-14d + "'", double90 == 1.0E-14d);
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.0E-14d, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex18.pow(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.cos();
        org.apache.commons.math.complex.Complex complex26 = complex20.atan();
        org.apache.commons.math.complex.Complex complex27 = complex12.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean29 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex30.tan();
        boolean boolean34 = complex28.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex33.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex27.subtract(complex40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException44);
        boolean boolean46 = complex27.equals((java.lang.Object) "");
        org.apache.commons.math.complex.Complex complex47 = complex4.multiply(complex27);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex51.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.cos();
        org.apache.commons.math.complex.Complex complex58 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = complex64.sin();
        org.apache.commons.math.complex.Complex complex70 = complex58.add(complex64);
        boolean boolean71 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.atan();
        org.apache.commons.math.complex.Complex complex80 = complex77.log();
        org.apache.commons.math.complex.Complex complex81 = complex75.pow(complex77);
        org.apache.commons.math.complex.Complex complex82 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = complex83.log();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex84.atan();
        org.apache.commons.math.complex.Complex complex87 = complex82.add(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex82.log();
        org.apache.commons.math.complex.Complex complex89 = complex58.divide(complex82);
        org.apache.commons.math.complex.Complex complex90 = complex89.cosh();
        org.apache.commons.math.complex.Complex complex91 = complex89.tan();
        org.apache.commons.math.complex.Complex complex92 = complex27.subtract(complex89);
        org.apache.commons.math.complex.Complex complex93 = complex89.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        boolean boolean38 = complex32.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex29.add(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt1z();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.tan();
        org.apache.commons.math.complex.Complex complex48 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex49.log();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex45.divide(complex50);
        org.apache.commons.math.complex.Complex complex54 = complex53.atan();
        org.apache.commons.math.complex.Complex complex55 = complex53.log();
        org.apache.commons.math.complex.Complex complex56 = complex41.add(complex53);
        org.apache.commons.math.complex.Complex complex57 = complex53.negate();
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex57.sinh();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray11, throwable12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        java.lang.Object[] objArray21 = new java.lang.Object[] { convergenceException15, complex17, true };
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException26);
        java.lang.Throwable[] throwableArray28 = convergenceException26.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray8, (java.lang.Throwable) convergenceException26);
        java.lang.Throwable[] throwableArray30 = convergenceException29.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        java.lang.Object[] objArray43 = new java.lang.Object[] { convergenceException37, complex39, true };
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray45, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", objArray43);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException50 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray43);
        java.lang.Throwable[] throwableArray51 = maxIterationsExceededException50.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray51, (java.lang.Throwable) functionEvaluationException57);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray30, (java.lang.Throwable) mathException59);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex68.atan();
        java.lang.Object[] objArray72 = new java.lang.Object[] { convergenceException66, complex68, true };
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray74, throwable75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray72, (java.lang.Throwable) convergenceException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("", objArray72);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException79 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray72);
        int int80 = maxIterationsExceededException79.getMaxIterations();
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str85 = functionEvaluationException84.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException84);
        java.lang.String str87 = functionEvaluationException84.getPattern();
        mathException81.addSuppressed((java.lang.Throwable) functionEvaluationException84);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray30, (java.lang.Throwable) mathException81);
        java.lang.Throwable[] throwableArray91 = mathException81.getSuppressed();
        java.lang.Class<?> wildcardClass92 = mathException81.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray8 = functionEvaluationException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        java.lang.Object[] objArray19 = new java.lang.Object[] { convergenceException13, complex15, true };
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray21, throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray19);
        int int27 = maxIterationsExceededException26.getMaxIterations();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException28);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        java.lang.Object[] objArray40 = convergenceException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray40, (java.lang.Throwable) maxIterationsExceededException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException3 = new org.apache.commons.math.MaxIterationsExceededException(32, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: ", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        double double10 = complex7.abs();
        org.apache.commons.math.complex.Complex complex11 = complex7.tan();
        double double12 = complex11.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        laguerreSolver43.resetRelativeAccuracy();
        double double69 = laguerreSolver43.getAbsoluteAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        double double75 = laguerreSolver43.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int76 = laguerreSolver43.getMaximalIterationCount();
        double[] doubleArray79 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        double double82 = polynomialFunction80.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction83 = polynomialFunction80.polynomialDerivative();
        double double85 = polynomialFunction80.value((double) (byte) 100);
        double[] doubleArray86 = polynomialFunction80.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver43.solveAll(doubleArray86, (double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver7.solveAll(doubleArray86, (double) (short) 1);
        laguerreSolver7.setFunctionValueAccuracy(100.0d);
        double double94 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(15.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0E-6d + "'", double69 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction83);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction6.derivative();
        int int10 = polynomialFunction6.degree();
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction6.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction6.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = polynomialFunction16.derivative();
        double[] doubleArray18 = polynomialFunction16.getCoefficients();
        double[] doubleArray19 = polynomialFunction16.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(univariateRealFunction17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction5.polynomialDerivative();
        double double8 = polynomialFunction6.value(97.00515450222221d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "");
        java.lang.Throwable[] throwableArray4 = functionEvaluationException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean5 = complex1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex1.asin();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.0d) + "'", double8 == (-0.0d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        java.lang.Object[] objArray10 = new java.lang.Object[] { convergenceException4, complex6, true };
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException17);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray11, throwable12);
        java.lang.Object[] objArray14 = convergenceException13.getArguments();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.ConvergenceException: ", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException(0);
        int int20 = maxIterationsExceededException19.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) maxIterationsExceededException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray14);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray27, throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray38 = functionEvaluationException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        java.lang.Object[] objArray49 = new java.lang.Object[] { convergenceException43, complex45, true };
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray51, throwable52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray49, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", objArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException56 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray49);
        int int57 = maxIterationsExceededException56.getMaxIterations();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) mathException58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) mathException59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) convergenceException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray27, (java.lang.Throwable) convergenceException61);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException64 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray27);
        int int65 = maxIterationsExceededException64.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(1.5706900455763888d, "org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) maxIterationsExceededException64);
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("", objArray73, throwable74);
        java.lang.Object[] objArray76 = convergenceException75.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray76);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException79 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray76, (java.lang.Throwable) maxIterationsExceededException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) functionEvaluationException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) '4', (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray14, (java.lang.Throwable) convergenceException81);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double25 = laguerreSolver7.solve(35.0d, 1.0d, (double) 10L);
        laguerreSolver7.resetRelativeAccuracy();
        double double27 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(0.9149994957367077d);
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-15d + "'", double27 == 1.0E-15d);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex1.cos();
        org.apache.commons.math.complex.Complex complex6 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex10.multiply(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex31.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex20.pow(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex20.exp();
        boolean boolean42 = complex41.isNaN();
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex6.pow(complex41);
        org.apache.commons.math.complex.Complex complex45 = complex41.sin();
        org.apache.commons.math.complex.Complex complex46 = complex41.exp();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.atan();
        org.apache.commons.math.complex.Complex complex49 = complex48.atan();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex53 = complex46.subtract(complex49);
        org.apache.commons.math.complex.Complex complex54 = complex49.acos();
        org.apache.commons.math.complex.Complex complex55 = complex54.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.lang.Object[] objArray23 = functionEvaluationException21.getArguments();
        double double24 = functionEvaluationException21.getArgument();
        double double25 = functionEvaluationException21.getArgument();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) mathException26);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setMaximalIterationCount(0);
        int int21 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double24 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 100);
        double double27 = laguerreSolver7.getRelativeAccuracy();
        double double30 = laguerreSolver7.solve((double) 10L, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        int int6 = polynomialFunction3.degree();
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        int int9 = polynomialFunction3.degree();
        double double11 = polynomialFunction3.value((double) 8);
        double double13 = polynomialFunction3.value(2.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex6.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        java.lang.Object[] objArray13 = new java.lang.Object[] { complex12 };
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        java.lang.Object[] objArray22 = new java.lang.Object[] { convergenceException16, complex18, true };
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray24, throwable25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray22, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) mathException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException33);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex2.atan();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex4.add(complex5);
        org.apache.commons.math.complex.Complex complex9 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = complex4.cos();
        org.apache.commons.math.complex.Complex complex11 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.sin();
        org.apache.commons.math.complex.Complex complex13 = complex4.cosh();
        boolean boolean14 = complex4.isNaN();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "");
        convergenceException18.addSuppressed((java.lang.Throwable) functionEvaluationException21);
        java.lang.Throwable[] throwableArray23 = convergenceException18.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) maxIterationsExceededException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) functionEvaluationException28);
        boolean boolean30 = complex4.equals((java.lang.Object) throwableArray23);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("Maximal number of iterations (1) exceeded", (java.lang.Object[]) throwableArray23);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        laguerreSolver7.setFunctionValueAccuracy(97.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double20 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        double[] doubleArray13 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        laguerreSolver18.setAbsoluteAccuracy((double) '#');
        laguerreSolver18.resetAbsoluteAccuracy();
        laguerreSolver18.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = complex30.log();
        org.apache.commons.math.complex.Complex complex34 = complex25.multiply(complex30);
        org.apache.commons.math.complex.Complex complex35 = complex30.sin();
        org.apache.commons.math.complex.Complex complex36 = complex30.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex30, complex37 };
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver18.solveAll(complexArray38, complex40);
        laguerreSolver18.resetRelativeAccuracy();
        double double44 = laguerreSolver18.getAbsoluteAccuracy();
        laguerreSolver18.resetFunctionValueAccuracy();
        boolean boolean46 = complex10.equals((java.lang.Object) laguerreSolver18);
        int int47 = laguerreSolver18.getMaximalIterationCount();
        double double48 = laguerreSolver18.getRelativeAccuracy();
        double double52 = laguerreSolver18.solve((double) (short) 1, (double) 0.0f, (double) 4);
        laguerreSolver18.setRelativeAccuracy((double) 10L);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0E-14d + "'", double48 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray15, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray15);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray15);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray33, throwable34);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        java.lang.Object[] objArray43 = new java.lang.Object[] { convergenceException37, complex39, true };
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray45, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException47);
        convergenceException35.addSuppressed((java.lang.Throwable) convergenceException48);
        java.lang.Throwable[] throwableArray50 = convergenceException48.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) functionEvaluationException58);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException60 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "hi!", (java.lang.Object[]) throwableArray50);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray50);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException63 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, "org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) maxIterationsExceededException63);
        java.lang.Object[] objArray65 = functionEvaluationException64.getArguments();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(2.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", objArray15, (java.lang.Throwable) mathException66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException(1.4440009959998334d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException66);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        java.lang.Object[] objArray19 = new java.lang.Object[] { convergenceException13, complex15, true };
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray21, throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray19);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        java.lang.Object[] objArray31 = convergenceException30.getArguments();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray19, (java.lang.Throwable) convergenceException30);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("hi!", objArray19, throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray19, (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException38);
        java.lang.Object[] objArray42 = convergenceException41.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MathException: ", objArray42);
        int int44 = maxIterationsExceededException43.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(4.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException43);
        java.lang.Throwable[] throwableArray46 = maxIterationsExceededException43.getSuppressed();
        int int47 = maxIterationsExceededException43.getMaxIterations();
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex4.pow(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex4.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex23.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex27.negate();
        org.apache.commons.math.complex.Complex complex31 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex18.subtract(complex27);
        double double33 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex27.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) ' ', (double) '4');
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        double double20 = laguerreSolver7.solve(2.718281828459045d, 52.0d);
        laguerreSolver7.setAbsoluteAccuracy((double) 35);
        double[] doubleArray25 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) 10.0f);
        double double30 = polynomialFunction26.value((double) 100L);
        double double32 = polynomialFunction26.value((double) 100L);
        int int33 = polynomialFunction26.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction34 = polynomialFunction26.derivative();
        double[] doubleArray35 = polynomialFunction26.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver7.solveAll(doubleArray35, 1.1189396031849523d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (10) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2.718281828459045d + "'", double20 == 2.718281828459045d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 0.0]");
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy((double) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double20 = laguerreSolver7.solve((double) 0.0f, 1.0E-15d);
        double double21 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0E-15d + "'", double21 == 1.0E-15d);
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        int int11 = laguerreSolver10.getMaximalIterationCount();
        laguerreSolver10.resetFunctionValueAccuracy();
        double[] doubleArray22 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        double double25 = polynomialFunction23.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = polynomialFunction23.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        laguerreSolver27.setAbsoluteAccuracy((double) '#');
        laguerreSolver27.resetAbsoluteAccuracy();
        laguerreSolver27.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = complex34.multiply(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex39.sin();
        org.apache.commons.math.complex.Complex complex45 = complex39.tan();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex39, complex46 };
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver27.solveAll(complexArray47, complex49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException54 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean57 = complex56.isInfinite();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex58.tan();
        boolean boolean62 = complex56.equals((java.lang.Object) complex61);
        boolean boolean63 = complex61.isNaN();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        org.apache.commons.math.complex.Complex complex72 = complex69.log();
        org.apache.commons.math.complex.Complex complex73 = complex67.pow(complex69);
        org.apache.commons.math.complex.Complex complex74 = complex69.cos();
        org.apache.commons.math.complex.Complex complex75 = complex69.atan();
        org.apache.commons.math.complex.Complex complex76 = complex69.tan();
        org.apache.commons.math.complex.Complex complex77 = complex61.add(complex69);
        org.apache.commons.math.complex.Complex complex78 = complex69.sin();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex79.log();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex83 = complex81.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex84.multiply(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex82.add(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex86.sinh();
        org.apache.commons.math.complex.Complex complex89 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex90 = complex78.multiply(complex89);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver10.solveAll(complexArray47, complex90);
        laguerreSolver10.setAbsoluteAccuracy(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.MaxIterationsExceededException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(2.2360679774997907d, (java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException3);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean17 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex18.tan();
        boolean boolean22 = complex16.equals((java.lang.Object) complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        boolean boolean25 = complex15.equals((java.lang.Object) complex21);
        boolean boolean26 = complex21.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.solve((double) (short) -1, 10.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        double[] doubleArray40 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction41.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        laguerreSolver45.setRelativeAccuracy((double) 10);
        double double48 = laguerreSolver45.getAbsoluteAccuracy();
        double double51 = laguerreSolver45.solve((double) (-1), 0.7853981633974483d);
        double[] doubleArray55 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver45.solveAll(doubleArray55, (-1.0d));
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean60 = complex59.isInfinite();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex61.tan();
        boolean boolean65 = complex59.equals((java.lang.Object) complex64);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex66.tan();
        org.apache.commons.math.complex.Complex complex70 = complex59.multiply(complex66);
        org.apache.commons.math.complex.Complex complex71 = laguerreSolver7.solve(complexArray58, complex66);
        double double72 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 20);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0E-6d + "'", double48 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        int int18 = laguerreSolver7.getMaximalIterationCount();
        double double19 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        int int21 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex10.cos();
        org.apache.commons.math.complex.Complex complex16 = complex10.atan();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.negate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        double[] doubleArray34 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray34);
        double double37 = polynomialFunction35.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction38 = polynomialFunction35.derivative();
        int int39 = polynomialFunction35.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver40 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        boolean boolean41 = complex31.equals((java.lang.Object) laguerreSolver40);
        org.apache.commons.math.complex.Complex complex42 = complex31.tan();
        org.apache.commons.math.complex.Complex complex43 = complex18.divide(complex31);
        double[] doubleArray46 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        double double49 = polynomialFunction47.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = polynomialFunction47.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver51 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction50);
        laguerreSolver51.setAbsoluteAccuracy((double) '#');
        laguerreSolver51.resetAbsoluteAccuracy();
        laguerreSolver51.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex63.atan();
        org.apache.commons.math.complex.Complex complex66 = complex63.log();
        org.apache.commons.math.complex.Complex complex67 = complex58.multiply(complex63);
        org.apache.commons.math.complex.Complex complex68 = complex63.sin();
        org.apache.commons.math.complex.Complex complex69 = complex63.tan();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex63, complex70 };
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver51.solveAll(complexArray71, complex73);
        laguerreSolver51.setRelativeAccuracy((double) 1.0f);
        laguerreSolver51.resetFunctionValueAccuracy();
        laguerreSolver51.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = laguerreSolver51.getPolynomialFunction();
        laguerreSolver51.resetMaximalIterationCount();
        laguerreSolver51.resetAbsoluteAccuracy();
        boolean boolean83 = complex43.equals((java.lang.Object) laguerreSolver51);
        laguerreSolver51.setRelativeAccuracy(1.5707963267948966d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(polynomialFunction80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        double double13 = laguerreSolver7.getFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(0.8414709848078965d, (-1.0d), 1.0E-14d);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) 4);
        laguerreSolver7.setRelativeAccuracy((double) 8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.8414709848078965d + "'", double17 == 0.8414709848078965d);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        int int12 = maxIterationsExceededException11.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) maxIterationsExceededException11);
        java.lang.Object[] objArray14 = maxIterationsExceededException11.getArguments();
        java.lang.Object[] objArray15 = maxIterationsExceededException11.getArguments();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex4.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex42.pow(complex44);
        double[] doubleArray51 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray51);
        double double54 = polynomialFunction52.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = polynomialFunction52.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver56 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction55);
        laguerreSolver56.setAbsoluteAccuracy((double) '#');
        laguerreSolver56.resetAbsoluteAccuracy();
        laguerreSolver56.resetRelativeAccuracy();
        boolean boolean61 = complex44.equals((java.lang.Object) laguerreSolver56);
        double double62 = laguerreSolver56.getFunctionValueAccuracy();
        laguerreSolver56.setFunctionValueAccuracy((double) 1);
        boolean boolean65 = complex37.equals((java.lang.Object) laguerreSolver56);
        laguerreSolver56.resetFunctionValueAccuracy();
        laguerreSolver56.resetFunctionValueAccuracy();
        laguerreSolver56.resetAbsoluteAccuracy();
        laguerreSolver56.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            int int70 = laguerreSolver56.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0E-15d + "'", double62 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex(100.0d, (double) (-1L));
        double double22 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex24.tan();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        boolean boolean30 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex34 = complex28.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex36.tan();
        org.apache.commons.math.complex.Complex complex40 = complex36.sinh();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.tan();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex44.subtract(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex40.add(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex57.subtract(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex53.multiply(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex34.subtract(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex64.tan();
        org.apache.commons.math.complex.Complex complex69 = complex21.pow(complex68);
        boolean boolean70 = complex18.equals((java.lang.Object) complex69);
        org.apache.commons.math.complex.Complex complex71 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex76.log();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex83 = complex81.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex79.add(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.conjugate();
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex75.subtract(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex87.negate();
        org.apache.commons.math.complex.Complex complex89 = complex88.acos();
        double double90 = complex88.getImaginary();
        org.apache.commons.math.complex.Complex complex91 = complex88.exp();
        boolean boolean92 = complex71.equals((java.lang.Object) complex88);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-0.0d) + "'", double90 == (-0.0d));
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction37 = polynomialFunction36.derivative();
        double[] doubleArray38 = polynomialFunction36.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertNotNull(univariateRealFunction37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.1752011936438014d, (-1.0232274785475506d));
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        boolean boolean37 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = complex4.acos();
        org.apache.commons.math.complex.Complex complex39 = complex4.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "hi!", objArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str19 = functionEvaluationException18.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException18);
        java.lang.Object[] objArray21 = functionEvaluationException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray21);
        java.lang.Throwable[] throwableArray23 = convergenceException22.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException(35, "org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray8, (java.lang.Throwable) maxIterationsExceededException25);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(1.0E-14d);
        java.lang.Throwable[] throwableArray6 = functionEvaluationException5.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str12 = functionEvaluationException11.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException11);
        java.lang.Object[] objArray14 = functionEvaluationException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray14);
        java.lang.Throwable[] throwableArray16 = convergenceException15.getSuppressed();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) mathException18);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        java.lang.Object[] objArray33 = new java.lang.Object[] { convergenceException27, complex29, true };
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray35, throwable36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray33, (java.lang.Throwable) convergenceException37);
        convergenceException25.addSuppressed((java.lang.Throwable) convergenceException38);
        java.lang.Throwable[] throwableArray40 = convergenceException38.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) functionEvaluationException48);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray40, throwable50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException(throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(3.141592653589793d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) throwableArray6, throwable50);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = complex57.log();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex57.multiply(complex62);
        org.apache.commons.math.complex.Complex complex67 = complex62.sin();
        org.apache.commons.math.complex.Complex complex68 = complex62.tan();
        org.apache.commons.math.complex.Complex complex69 = complex62.sinh();
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex76.atan();
        java.lang.Object[] objArray80 = new java.lang.Object[] { convergenceException74, complex76, true };
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("", objArray82, throwable83);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("", objArray80, (java.lang.Throwable) convergenceException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("", objArray80);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException87 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray80);
        boolean boolean88 = complex62.equals((java.lang.Object) objArray80);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) functionEvaluationException90);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(10.0d);
        double double17 = laguerreSolver7.solve((double) (byte) 1, (double) 100L);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int21 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy((double) 10);
        double double16 = laguerreSolver7.getRelativeAccuracy();
        double double17 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(3.9518054509189455d);
        double double22 = laguerreSolver7.solve((double) 10, 0.5574077246549021d);
        laguerreSolver7.setMaximalIterationCount(97);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        double double18 = polynomialFunction16.value((double) (short) 1);
        double double20 = polynomialFunction16.value((double) 100);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction21 = polynomialFunction16.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction21);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(100.0d, (double) 97);
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction22 = polynomialFunction21.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction21.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = polynomialFunction21.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(univariateRealFunction22);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction24);
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException23);
        java.lang.Throwable[] throwableArray25 = functionEvaluationException24.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) mathException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, (java.lang.Throwable) functionEvaluationException31);
        java.lang.Object[] objArray33 = functionEvaluationException31.getArguments();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        double double85 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (-1L));
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 4);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0E-15d + "'", double85 == 1.0E-15d);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = laguerreSolver7.solve(complexArray49, complex61);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double65 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0E-6d + "'", double65 == 1.0E-6d);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray9, throwable10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray12, (java.lang.Throwable) maxIterationsExceededException15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "org.apache.commons.math.ConvergenceException: ", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.MaxIterationsExceededException: ");
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        int int25 = laguerreSolver24.getMaximalIterationCount();
        laguerreSolver24.resetAbsoluteAccuracy();
        laguerreSolver24.setRelativeAccuracy(0.9149994957367077d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        int int40 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(20.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        laguerreSolver7.setRelativeAccuracy(1.1752011936438014d);
        double double12 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        laguerreSolver43.resetRelativeAccuracy();
        double double69 = laguerreSolver43.getAbsoluteAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        double double75 = laguerreSolver43.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int76 = laguerreSolver43.getMaximalIterationCount();
        double[] doubleArray79 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        double double82 = polynomialFunction80.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction83 = polynomialFunction80.polynomialDerivative();
        double double85 = polynomialFunction80.value((double) (byte) 100);
        double[] doubleArray86 = polynomialFunction80.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver43.solveAll(doubleArray86, (double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver7.solveAll(doubleArray86, (double) (short) 1);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0E-6d + "'", double69 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction83);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = complex15.atan();
        org.apache.commons.math.complex.Complex complex22 = complex7.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean29 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex30.tan();
        boolean boolean34 = complex28.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.cos();
        org.apache.commons.math.complex.Complex complex49 = complex43.atan();
        org.apache.commons.math.complex.Complex complex50 = complex35.add(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.acos();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        boolean boolean53 = complex25.equals((java.lang.Object) complex49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray64 = functionEvaluationException63.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "", objArray64);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex71.atan();
        java.lang.Object[] objArray75 = new java.lang.Object[] { convergenceException69, complex71, true };
        java.lang.Object[] objArray77 = new java.lang.Object[] {};
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray77, throwable78);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray75, (java.lang.Throwable) convergenceException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", objArray75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", objArray64, (java.lang.Throwable) mathException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException85 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray64, (java.lang.Throwable) maxIterationsExceededException85);
        int int87 = maxIterationsExceededException85.getMaxIterations();
        boolean boolean88 = complex25.equals((java.lang.Object) maxIterationsExceededException85);
        java.lang.String str89 = maxIterationsExceededException85.getPattern();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Maximal number of iterations ({0}) exceeded" + "'", str89, "Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        double double19 = laguerreSolver7.solve((double) (short) 1, 0.7853981633974483d, (double) 10.0f);
        laguerreSolver7.setAbsoluteAccuracy((double) 35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray4 = functionEvaluationException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.6657737500283538d, (java.lang.Throwable) mathException5);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = complex15.atan();
        org.apache.commons.math.complex.Complex complex22 = complex7.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = complex35.add(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        boolean boolean42 = complex30.equals((java.lang.Object) complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex25.pow(complex43);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean46 = complex45.isInfinite();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex47.tan();
        boolean boolean51 = complex45.equals((java.lang.Object) complex50);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = complex53.multiply(complex58);
        org.apache.commons.math.complex.Complex complex63 = complex58.cos();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        org.apache.commons.math.complex.Complex complex72 = complex69.log();
        org.apache.commons.math.complex.Complex complex73 = complex67.pow(complex69);
        org.apache.commons.math.complex.Complex complex74 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.log();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex78 = complex76.atan();
        org.apache.commons.math.complex.Complex complex79 = complex74.add(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex74.log();
        org.apache.commons.math.complex.Complex complex81 = complex80.sin();
        org.apache.commons.math.complex.Complex complex82 = complex80.acos();
        org.apache.commons.math.complex.Complex complex83 = complex63.pow(complex80);
        boolean boolean84 = complex45.equals((java.lang.Object) complex80);
        org.apache.commons.math.complex.Complex complex85 = complex45.atan();
        org.apache.commons.math.complex.Complex complex86 = complex85.asin();
        org.apache.commons.math.complex.Complex complex87 = complex86.tanh();
        org.apache.commons.math.complex.Complex complex88 = complex86.tanh();
        org.apache.commons.math.complex.Complex complex89 = complex25.pow(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex88.acos();
        double double91 = complex88.getReal();
        org.apache.commons.math.complex.Complex complex92 = complex88.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double8 = polynomialFunction6.value((double) 1);
        double[] doubleArray9 = polynomialFunction6.getCoefficients();
        double double11 = polynomialFunction6.value((double) 10);
        double double13 = polynomialFunction6.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        laguerreSolver24.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = complex31.multiply(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex36.sin();
        org.apache.commons.math.complex.Complex complex42 = complex36.tan();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex36, complex43 };
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver24.solveAll(complexArray44, complex46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex53.add(complex54);
        org.apache.commons.math.complex.Complex complex58 = complex53.sqrt1z();
        org.apache.commons.math.complex.Complex complex59 = complex53.cos();
        org.apache.commons.math.complex.Complex complex60 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex53.tanh();
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver14.solveAll(complexArray44, complex61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str66 = functionEvaluationException65.getPattern();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException65);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException(0);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) maxIterationsExceededException71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) 97, (java.lang.Throwable) mathException72);
        double double74 = functionEvaluationException73.getArgument();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException73);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 97.0d + "'", double74 == 97.0d);
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray7, throwable8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        convergenceException9.addSuppressed((java.lang.Throwable) convergenceException22);
        java.lang.Throwable[] throwableArray24 = convergenceException22.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "hi!", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException42);
        java.lang.String str44 = convergenceException43.getPattern();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) convergenceException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(97.0d, "org.apache.commons.math.ConvergenceException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) convergenceException43);
        double double47 = functionEvaluationException46.getArgument();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 97.0d + "'", double47 == 97.0d);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setMaximalIterationCount(0);
        int int21 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.resetMaximalIterationCount();
        double double25 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray5, throwable6);
        java.lang.Object[] objArray8 = convergenceException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray8);
        double[] doubleArray16 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        double double19 = polynomialFunction17.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction17.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        laguerreSolver21.setAbsoluteAccuracy((double) '#');
        laguerreSolver21.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = laguerreSolver21.getPolynomialFunction();
        double double28 = laguerreSolver21.solve(0.0d, (double) 1.0f);
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        laguerreSolver36.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver36.getPolynomialFunction();
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction44.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver48 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction47);
        laguerreSolver48.setAbsoluteAccuracy((double) '#');
        laguerreSolver48.resetAbsoluteAccuracy();
        laguerreSolver48.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.atan();
        org.apache.commons.math.complex.Complex complex63 = complex60.log();
        org.apache.commons.math.complex.Complex complex64 = complex55.multiply(complex60);
        org.apache.commons.math.complex.Complex complex65 = complex60.sin();
        org.apache.commons.math.complex.Complex complex66 = complex60.tan();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex60, complex67 };
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex69.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = laguerreSolver48.solveAll(complexArray68, complex70);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex78.atan();
        org.apache.commons.math.complex.Complex complex81 = complex78.log();
        org.apache.commons.math.complex.Complex complex82 = complex76.pow(complex78);
        org.apache.commons.math.complex.Complex complex83 = laguerreSolver36.solve(complexArray68, complex76);
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex84.multiply(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex84.tan();
        org.apache.commons.math.complex.Complex complex88 = complex87.asin();
        org.apache.commons.math.complex.Complex[] complexArray89 = laguerreSolver21.solveAll(complexArray68, complex87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray93 = functionEvaluationException92.getArguments();
        java.lang.String str94 = functionEvaluationException92.getPattern();
        double double95 = functionEvaluationException92.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException96 = new org.apache.commons.math.FunctionEvaluationException(1.557407724654902d, "", (java.lang.Object[]) complexArray89, (java.lang.Throwable) functionEvaluationException92);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray8, (java.lang.Throwable) functionEvaluationException92);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 35.0d + "'", double95 == 35.0d);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        org.apache.commons.math.complex.Complex complex59 = complex43.negate();
        org.apache.commons.math.complex.Complex complex60 = complex43.log();
        double double61 = complex43.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction46.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver48 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction46);
        int int49 = polynomialFunction46.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        laguerreSolver43.resetRelativeAccuracy();
        double double69 = laguerreSolver43.getAbsoluteAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        double double75 = laguerreSolver43.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int76 = laguerreSolver43.getMaximalIterationCount();
        double[] doubleArray79 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        double double82 = polynomialFunction80.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction83 = polynomialFunction80.polynomialDerivative();
        double double85 = polynomialFunction80.value((double) (byte) 100);
        double[] doubleArray86 = polynomialFunction80.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver43.solveAll(doubleArray86, (double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver7.solveAll(doubleArray86, (double) (short) 1);
        laguerreSolver7.resetMaximalIterationCount();
        int int93 = laguerreSolver7.getIterationCount();
        int int94 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0E-6d + "'", double69 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction83);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex6.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.sinh();
        double double13 = complex10.abs();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex10.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex0.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.sqrt();
        double double23 = complex20.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        boolean boolean11 = complex6.equals((java.lang.Object) 10.0f);
        org.apache.commons.math.complex.Complex complex12 = complex6.cos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex12.subtract(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean22 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex23.tan();
        boolean boolean27 = complex21.equals((java.lang.Object) complex26);
        boolean boolean28 = complex26.isNaN();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex34);
        org.apache.commons.math.complex.Complex complex39 = complex34.cos();
        org.apache.commons.math.complex.Complex complex40 = complex34.atan();
        org.apache.commons.math.complex.Complex complex41 = complex34.tan();
        org.apache.commons.math.complex.Complex complex42 = complex26.add(complex34);
        org.apache.commons.math.complex.Complex complex43 = complex34.sin();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex47.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex54 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex43.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.sqrt1z();
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) (byte) 1, (double) 'a');
        org.apache.commons.math.complex.Complex complex60 = complex56.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex20.add(complex56);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) ' ');
        laguerreSolver7.resetFunctionValueAccuracy();
        int int13 = laguerreSolver7.getMaximalIterationCount();
        java.lang.Class<?> wildcardClass14 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(35.0d, (-0.1838722778432016d));
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = complex5.sin();
        org.apache.commons.math.complex.Complex complex12 = complex5.atan();
        org.apache.commons.math.complex.Complex complex13 = complex5.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex13.log();
        boolean boolean17 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex13.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex7.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex3.multiply(complex14);
        double double16 = complex3.abs();
        org.apache.commons.math.complex.Complex complex17 = complex3.negate();
        org.apache.commons.math.complex.Complex complex18 = complex3.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double36 = laguerreSolver7.getRelativeAccuracy();
        double double37 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        double double17 = polynomialFunction15.value((double) (short) 100);
        double[] doubleArray18 = polynomialFunction15.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = polynomialFunction15.derivative();
        double[] doubleArray20 = polynomialFunction15.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray9, (java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray9, (java.lang.Throwable) mathException15);
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = mathException16.getSuppressed();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray18);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        int int13 = laguerreSolver12.getMaximalIterationCount();
        laguerreSolver12.resetAbsoluteAccuracy();
        laguerreSolver12.resetAbsoluteAccuracy();
        double[] doubleArray19 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double[] doubleArray23 = polynomialFunction22.getCoefficients();
        double[] doubleArray24 = polynomialFunction22.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray26 = laguerreSolver12.solveAll(doubleArray24, (double) 20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double[] doubleArray28 = polynomialFunction27.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction27);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction30 = polynomialFunction27.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction30);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        double double7 = polynomialFunction3.value((double) 100L);
        double double9 = polynomialFunction3.value((double) (short) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction3.derivative();
        double double13 = polynomialFunction3.value(0.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetFunctionValueAccuracy();
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        double double18 = laguerreSolver7.solve(1.4440009959998334d, 1.557407724654902d, (-1.0d));
        double double19 = laguerreSolver7.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.4440009959998334d + "'", double18 == 1.4440009959998334d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-15d + "'", double19 == 1.0E-15d);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        int int14 = polynomialFunction13.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction13.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction15);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray7 = functionEvaluationException6.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray7);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "", objArray7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(3.141592653589793d);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", objArray7, (java.lang.Throwable) functionEvaluationException11);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex11.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex11.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex37.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex33.subtract(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        int int7 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        int int10 = laguerreSolver9.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double43 = laguerreSolver7.solve((double) 10L, 1.1752011936438014d, (double) (short) 10);
        double double46 = laguerreSolver7.solve((double) 0L, 52.0d);
        int int47 = laguerreSolver7.getMaximalIterationCount();
        double double48 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 100);
        laguerreSolver7.setRelativeAccuracy((double) '4');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        double double36 = laguerreSolver7.solve((double) (short) 100, (double) (-1));
        double double37 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double40 = laguerreSolver7.getResult();
        double double43 = laguerreSolver7.solve((-1.0d), 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = laguerreSolver7.getPolynomialFunction();
        double double95 = laguerreSolver7.solve((double) 0L, (-1.0d), (double) 100.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int97 = laguerreSolver7.getMaximalIterationCount();
        double double98 = laguerreSolver7.getResult();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction91);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex5.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double39 = laguerreSolver7.solve(1.0E-15d, (double) (byte) 10, 0.761594155955765d);
        laguerreSolver7.setRelativeAccuracy(97.00515450222221d);
        laguerreSolver7.setAbsoluteAccuracy(2.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-15d + "'", double39 == 1.0E-15d);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        laguerreSolver7.setFunctionValueAccuracy(0.38535742648327137d);
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double39 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        int int41 = laguerreSolver7.getMaximalIterationCount();
        int int42 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.negate();
        org.apache.commons.math.complex.Complex complex2 = complex1.log();
        double double3 = complex1.getReal();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray10 = functionEvaluationException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(1.557407724654902d, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        functionEvaluationException12.addSuppressed((java.lang.Throwable) functionEvaluationException15);
        boolean boolean17 = complex1.equals((java.lang.Object) functionEvaluationException15);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = complex22.multiply(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex27.sin();
        org.apache.commons.math.complex.Complex complex33 = complex27.tan();
        org.apache.commons.math.complex.Complex complex34 = complex20.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex35.add(complex37);
        org.apache.commons.math.complex.Complex complex42 = complex1.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.acos();
        boolean boolean45 = complex44.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.NEGATIVE_INFINITY + "'", double3 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        int int7 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        int int9 = polynomialFunction8.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction8.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction8.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        double double13 = laguerreSolver12.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double89 = laguerreSolver7.getResult();
        double double90 = laguerreSolver7.getAbsoluteAccuracy();
        int int91 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double double96 = laguerreSolver7.solve(1.557407724654902d, 35.0297750331978d, Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0E-6d + "'", double90 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.557407724654902d + "'", double96 == 1.557407724654902d);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 10);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        int int17 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.negate();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex17);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.tan();
        org.apache.commons.math.complex.Complex complex25 = complex15.pow(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex26.log();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex29 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex15.add(complex29);
        double double31 = complex30.abs();
        org.apache.commons.math.complex.Complex complex32 = complex30.cos();
        boolean boolean33 = complex10.equals((java.lang.Object) complex30);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        laguerreSolver17.resetAbsoluteAccuracy();
        laguerreSolver17.resetRelativeAccuracy();
        boolean boolean22 = complex5.equals((java.lang.Object) laguerreSolver17);
        laguerreSolver17.setMaximalIterationCount((int) (byte) 10);
        double double25 = laguerreSolver17.getFunctionValueAccuracy();
        double double26 = laguerreSolver17.getFunctionValueAccuracy();
        int int27 = laguerreSolver17.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-15d + "'", double25 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0E-15d + "'", double26 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex3.asin();
        double double5 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex6 = complex4.asin();
        double double7 = complex6.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.negate();
        org.apache.commons.math.complex.Complex complex2 = complex1.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex2.sqrt();
        double double6 = complex2.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.356194490192345d) + "'", double6 == (-2.356194490192345d));
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException5 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException5);
        int int7 = maxIterationsExceededException5.getMaxIterations();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException5);
        int int9 = maxIterationsExceededException5.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) maxIterationsExceededException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str20 = functionEvaluationException19.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException();
        convergenceException21.addSuppressed((java.lang.Throwable) mathException22);
        java.lang.Object[] objArray24 = mathException22.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        java.lang.Object[] objArray37 = new java.lang.Object[] { convergenceException31, complex33, true };
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray39, throwable40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray37, (java.lang.Throwable) convergenceException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", objArray37);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException45);
        java.lang.String str47 = mathException46.getPattern();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("", objArray24, (java.lang.Throwable) mathException46);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray24, (java.lang.Throwable) maxIterationsExceededException52);
        java.lang.Throwable[] throwableArray55 = maxIterationsExceededException52.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) maxIterationsExceededException52);
        maxIterationsExceededException5.addSuppressed((java.lang.Throwable) maxIterationsExceededException52);
        java.lang.Throwable[] throwableArray58 = maxIterationsExceededException52.getSuppressed();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) '#');
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double13 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        double[] doubleArray10 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        double double13 = polynomialFunction11.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction11.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        laguerreSolver15.setAbsoluteAccuracy((double) '#');
        laguerreSolver15.resetAbsoluteAccuracy();
        laguerreSolver15.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = complex22.multiply(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex27.sin();
        org.apache.commons.math.complex.Complex complex33 = complex27.tan();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex27, complex34 };
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = laguerreSolver15.solveAll(complexArray35, complex37);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean41 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex42.tan();
        boolean boolean46 = complex40.equals((java.lang.Object) complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex37.add(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex7.add(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex49.cos();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.asin();
        org.apache.commons.math.complex.Complex complex16 = complex14.sin();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.cosh();
        double double37 = complex34.abs();
        org.apache.commons.math.complex.Complex complex38 = complex34.acos();
        org.apache.commons.math.complex.Complex complex39 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex40 = complex14.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex49 = complex45.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex40.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex8.multiply(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex8.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        int int33 = laguerreSolver7.getIterationCount();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double39 = laguerreSolver7.solve((double) 35, (double) 0, (double) 0.0f);
        double double40 = laguerreSolver7.getResult();
        laguerreSolver7.setMaximalIterationCount(52);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        double double5 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex6 = complex1.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 8.0d);
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction4.polynomialDerivative();
        double[] doubleArray14 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double20 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 0);
        double double23 = laguerreSolver7.getAbsoluteAccuracy();
        double double24 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        double double29 = laguerreSolver7.solve(0.0d, (double) (-1));
        laguerreSolver7.setFunctionValueAccuracy((double) 0.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction32.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertNotNull(polynomialFunction33);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double double86 = laguerreSolver7.getFunctionValueAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        int int88 = laguerreSolver7.getIterationCount();
        double double89 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0E-6d + "'", double89 == 1.0E-6d);
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int48 = laguerreSolver7.getIterationCount();
        double double51 = laguerreSolver7.solve((-1.0d), Double.POSITIVE_INFINITY);
        laguerreSolver7.setMaximalIterationCount(97);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex23.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex31.tan();
        org.apache.commons.math.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.tan();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex39.subtract(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex35.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex29.add(complex35);
        org.apache.commons.math.complex.Complex complex50 = complex18.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        double double52 = complex51.getReal();
        org.apache.commons.math.complex.Complex complex53 = complex51.asin();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        double[] doubleArray57 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        double double60 = polynomialFunction58.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = polynomialFunction58.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver62 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction61);
        laguerreSolver62.setAbsoluteAccuracy((double) '#');
        laguerreSolver62.resetAbsoluteAccuracy();
        laguerreSolver62.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        org.apache.commons.math.complex.Complex complex72 = complex69.log();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.atan();
        org.apache.commons.math.complex.Complex complex77 = complex74.log();
        org.apache.commons.math.complex.Complex complex78 = complex69.multiply(complex74);
        org.apache.commons.math.complex.Complex complex79 = complex74.sin();
        org.apache.commons.math.complex.Complex complex80 = complex74.tan();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex74, complex81 };
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = complex83.log();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray86 = laguerreSolver62.solveAll(complexArray82, complex84);
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean88 = complex87.isInfinite();
        org.apache.commons.math.complex.Complex complex89 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex90 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex91 = complex89.multiply(complex90);
        org.apache.commons.math.complex.Complex complex92 = complex89.tan();
        boolean boolean93 = complex87.equals((java.lang.Object) complex92);
        org.apache.commons.math.complex.Complex complex94 = complex92.cosh();
        org.apache.commons.math.complex.Complex complex95 = complex84.add(complex92);
        org.apache.commons.math.complex.Complex complex96 = complex95.log();
        org.apache.commons.math.complex.Complex complex97 = complex54.add(complex95);
        org.apache.commons.math.complex.Complex complex98 = complex97.cosh();
        org.apache.commons.math.complex.Complex complex99 = complex13.pow(complex97);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction61);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        double[] doubleArray9 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double double12 = polynomialFunction10.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction13);
        laguerreSolver14.setAbsoluteAccuracy((double) '#');
        laguerreSolver14.resetMaximalIterationCount();
        laguerreSolver14.resetMaximalIterationCount();
        double[] doubleArray21 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = polynomialFunction22.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction25);
        laguerreSolver26.setAbsoluteAccuracy((double) '#');
        laguerreSolver26.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver26.getPolynomialFunction();
        double[] doubleArray33 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        double double36 = polynomialFunction34.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = polynomialFunction34.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver38 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction37);
        laguerreSolver38.setAbsoluteAccuracy((double) '#');
        laguerreSolver38.resetAbsoluteAccuracy();
        laguerreSolver38.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = complex45.multiply(complex50);
        org.apache.commons.math.complex.Complex complex55 = complex50.sin();
        org.apache.commons.math.complex.Complex complex56 = complex50.tan();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex50, complex57 };
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex59.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver38.solveAll(complexArray58, complex60);
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex68.atan();
        org.apache.commons.math.complex.Complex complex71 = complex68.log();
        org.apache.commons.math.complex.Complex complex72 = complex66.pow(complex68);
        org.apache.commons.math.complex.Complex complex73 = laguerreSolver26.solve(complexArray58, complex66);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex75.tan();
        org.apache.commons.math.complex.Complex complex79 = complex74.subtract(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex79.cos();
        boolean boolean81 = complex79.isInfinite();
        org.apache.commons.math.complex.Complex complex82 = complex79.cos();
        org.apache.commons.math.complex.Complex complex83 = complex82.tan();
        org.apache.commons.math.complex.Complex complex84 = complex83.tanh();
        org.apache.commons.math.complex.Complex[] complexArray85 = laguerreSolver14.solveAll(complexArray58, complex84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(Double.NEGATIVE_INFINITY, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException88 = new org.apache.commons.math.MaxIterationsExceededException((int) '4', "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, (java.lang.Throwable) mathException89);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        double double13 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.negate();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.0d) + "'", double13 == (-0.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = laguerreSolver7.solve(complexArray49, complex61);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 1);
        double double67 = laguerreSolver7.getRelativeAccuracy();
        int int68 = laguerreSolver7.getMaximalIterationCount();
        double double69 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0E-14d + "'", double67 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        boolean boolean13 = complex12.isNaN();
        org.apache.commons.math.complex.Complex complex14 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex12.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = laguerreSolver7.getPolynomialFunction();
        double double42 = laguerreSolver7.solve(2.5091784786580567d, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2.5091784786580567d + "'", double42 == 2.5091784786580567d);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) 100);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(1.1752011936438014d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        double double94 = laguerreSolver7.solve((double) (byte) 0, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(polynomialFunction89);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.solve((double) 0.0f, (double) 97);
        laguerreSolver7.setAbsoluteAccuracy((double) 52);
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        double double23 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex17.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex14.add(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setAbsoluteAccuracy(0.8414709848078965d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        double double17 = polynomialFunction15.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = polynomialFunction15.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction19);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        boolean boolean11 = complex6.equals((java.lang.Object) 10.0f);
        org.apache.commons.math.complex.Complex complex12 = complex6.cos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex12.subtract(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        double[] doubleArray1 = new double[] { 0.0d };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction2 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = polynomialFunction2.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver4 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction2);
        laguerreSolver4.setRelativeAccuracy((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction3);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getResult();
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        laguerreSolver7.setRelativeAccuracy((double) 10L);
        laguerreSolver7.resetMaximalIterationCount();
        double double92 = laguerreSolver7.solve(35.0d, Double.POSITIVE_INFINITY, (double) (-1L));
        double double93 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 35.0d + "'", double92 == 35.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getRelativeAccuracy();
        int int14 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 1);
        double[] doubleArray19 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver7.solveAll(doubleArray19, 1.0E-14d);
        laguerreSolver7.setRelativeAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.setAbsoluteAccuracy(97.0d);
        double double33 = laguerreSolver7.solve(2.718281828459045d, (double) 0.0f, 1.557407724654902d);
        laguerreSolver7.setMaximalIterationCount((int) (short) 0);
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.718281828459045d + "'", double33 == 2.718281828459045d);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.0d);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException2);
        java.lang.String str4 = convergenceException3.getPattern();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str4, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        double double46 = laguerreSolver7.getResult();
        double double50 = laguerreSolver7.solve((double) (short) -1, (double) 52, (double) 35);
        laguerreSolver7.setFunctionValueAccuracy((double) '#');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = laguerreSolver7.getPolynomialFunction();
        double double57 = laguerreSolver7.solve(1.0E-6d, (-0.1838722778432016d), (double) (byte) 1);
        int int58 = laguerreSolver7.getMaximalIterationCount();
        double[] doubleArray61 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction62 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray61);
        double double64 = polynomialFunction62.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction65 = polynomialFunction62.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver66 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction65);
        laguerreSolver66.setAbsoluteAccuracy((double) '#');
        laguerreSolver66.resetAbsoluteAccuracy();
        laguerreSolver66.resetRelativeAccuracy();
        double double71 = laguerreSolver66.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction72 = laguerreSolver66.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction73 = polynomialFunction72.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver74 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction72);
        laguerreSolver74.setFunctionValueAccuracy((double) 10.0f);
        laguerreSolver74.setMaximalIterationCount((int) (byte) 100);
        double[] doubleArray81 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction82 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray81);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction83 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray81);
        double double85 = polynomialFunction83.value((double) 1);
        double[] doubleArray86 = polynomialFunction83.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction87 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray89 = laguerreSolver74.solveAll(doubleArray86, (double) 52);
        org.apache.commons.math.complex.Complex complex90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver7.solveAll(complexArray89, complex90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0E-6d + "'", double57 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction65);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0E-15d + "'", double71 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction72);
        org.junit.Assert.assertNotNull(univariateRealFunction73);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str5 = functionEvaluationException4.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) convergenceException6);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        double double18 = laguerreSolver7.getAbsoluteAccuracy();
        double double19 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        int int18 = laguerreSolver7.getMaximalIterationCount();
        double double19 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.apache.commons.math.complex.Complex[] complexArray21 = null;
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        boolean boolean54 = complex51.isInfinite();
        double double55 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex58.sqrt1z();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = complex63.atan();
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex69 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex70 = complex66.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.asin();
        org.apache.commons.math.complex.Complex complex72 = complex58.pow(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex51.add(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.cos();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.log();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex78.log();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = complex79.atan();
        org.apache.commons.math.complex.Complex complex82 = complex81.log();
        org.apache.commons.math.complex.Complex complex83 = complex82.tanh();
        org.apache.commons.math.complex.Complex complex84 = complex76.divide(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex85.asin();
        org.apache.commons.math.complex.Complex complex87 = complex70.pow(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex87.asin();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex89 = laguerreSolver7.solve(complexArray21, complex87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 0L);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double23 = laguerreSolver7.solve(2.718281828459045d, (double) 10L, (double) '4');
        int int24 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2.718281828459045d + "'", double23 == 2.718281828459045d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(10.0d);
        double double17 = laguerreSolver7.solve((double) (byte) 1, (double) 100L);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        int int20 = polynomialFunction19.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException1 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1);
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException1);
        java.lang.String str3 = maxIterationsExceededException1.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded" + "'", str3, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded");
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        double[] doubleArray9 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction4.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction10);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        double double14 = laguerreSolver7.getRelativeAccuracy();
        int int15 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 20);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException5 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException11);
        mathException6.addSuppressed((java.lang.Throwable) functionEvaluationException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.Object[] objArray15 = mathException6.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray15, (java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray15, (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", objArray15);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int40 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 2);
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        laguerreSolver36.resetAbsoluteAccuracy();
        laguerreSolver36.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex48);
        org.apache.commons.math.complex.Complex complex53 = complex48.sin();
        org.apache.commons.math.complex.Complex complex54 = complex48.tan();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex48, complex55 };
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver36.solveAll(complexArray56, complex58);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex65.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex66.log();
        org.apache.commons.math.complex.Complex complex70 = complex64.pow(complex66);
        org.apache.commons.math.complex.Complex complex71 = laguerreSolver24.solve(complexArray56, complex64);
        org.apache.commons.math.complex.Complex complex72 = complex64.cos();
        org.apache.commons.math.complex.Complex complex73 = complex16.divide(complex64);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex75.atan();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex78.log();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex75.subtract(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex16.subtract(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex86 = complex83.sin();
        org.apache.commons.math.complex.Complex complex87 = complex86.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        double double20 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException18);
        java.lang.Object[] objArray20 = functionEvaluationException18.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(20, "org.apache.commons.math.MaxIterationsExceededException: ", objArray20);
        int int22 = maxIterationsExceededException21.getMaxIterations();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) '#');
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) ' ');
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double12 = polynomialFunction10.value((double) 100L);
        int int13 = polynomialFunction10.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        double double9 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex31.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex20.divide(complex39);
        java.lang.Object obj41 = null;
        boolean boolean42 = complex39.equals(obj41);
        org.apache.commons.math.complex.Complex complex43 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex10.pow(complex43);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = complex48.pow(complex50);
        org.apache.commons.math.complex.Complex complex55 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = complex55.add(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex60.tan();
        org.apache.commons.math.complex.Complex complex63 = complex43.pow(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex43.log();
        org.apache.commons.math.complex.Complex complex65 = complex43.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        laguerreSolver19.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex31.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex31, complex38 };
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver19.solveAll(complexArray39, complex41);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = complex47.pow(complex49);
        org.apache.commons.math.complex.Complex complex54 = laguerreSolver7.solve(complexArray39, complex47);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy(2.718281828459045d);
        double double61 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double63 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0E-14d + "'", double61 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction13.derivative();
        double double16 = polynomialFunction13.value(0.761594155955765d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = polynomialFunction13.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = polynomialFunction13.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction13.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction17);
        org.junit.Assert.assertNotNull(univariateRealFunction18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex6.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.sinh();
        double double13 = complex10.abs();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex10.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex0.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        boolean boolean31 = complex30.isNaN();
        org.apache.commons.math.complex.Complex complex32 = complex24.subtract(complex30);
        boolean boolean33 = complex32.isNaN();
        org.apache.commons.math.complex.Complex complex34 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex35 = complex21.divide(complex32);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.log();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = complex37.multiply(complex42);
        org.apache.commons.math.complex.Complex complex47 = complex42.cos();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex51.pow(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex59.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex60.atan();
        org.apache.commons.math.complex.Complex complex63 = complex58.add(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex58.log();
        org.apache.commons.math.complex.Complex complex65 = complex64.sin();
        org.apache.commons.math.complex.Complex complex66 = complex64.acos();
        org.apache.commons.math.complex.Complex complex67 = complex47.pow(complex64);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        boolean boolean76 = complex74.isInfinite();
        org.apache.commons.math.complex.Complex complex77 = complex72.add(complex74);
        org.apache.commons.math.complex.Complex complex78 = complex64.multiply(complex72);
        double[] doubleArray81 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction82 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray81);
        double double84 = polynomialFunction82.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction85 = polynomialFunction82.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver86 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction85);
        laguerreSolver86.setAbsoluteAccuracy(1.0E-14d);
        boolean boolean89 = complex64.equals((java.lang.Object) 1.0E-14d);
        org.apache.commons.math.complex.Complex complex90 = complex64.tanh();
        org.apache.commons.math.complex.Complex complex91 = complex21.pow(complex90);
        org.apache.commons.math.complex.Complex complex92 = complex91.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException1 = new org.apache.commons.math.MaxIterationsExceededException(100);
        java.lang.String str2 = maxIterationsExceededException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded" + "'", str2, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded");
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double[] doubleArray9 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        double double13 = laguerreSolver12.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        double double17 = laguerreSolver7.getAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-6d + "'", double17 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.MathException: ");
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException39);
        mathException34.addSuppressed((java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '4', (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException42);
        mathException28.addSuppressed((java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", objArray6, (java.lang.Throwable) mathException28);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray53, throwable54);
        java.lang.Object[] objArray56 = convergenceException55.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray56);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException59 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray56, (java.lang.Throwable) maxIterationsExceededException59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "org.apache.commons.math.ConvergenceException: ", objArray56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(35.0297750331978d, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray6, (java.lang.Throwable) functionEvaluationException61);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.negate();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex18.log();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = complex18.multiply(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex23.cos();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex34);
        org.apache.commons.math.complex.Complex complex39 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex39.add(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex39.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex28.pow(complex45);
        double double49 = complex28.abs();
        org.apache.commons.math.complex.Complex complex50 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex51 = complex16.pow(complex28);
        org.apache.commons.math.complex.Complex complex52 = complex10.multiply(complex51);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.0d) + "'", double8 == (-0.0d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        double double11 = polynomialFunction4.value(32.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction13);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) ' ', (double) '4');
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        double double18 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.9149994957367077d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double13 = laguerreSolver7.solve((double) (-1), 0.7853981633974483d);
        double[] doubleArray17 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver7.solveAll(doubleArray17, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction22.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction24 = polynomialFunction23.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = polynomialFunction23.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(univariateRealFunction24);
        org.junit.Assert.assertNotNull(polynomialFunction25);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex8 = complex4.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        double double15 = complex13.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        int int10 = polynomialFunction9.degree();
        double double12 = polynomialFunction9.value((double) 10.0f);
        double double14 = polynomialFunction9.value(0.8414709848078965d);
        double[] doubleArray15 = polynomialFunction9.getCoefficients();
        double[] doubleArray16 = polynomialFunction9.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: ", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.FunctionEvaluationException: ", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str35 = functionEvaluationException34.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        convergenceException36.addSuppressed((java.lang.Throwable) mathException37);
        java.lang.Object[] objArray39 = mathException37.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException40 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        java.lang.Object[] objArray52 = new java.lang.Object[] { convergenceException46, complex48, true };
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray54, throwable55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray52, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", objArray52);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException59 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException60);
        java.lang.String str62 = mathException61.getPattern();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", objArray39, (java.lang.Throwable) mathException61);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException67 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray39, (java.lang.Throwable) maxIterationsExceededException67);
        double double70 = functionEvaluationException69.getArgument();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray18, (java.lang.Throwable) functionEvaluationException69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException(2.718281828459045d, "org.apache.commons.math.ConvergenceException: ", objArray18);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1", (java.lang.Throwable) functionEvaluationException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException73);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0E-15d + "'", double70 == 1.0E-15d);
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray5 = functionEvaluationException4.getArguments();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray13 = functionEvaluationException12.getArguments();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        java.lang.Object[] objArray26 = new java.lang.Object[] { convergenceException20, complex22, true };
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray26, (java.lang.Throwable) convergenceException30);
        convergenceException18.addSuppressed((java.lang.Throwable) convergenceException31);
        java.lang.Throwable[] throwableArray33 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray13, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        java.lang.Object[] objArray45 = new java.lang.Object[] { convergenceException39, complex41, true };
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray47, throwable48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray45, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException49);
        convergenceException35.addSuppressed((java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray5, (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException55);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        double double8 = polynomialFunction4.value((double) 0.0f);
        double double10 = polynomialFunction4.value(35.0d);
        double double12 = polynomialFunction4.value((double) 1L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction4.polynomialDerivative();
        int int14 = polynomialFunction13.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray4, throwable5);
        java.lang.Object[] objArray7 = convergenceException6.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException12);
        int int14 = maxIterationsExceededException12.getMaxIterations();
        java.lang.Object[] objArray15 = maxIterationsExceededException12.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", objArray7, (java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException17);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) -1);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex9.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.log();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex19.tan();
        org.apache.commons.math.complex.Complex complex22 = complex13.multiply(complex19);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex26.atan();
        org.apache.commons.math.complex.Complex complex28 = complex27.atan();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex24.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.tan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex33.tan();
        org.apache.commons.math.complex.Complex complex37 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex32.pow(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean42 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex43.tan();
        boolean boolean47 = complex41.equals((java.lang.Object) complex46);
        boolean boolean48 = complex46.isNaN();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.apache.commons.math.complex.Complex complex58 = complex52.pow(complex54);
        org.apache.commons.math.complex.Complex complex59 = complex54.cos();
        org.apache.commons.math.complex.Complex complex60 = complex54.atan();
        org.apache.commons.math.complex.Complex complex61 = complex54.tan();
        org.apache.commons.math.complex.Complex complex62 = complex46.add(complex54);
        org.apache.commons.math.complex.Complex complex63 = complex54.sin();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex67.add(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex71.sinh();
        org.apache.commons.math.complex.Complex complex74 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex75 = complex63.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex63.sqrt1z();
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) (byte) 1, (double) 'a');
        org.apache.commons.math.complex.Complex complex80 = complex76.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex40.add(complex79);
        boolean boolean82 = complex19.equals((java.lang.Object) complex79);
        org.apache.commons.math.complex.Complex complex83 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex83.negate();
        org.apache.commons.math.complex.Complex complex85 = complex7.add(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex7.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getRelativeAccuracy();
        double double18 = laguerreSolver7.solve(1.0E-14d, (double) ' ', (double) (short) 100);
        double[] doubleArray21 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = polynomialFunction22.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction25);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = polynomialFunction25.polynomialDerivative();
        double[] doubleArray28 = polynomialFunction25.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction25);
        double[] doubleArray30 = polynomialFunction25.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray32 = laguerreSolver7.solveAll(doubleArray30, (double) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex11.acos();
        org.apache.commons.math.complex.Complex complex14 = complex11.negate();
        org.apache.commons.math.complex.Complex complex15 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex11.negate();
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.solve((double) 0.0f, (double) (short) -1, (double) 'a');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction14.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction14.polynomialDerivative();
        int int17 = polynomialFunction16.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (-1));
        laguerreSolver7.resetFunctionValueAccuracy();
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        laguerreSolver24.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = complex31.multiply(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex36.sin();
        org.apache.commons.math.complex.Complex complex42 = complex36.tan();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex36, complex43 };
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver24.solveAll(complexArray44, complex46);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        java.lang.Object[] objArray61 = new java.lang.Object[] { convergenceException55, complex57, true };
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray63, throwable64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray61, (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", objArray61);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException68 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray61);
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray70, throwable71);
        java.lang.Object[] objArray73 = convergenceException72.getArguments();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray61, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) 97, "org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray48, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.complex.Complex complex77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = laguerreSolver7.solveAll(complexArray48, complex77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        double double9 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        boolean boolean11 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex5.add(complex11);
        boolean boolean13 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.cos();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex36.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex42.acos();
        org.apache.commons.math.complex.Complex complex45 = complex25.pow(complex42);
        org.apache.commons.math.complex.Complex complex46 = complex11.add(complex25);
        org.apache.commons.math.complex.Complex complex47 = complex11.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        laguerreSolver7.resetFunctionValueAccuracy();
        double double22 = laguerreSolver7.solve((double) 1L, (double) (-1), 1.1752011936438014d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double24 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-14d + "'", double24 == 1.0E-14d);
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex4.pow(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex14.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        double double45 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int47 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        int int85 = laguerreSolver7.getMaximalIterationCount();
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        double double39 = laguerreSolver32.solve((double) 100, 10.0d, (-1.0d));
        double double40 = laguerreSolver32.getRelativeAccuracy();
        laguerreSolver32.resetFunctionValueAccuracy();
        laguerreSolver32.resetAbsoluteAccuracy();
        double double43 = laguerreSolver32.getRelativeAccuracy();
        laguerreSolver32.resetFunctionValueAccuracy();
        double double45 = laguerreSolver32.getRelativeAccuracy();
        double double48 = laguerreSolver32.solve(0.0d, 3.9518054509189455d);
        double[] doubleArray51 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray51);
        double double54 = polynomialFunction52.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = polynomialFunction52.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver56 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction55);
        laguerreSolver56.setRelativeAccuracy((double) 10);
        double double59 = laguerreSolver56.getAbsoluteAccuracy();
        double double62 = laguerreSolver56.solve((double) (-1), 0.7853981633974483d);
        double[] doubleArray66 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction67 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = laguerreSolver56.solveAll(doubleArray66, (-1.0d));
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex71.atan();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.atan();
        org.apache.commons.math.complex.Complex complex76 = complex75.atan();
        org.apache.commons.math.complex.Complex complex77 = complex76.sin();
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        double double79 = complex78.getImaginary();
        org.apache.commons.math.complex.Complex complex80 = complex78.tan();
        double double81 = complex80.getReal();
        org.apache.commons.math.complex.Complex complex82 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex83 = laguerreSolver32.solve(complexArray69, complex80);
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex87 = complex85.multiply(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex85.tan();
        org.apache.commons.math.complex.Complex complex89 = complex84.subtract(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex89.cos();
        org.apache.commons.math.complex.Complex complex91 = complex90.tan();
        org.apache.commons.math.complex.Complex complex92 = complex91.sin();
        org.apache.commons.math.complex.Complex complex93 = laguerreSolver7.solve(complexArray69, complex91);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0E-14d + "'", double43 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0E-14d + "'", double45 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0E-6d + "'", double59 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex6.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        java.lang.Object[] objArray13 = new java.lang.Object[] { complex12 };
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        java.lang.Object[] objArray22 = new java.lang.Object[] { convergenceException16, complex18, true };
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray24, throwable25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray22, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) mathException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException29);
        java.lang.String str31 = functionEvaluationException29.getPattern();
        java.lang.Object[] objArray32 = functionEvaluationException29.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray32);
        java.lang.Throwable throwable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            mathException33.addSuppressed(throwable34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str31, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray32);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "hi!", objArray12);
        double double20 = functionEvaluationException19.getArgument();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 4, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException24);
        functionEvaluationException19.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(1.4440009959998334d, (java.lang.Throwable) functionEvaluationException19);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        double double11 = polynomialFunction6.value((double) 0.0f);
        double[] doubleArray12 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction6.polynomialDerivative();
        int int14 = polynomialFunction6.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex7.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex25 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.tan();
        boolean boolean27 = complex26.isNaN();
        org.apache.commons.math.complex.Complex complex28 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.cos();
        boolean boolean9 = complex3.isNaN();
        double double10 = complex3.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        boolean boolean8 = complex4.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex4.asin();
        org.apache.commons.math.complex.Complex complex11 = complex4.cos();
        boolean boolean12 = complex1.equals((java.lang.Object) complex11);
        org.apache.commons.math.complex.Complex complex13 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex23.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex31.tan();
        org.apache.commons.math.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.tan();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex39.subtract(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex35.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex29.add(complex35);
        org.apache.commons.math.complex.Complex complex50 = complex18.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex18.cosh();
        boolean boolean52 = complex13.equals((java.lang.Object) complex51);
        double[] doubleArray55 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        double double59 = polynomialFunction57.value((double) ' ');
        double[] doubleArray60 = polynomialFunction57.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction62 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        boolean boolean63 = complex51.equals((java.lang.Object) polynomialFunction62);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.atan();
        org.apache.commons.math.complex.Complex complex66 = complex65.atan();
        org.apache.commons.math.complex.Complex complex67 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex67.asin();
        org.apache.commons.math.complex.Complex complex69 = complex51.multiply(complex68);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        boolean boolean7 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex5.subtract(complex9);
        double double12 = complex5.abs();
        org.apache.commons.math.complex.Complex complex13 = complex5.atan();
        double double14 = complex13.abs();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        int int9 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction3.derivative();
        double double13 = polynomialFunction3.value(0.7853981633974483d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray14);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        java.lang.Object[] objArray26 = convergenceException25.getArguments();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray14, (java.lang.Throwable) convergenceException25);
        double double29 = functionEvaluationException28.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Object[] objArray32 = mathException31.getArguments();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        double[] doubleArray9 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double double12 = polynomialFunction10.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction13);
        laguerreSolver14.setAbsoluteAccuracy((double) '#');
        laguerreSolver14.resetAbsoluteAccuracy();
        laguerreSolver14.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = complex21.multiply(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex26.sin();
        org.apache.commons.math.complex.Complex complex32 = complex26.tan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex26, complex33 };
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = laguerreSolver14.solveAll(complexArray34, complex36);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        java.lang.Object[] objArray57 = new java.lang.Object[] { convergenceException51, complex53, true };
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray59, throwable60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray57, (java.lang.Throwable) convergenceException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", objArray57);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException64 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray57);
        int int65 = maxIterationsExceededException64.getMaxIterations();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException64);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException64);
        java.lang.Object[] objArray68 = convergenceException67.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException69 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: ", objArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.MathException: ", objArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException70);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray34, (java.lang.Throwable) functionEvaluationException71);
        java.lang.Throwable[] throwableArray73 = convergenceException72.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException74 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "hi!", (java.lang.Throwable) maxIterationsExceededException74);
        int int76 = maxIterationsExceededException74.getMaxIterations();
        int int77 = maxIterationsExceededException74.getMaxIterations();
        int int78 = maxIterationsExceededException74.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, (java.lang.Throwable) maxIterationsExceededException74);
        int int80 = maxIterationsExceededException74.getMaxIterations();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double40 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-6d + "'", double40 == 1.0E-6d);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.solve((double) (short) -1, 10.0d);
        double double36 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((-1.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-6d + "'", double36 == 1.0E-6d);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getResult();
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        laguerreSolver7.setRelativeAccuracy((double) 10L);
        laguerreSolver7.resetMaximalIterationCount();
        double double92 = laguerreSolver7.solve((double) 52, (double) 0, 0.5403023058681398d);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setFunctionValueAccuracy(52.0d);
        laguerreSolver7.setMaximalIterationCount(1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 52.0d + "'", double92 == 52.0d);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray12);
        java.lang.Throwable[] throwableArray20 = maxIterationsExceededException19.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray29 = mathException28.getSuppressed();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (byte) 1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) '#');
        laguerreSolver7.resetFunctionValueAccuracy();
        double double28 = laguerreSolver7.solve(32.01560596553195d, 76.53545042904899d, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.01560596553195d + "'", double28 == 32.01560596553195d);
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        double double12 = polynomialFunction3.value(1.1752011936438014d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction3.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex3.asin();
        double double5 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex6 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex5.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.asin();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean17 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex18.tan();
        boolean boolean22 = complex16.equals((java.lang.Object) complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex23.tan();
        org.apache.commons.math.complex.Complex complex27 = complex16.multiply(complex23);
        double double28 = complex27.abs();
        org.apache.commons.math.complex.Complex complex29 = complex27.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = complex35.log();
        org.apache.commons.math.complex.Complex complex39 = complex33.pow(complex35);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex51.log();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex52.atan();
        org.apache.commons.math.complex.Complex complex55 = complex50.add(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex50.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex56.acos();
        org.apache.commons.math.complex.Complex complex59 = complex39.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex27.subtract(complex39);
        org.apache.commons.math.complex.Complex complex61 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.acos();
        org.apache.commons.math.complex.Complex complex63 = complex15.pow(complex61);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.asin();
        double double16 = complex15.getReal();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex15.pow(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.tan();
        org.apache.commons.math.complex.Complex complex31 = complex10.pow(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex10.exp();
        boolean boolean33 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex10.sqrt1z();
        double double35 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = complex10.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.0d) + "'", double35 == (-0.0d));
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        double double38 = complex37.getReal();
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex40.acos();
        org.apache.commons.math.complex.Complex complex42 = complex40.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex0.multiply(complex7);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean13 = complex12.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        boolean boolean18 = complex12.equals((java.lang.Object) complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex19.acos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = complex25.pow(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex27.cos();
        org.apache.commons.math.complex.Complex complex33 = complex27.atan();
        org.apache.commons.math.complex.Complex complex34 = complex19.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex7.divide(complex19);
        org.apache.commons.math.complex.Complex complex36 = complex7.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, 10.0d);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double[] doubleArray8 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction4.polynomialDerivative();
        double[] doubleArray11 = polynomialFunction4.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        org.apache.commons.math.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.tan();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex22.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex18.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.tan();
        org.apache.commons.math.complex.Complex complex34 = complex11.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex11.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        double[] doubleArray40 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction41.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        laguerreSolver45.setAbsoluteAccuracy((double) '#');
        laguerreSolver45.resetAbsoluteAccuracy();
        laguerreSolver45.resetRelativeAccuracy();
        laguerreSolver45.setRelativeAccuracy(0.0d);
        boolean boolean52 = complex36.equals((java.lang.Object) 0.0d);
        org.apache.commons.math.complex.Complex complex53 = complex36.asin();
        double[] doubleArray56 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray56);
        double double59 = polynomialFunction57.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction60 = polynomialFunction57.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver61 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction60);
        laguerreSolver61.setAbsoluteAccuracy((double) '#');
        laguerreSolver61.resetAbsoluteAccuracy();
        laguerreSolver61.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex68.atan();
        org.apache.commons.math.complex.Complex complex71 = complex68.log();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.atan();
        org.apache.commons.math.complex.Complex complex76 = complex73.log();
        org.apache.commons.math.complex.Complex complex77 = complex68.multiply(complex73);
        org.apache.commons.math.complex.Complex complex78 = complex73.sin();
        org.apache.commons.math.complex.Complex complex79 = complex73.tan();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray81 = new org.apache.commons.math.complex.Complex[] { complex73, complex80 };
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex83 = complex82.log();
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray85 = laguerreSolver61.solveAll(complexArray81, complex83);
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean87 = complex86.isInfinite();
        org.apache.commons.math.complex.Complex complex88 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex89 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex90 = complex88.multiply(complex89);
        org.apache.commons.math.complex.Complex complex91 = complex88.tan();
        boolean boolean92 = complex86.equals((java.lang.Object) complex91);
        org.apache.commons.math.complex.Complex complex93 = complex91.cosh();
        org.apache.commons.math.complex.Complex complex94 = complex83.add(complex91);
        org.apache.commons.math.complex.Complex complex95 = complex94.sqrt1z();
        org.apache.commons.math.complex.Complex complex96 = complex53.subtract(complex95);
        boolean boolean97 = complex95.isNaN();
        org.apache.commons.math.complex.Complex complex98 = complex95.cosh();
        org.apache.commons.math.complex.Complex complex99 = complex98.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction60);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        boolean boolean9 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex22.sin();
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = complex15.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        boolean boolean38 = complex36.isInfinite();
        org.apache.commons.math.complex.Complex complex39 = complex34.add(complex36);
        org.apache.commons.math.complex.Complex complex40 = complex29.divide(complex34);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex44.add(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex52.tan();
        org.apache.commons.math.complex.Complex complex56 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.tan();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex60.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex56.add(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex50.add(complex56);
        org.apache.commons.math.complex.Complex complex71 = complex34.divide(complex56);
        double double72 = complex34.getReal();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex73.log();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex34.pow(complex75);
        org.apache.commons.math.complex.Complex complex78 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex79.log();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex82 = complex80.atan();
        org.apache.commons.math.complex.Complex complex83 = complex80.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex80.cos();
        org.apache.commons.math.complex.Complex complex85 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex85.sin();
        org.apache.commons.math.complex.Complex complex87 = complex78.subtract(complex85);
        org.apache.commons.math.complex.Complex complex88 = complex11.multiply(complex85);
        org.apache.commons.math.complex.Complex complex89 = null;
        org.apache.commons.math.complex.Complex complex90 = complex11.multiply(complex89);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        double double23 = laguerreSolver7.solve((double) 97, 0.0d, (double) (short) 100);
        double double24 = laguerreSolver7.getFunctionValueAccuracy();
        double double27 = laguerreSolver7.solve(10.15486522864652d, 0.761594155955765d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 97.0d + "'", double23 == 97.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.15486522864652d + "'", double27 == 10.15486522864652d);
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex26.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex22.pow(complex34);
        boolean boolean36 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex14.multiply(complex22);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex14.subtract(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex3.divide(complex14);
        org.apache.commons.math.complex.Complex complex45 = complex14.asin();
        boolean boolean46 = complex45.isInfinite();
        double[] doubleArray49 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray49);
        double double52 = polynomialFunction50.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = polynomialFunction50.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver54 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction53);
        laguerreSolver54.setAbsoluteAccuracy((double) '#');
        laguerreSolver54.resetAbsoluteAccuracy();
        double double61 = laguerreSolver54.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction62 = laguerreSolver54.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction63 = polynomialFunction62.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction64 = polynomialFunction62.derivative();
        boolean boolean65 = complex45.equals((java.lang.Object) polynomialFunction62);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction53);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction62);
        org.junit.Assert.assertNotNull(univariateRealFunction63);
        org.junit.Assert.assertNotNull(univariateRealFunction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray18 = polynomialFunction17.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = polynomialFunction17.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction17.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction20);
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        int int45 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        int int47 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        int int7 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction4.derivative();
        double double11 = polynomialFunction4.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction4.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex10.atan();
        org.apache.commons.math.complex.Complex complex18 = complex10.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double19 = laguerreSolver7.solve(0.0d, (double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.tan();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex18.subtract(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex14.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.negate();
        org.apache.commons.math.complex.Complex complex30 = complex29.asin();
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = complex8.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double92 = laguerreSolver7.solve((double) (byte) 100, (double) '4');
        laguerreSolver7.setMaximalIterationCount(100);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction95 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver96 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction95);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction95);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        int int41 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        int int12 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount(1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex7.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex3.multiply(complex14);
        double double16 = complex3.abs();
        org.apache.commons.math.complex.Complex complex17 = complex3.negate();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex25.negate();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex30.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        boolean boolean47 = complex45.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = complex43.add(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex48.tan();
        org.apache.commons.math.complex.Complex complex50 = complex30.multiply(complex48);
        org.apache.commons.math.complex.Complex complex51 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex28.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex17.add(complex28);
        double double54 = complex53.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray5, throwable6);
        java.lang.Object[] objArray8 = convergenceException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray8);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray9 = functionEvaluationException8.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray20);
        int int28 = maxIterationsExceededException27.getMaxIterations();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException(97, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) mathException36);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Maximal number of iterations (1) exceeded");
        java.lang.String str2 = mathException1.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: Maximal number of iterations (1) exceeded" + "'", str2, "org.apache.commons.math.FunctionEvaluationException: Maximal number of iterations (1) exceeded");
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double37 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy(100.0d);
        double double40 = laguerreSolver7.getAbsoluteAccuracy();
        double double44 = laguerreSolver7.solve(8.0d, 70937.90732284723d, 1.1432116289313778d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-6d + "'", double40 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.0d + "'", double44 == 8.0d);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException7);
        java.lang.Object[] objArray9 = functionEvaluationException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(10.15486522864652d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException10);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double37 = laguerreSolver7.solve(10.15486522864652d, 2.718281828459045d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.15486522864652d + "'", double37 == 10.15486522864652d);
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) '4');
        double double41 = laguerreSolver7.solve((double) 1L, (double) ' ', (double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver7.getPolynomialFunction();
        double double45 = laguerreSolver7.solve(32.0d, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray47 = polynomialFunction46.getCoefficients();
        double double49 = polynomialFunction46.value(0.5403023058681398d);
        int int50 = polynomialFunction46.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction51 = polynomialFunction46.derivative();
        double double53 = univariateRealFunction51.value(100.07996802557444d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 32.0d + "'", double45 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.setAbsoluteAccuracy((double) 8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double15 = laguerreSolver7.solve(0.8414709848078965d, (double) (short) 10, (double) 10L);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 52);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.8414709848078965d + "'", double15 == 0.8414709848078965d);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(52.009614495783374d, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.solve((-0.0d), 1.0E-14d);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 0);
        double double18 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(1.5707963267948966d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.0d) + "'", double15 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.sin();
        org.apache.commons.math.complex.Complex complex26 = complex20.tan();
        org.apache.commons.math.complex.Complex complex27 = complex13.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        boolean boolean36 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex32.add(complex34);
        org.apache.commons.math.complex.Complex complex38 = complex27.divide(complex32);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex42.add(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex50.tan();
        org.apache.commons.math.complex.Complex complex54 = complex50.sinh();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.tan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex61.log();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex58.subtract(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex54.add(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex48.add(complex54);
        org.apache.commons.math.complex.Complex complex69 = complex32.divide(complex54);
        org.apache.commons.math.complex.Complex complex70 = complex10.subtract(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex70.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        laguerreSolver43.resetRelativeAccuracy();
        double double69 = laguerreSolver43.getAbsoluteAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        double double75 = laguerreSolver43.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int76 = laguerreSolver43.getMaximalIterationCount();
        double[] doubleArray79 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        double double82 = polynomialFunction80.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction83 = polynomialFunction80.polynomialDerivative();
        double double85 = polynomialFunction80.value((double) (byte) 100);
        double[] doubleArray86 = polynomialFunction80.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver43.solveAll(doubleArray86, (double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver7.solveAll(doubleArray86, (double) (short) 1);
        laguerreSolver7.setFunctionValueAccuracy(100.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(3.9518054509189455d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0E-6d + "'", double69 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction83);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean5 = complex1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex1.asin();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex8.sqrt();
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double90 = laguerreSolver7.solve(1.0E-15d, (double) 0L, (double) (-1.0f));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) ' ');
        double double94 = laguerreSolver7.getRelativeAccuracy();
        double double95 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0E-15d + "'", double90 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0E-14d + "'", double94 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0E-6d + "'", double95 == 1.0E-6d);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        double double9 = polynomialFunction6.value(0.7853981633974483d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver10.setRelativeAccuracy(2.4785912770698393d);
        laguerreSolver10.setMaximalIterationCount((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver10.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double89 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double93 = laguerreSolver7.solve((double) (-1L), (double) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0E-6d + "'", double89 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.tan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex19.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex15.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex9.add(complex15);
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.log();
        org.apache.commons.math.complex.Complex complex41 = complex35.pow(complex37);
        org.apache.commons.math.complex.Complex complex42 = complex41.atan();
        org.apache.commons.math.complex.Complex complex43 = complex41.tanh();
        double double44 = complex41.abs();
        org.apache.commons.math.complex.Complex complex45 = complex31.subtract(complex41);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        int int6 = polynomialFunction3.degree();
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        double double9 = polynomialFunction3.value((double) (short) -1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        double double12 = univariateRealFunction10.value((double) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) '#');
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver7.getPolynomialFunction();
        double double15 = laguerreSolver7.solve(Double.NEGATIVE_INFINITY, 3.9518054509189455d);
        int int16 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(52.0d);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.NEGATIVE_INFINITY + "'", double15 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        double double16 = laguerreSolver7.solve(0.9173172759781081d, (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9173172759781081d + "'", double16 == 0.9173172759781081d);
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        double double13 = laguerreSolver12.getAbsoluteAccuracy();
        laguerreSolver12.resetMaximalIterationCount();
        laguerreSolver12.setAbsoluteAccuracy(10.0d);
        laguerreSolver12.setAbsoluteAccuracy((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = laguerreSolver12.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.setFunctionValueAccuracy(1.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        java.lang.Object[] objArray68 = new java.lang.Object[] { convergenceException62, complex64, true };
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray70, throwable71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray68, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException73);
        java.lang.String str76 = convergenceException73.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException73);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException80 = new org.apache.commons.math.MaxIterationsExceededException(1);
        convergenceException77.addSuppressed((java.lang.Throwable) maxIterationsExceededException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray52, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = complex83.log();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex87 = complex86.log();
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        org.apache.commons.math.complex.Complex complex89 = complex87.atan();
        org.apache.commons.math.complex.Complex complex90 = complex89.log();
        org.apache.commons.math.complex.Complex complex91 = complex90.tanh();
        org.apache.commons.math.complex.Complex complex92 = complex84.divide(complex91);
        org.apache.commons.math.complex.Complex complex93 = complex91.sqrt();
        org.apache.commons.math.complex.Complex complex94 = complex93.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex95 = laguerreSolver7.solve(complexArray52, complex93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (10) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = laguerreSolver7.solve(complexArray49, complex61);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        int int66 = laguerreSolver7.getMaximalIterationCount();
        double double67 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(97.00515450222221d);
        double double70 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0E-14d + "'", double67 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0E-15d + "'", double70 == 1.0E-15d);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount(0);
        laguerreSolver7.setFunctionValueAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.resetMaximalIterationCount();
        double double92 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex2 = complex1.asin();
        org.apache.commons.math.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex1.negate();
        org.apache.commons.math.complex.Complex complex5 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex23.tan();
        org.apache.commons.math.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.tan();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex31.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex27.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex21.add(complex27);
        org.apache.commons.math.complex.Complex complex42 = complex10.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex10.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex10.atan();
        org.apache.commons.math.complex.Complex complex46 = complex1.add(complex10);
        org.apache.commons.math.complex.Complex complex47 = complex1.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        double double8 = univariateRealFunction6.value((double) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction6);
        double double10 = laguerreSolver9.getAbsoluteAccuracy();
        laguerreSolver9.setMaximalIterationCount((int) (short) 100);
        double double13 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.resetRelativeAccuracy();
        double double17 = laguerreSolver9.solve(0.9173172759781081d, 115.29998991473416d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9173172759781081d + "'", double17 == 0.9173172759781081d);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException4);
        java.lang.Throwable[] throwableArray6 = functionEvaluationException4.getSuppressed();
        java.lang.Object[] objArray7 = functionEvaluationException4.getArguments();
        java.lang.Object[] objArray8 = functionEvaluationException4.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Maximal number of iterations (1) exceeded", objArray8);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[32.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[32.0]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[32.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[32.0]");
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        int int9 = polynomialFunction6.degree();
        double double11 = polynomialFunction6.value((double) 2);
        double double13 = polynomialFunction6.value(3.141592653589793d);
        double[] doubleArray14 = polynomialFunction6.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        double double9 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex8.asin();
        org.apache.commons.math.complex.Complex complex11 = complex8.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.0d) + "'", double9 == (-0.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double[] doubleArray37 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = polynomialFunction38.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        laguerreSolver42.setAbsoluteAccuracy((double) '#');
        laguerreSolver42.resetAbsoluteAccuracy();
        laguerreSolver42.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.apache.commons.math.complex.Complex complex58 = complex49.multiply(complex54);
        org.apache.commons.math.complex.Complex complex59 = complex54.sin();
        org.apache.commons.math.complex.Complex complex60 = complex54.tan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex54, complex61 };
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver42.solveAll(complexArray62, complex64);
        laguerreSolver42.setRelativeAccuracy((double) 1.0f);
        laguerreSolver42.resetFunctionValueAccuracy();
        double double73 = laguerreSolver42.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver42.setFunctionValueAccuracy((double) 1L);
        double[] doubleArray78 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction79 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray78);
        double double81 = polynomialFunction79.value((double) 10.0f);
        int int82 = polynomialFunction79.degree();
        double[] doubleArray83 = polynomialFunction79.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction84 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = laguerreSolver42.solveAll(doubleArray83, (double) 100.0f);
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver7.solveAll(doubleArray83, (double) (byte) -1);
        laguerreSolver7.setAbsoluteAccuracy(Double.NaN);
        laguerreSolver7.setMaximalIterationCount(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        java.lang.Object[] objArray11 = new java.lang.Object[] { convergenceException5, complex7, true };
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray13, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException16);
        java.lang.String str19 = convergenceException16.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1", (java.lang.Throwable) convergenceException22);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (97) exceeded");
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray7, throwable8);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        convergenceException9.addSuppressed((java.lang.Throwable) convergenceException22);
        java.lang.Throwable[] throwableArray24 = convergenceException22.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        java.lang.Object[] objArray45 = new java.lang.Object[] { convergenceException39, complex41, true };
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray47, throwable48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray45, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) functionEvaluationException52);
        double double55 = functionEvaluationException52.getArgument();
        java.lang.Object[] objArray56 = functionEvaluationException52.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.lang.Object[] objArray61 = functionEvaluationException60.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "", (java.lang.Throwable) functionEvaluationException60);
        double double63 = functionEvaluationException62.getArgument();
        double double64 = functionEvaluationException62.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray56, (java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) 8, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException65);
        java.lang.String str68 = convergenceException65.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[35.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 32.0d + "'", double63 == 32.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 32.0d + "'", double64 == 32.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!" + "'", str68, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        boolean boolean12 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex17.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.cosh();
        double double27 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.atan();
        org.apache.commons.math.complex.Complex complex30 = complex26.asin();
        org.apache.commons.math.complex.Complex complex31 = complex11.multiply(complex30);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-0.0d) + "'", double27 == (-0.0d));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        double double41 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double45 = laguerreSolver7.solve(2.718281828459045d, (double) '#');
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0E-6d + "'", double41 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.718281828459045d + "'", double45 == 2.718281828459045d);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        int int49 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.setRelativeAccuracy((double) 100L);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double40 = laguerreSolver7.solve((double) (-1.0f), (double) 52, (double) (short) 100);
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double[] doubleArray45 = polynomialFunction44.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver7.solveAll(doubleArray45, 0.0d);
        double double51 = laguerreSolver7.solve(97.0d, (double) 2);
        laguerreSolver7.setAbsoluteAccuracy((double) 20);
        double double54 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 97.0d + "'", double51 == 97.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.lang.Object[] objArray3 = functionEvaluationException2.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException2);
        java.lang.Throwable[] throwableArray5 = convergenceException4.getSuppressed();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[35.0]");
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray9, (java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str21 = functionEvaluationException20.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException20);
        java.lang.Object[] objArray23 = functionEvaluationException20.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("hi!", objArray23);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray31, throwable32);
        java.lang.Object[] objArray34 = convergenceException33.getArguments();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray34);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray34);
        java.lang.Throwable[] throwableArray38 = convergenceException37.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        java.lang.Object[] objArray52 = new java.lang.Object[] { convergenceException46, complex48, true };
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray54, throwable55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray52, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", objArray52);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException59 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray52);
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray61, throwable62);
        java.lang.Object[] objArray64 = convergenceException63.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray52, (java.lang.Throwable) convergenceException63);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("hi!", objArray52, throwable67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray23, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) 4, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1", objArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException(32.01560596553195d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (0) exceeded", objArray9, (java.lang.Throwable) functionEvaluationException71);
        double double73 = functionEvaluationException72.getArgument();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 32.01560596553195d + "'", double73 == 32.01560596553195d);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        double[] doubleArray7 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        laguerreSolver12.setAbsoluteAccuracy((double) '#');
        laguerreSolver12.resetAbsoluteAccuracy();
        laguerreSolver12.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24);
        org.apache.commons.math.complex.Complex complex29 = complex24.sin();
        org.apache.commons.math.complex.Complex complex30 = complex24.tan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex24, complex31 };
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver12.solveAll(complexArray32, complex34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "hi!", (java.lang.Object[]) complexArray32);
        java.lang.Throwable[] throwableArray40 = maxIterationsExceededException39.getSuppressed();
        int int41 = maxIterationsExceededException39.getMaxIterations();
        java.lang.Object[] objArray42 = maxIterationsExceededException39.getArguments();
        int int43 = maxIterationsExceededException39.getMaxIterations();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        boolean boolean12 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex16.tan();
        boolean boolean20 = complex14.equals((java.lang.Object) complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.negate();
        double double22 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = complex21.cos();
        org.apache.commons.math.complex.Complex complex24 = complex11.subtract(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.0d) + "'", double22 == (-0.0d));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getResult();
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        laguerreSolver7.setRelativeAccuracy((double) 10L);
        laguerreSolver7.resetMaximalIterationCount();
        double double92 = laguerreSolver7.solve((double) 52, (double) 0, 0.5403023058681398d);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setFunctionValueAccuracy(52.0d);
        laguerreSolver7.setAbsoluteAccuracy(4.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 52.0d + "'", double92 == 52.0d);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = laguerreSolver7.getPolynomialFunction();
        double double43 = laguerreSolver7.solve(70937.90732284723d, 0.0d, (-0.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 70937.90732284723d + "'", double43 == 70937.90732284723d);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex3.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean21 = complex20.isInfinite();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex22.tan();
        boolean boolean26 = complex20.equals((java.lang.Object) complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.tan();
        org.apache.commons.math.complex.Complex complex30 = complex19.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = complex34.pow(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex41.add(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex41.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.sin();
        org.apache.commons.math.complex.Complex complex49 = complex47.acos();
        org.apache.commons.math.complex.Complex complex50 = complex47.tanh();
        org.apache.commons.math.complex.Complex complex51 = complex47.negate();
        org.apache.commons.math.complex.Complex complex52 = complex51.atan();
        org.apache.commons.math.complex.Complex complex53 = complex51.tan();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex54.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        boolean boolean59 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = complex58.exp();
        org.apache.commons.math.complex.Complex complex61 = complex51.divide(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex63 = complex62.atan();
        boolean boolean64 = complex30.equals((java.lang.Object) complex62);
        boolean boolean65 = complex30.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray7 = functionEvaluationException6.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray7);
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray10, throwable11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        convergenceException12.addSuppressed((java.lang.Throwable) convergenceException25);
        java.lang.Throwable[] throwableArray27 = convergenceException25.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray7, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray7);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) '#');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex11.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex11.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex37.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex33.subtract(complex47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean50 = complex49.isInfinite();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex51.tan();
        boolean boolean55 = complex49.equals((java.lang.Object) complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.negate();
        double double57 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = complex56.cos();
        org.apache.commons.math.complex.Complex complex59 = complex33.subtract(complex56);
        org.apache.commons.math.complex.Complex complex60 = complex33.tan();
        org.apache.commons.math.complex.Complex complex61 = complex33.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-0.0d) + "'", double57 == (-0.0d));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex7.exp();
        org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        boolean boolean29 = complex27.isNaN();
        org.apache.commons.math.complex.Complex complex30 = complex11.pow(complex27);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException21);
        java.lang.String str23 = convergenceException21.toString();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!" + "'", str23, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        double double35 = laguerreSolver7.getFunctionValueAccuracy();
        int int36 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double[] doubleArray40 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction41.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        laguerreSolver45.setAbsoluteAccuracy((double) '#');
        laguerreSolver45.resetAbsoluteAccuracy();
        laguerreSolver45.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.atan();
        org.apache.commons.math.complex.Complex complex55 = complex52.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = complex57.log();
        org.apache.commons.math.complex.Complex complex61 = complex52.multiply(complex57);
        org.apache.commons.math.complex.Complex complex62 = complex57.sin();
        org.apache.commons.math.complex.Complex complex63 = complex57.tan();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex57, complex64 };
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = laguerreSolver45.solveAll(complexArray65, complex67);
        laguerreSolver45.resetRelativeAccuracy();
        double[] doubleArray73 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction74 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray73);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction75 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray73);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction76 = polynomialFunction75.derivative();
        double[] doubleArray77 = polynomialFunction75.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray79 = laguerreSolver45.solveAll(doubleArray77, 0.7853981633974483d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray77);
        double[] doubleArray81 = polynomialFunction80.getCoefficients();
        double[] doubleArray82 = polynomialFunction80.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(doubleArray82, (double) 10.0f);
        double double88 = laguerreSolver7.solve((double) 0L, (double) (short) 100, 2.2360679774997907d);
        double double89 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 52.0d + "'", double89 == 52.0d);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        java.lang.Object[] objArray11 = new java.lang.Object[] { convergenceException5, complex7, true };
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray13, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray11);
        int int19 = maxIterationsExceededException18.getMaxIterations();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException18);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray23 = convergenceException22.getSuppressed();
        java.lang.Object[] objArray24 = convergenceException22.getArguments();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        double[] doubleArray13 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        laguerreSolver18.setAbsoluteAccuracy((double) '#');
        laguerreSolver18.resetAbsoluteAccuracy();
        laguerreSolver18.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = complex30.log();
        org.apache.commons.math.complex.Complex complex34 = complex25.multiply(complex30);
        org.apache.commons.math.complex.Complex complex35 = complex30.sin();
        org.apache.commons.math.complex.Complex complex36 = complex30.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex30, complex37 };
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver18.solveAll(complexArray38, complex40);
        laguerreSolver18.resetRelativeAccuracy();
        double double44 = laguerreSolver18.getAbsoluteAccuracy();
        laguerreSolver18.resetFunctionValueAccuracy();
        boolean boolean46 = complex10.equals((java.lang.Object) laguerreSolver18);
        org.apache.commons.math.complex.Complex complex47 = complex10.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException13);
        mathException8.addSuppressed((java.lang.Throwable) functionEvaluationException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        java.lang.Object[] objArray17 = mathException8.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "org.apache.commons.math.ConvergenceException: ", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "hi!", (java.lang.Throwable) maxIterationsExceededException18);
        int int20 = maxIterationsExceededException18.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException18);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 100);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) -1);
        laguerreSolver7.setRelativeAccuracy(0.38535742648327137d);
        double double20 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 20);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        java.lang.String str2 = functionEvaluationException1.getPattern();
        java.lang.String str3 = functionEvaluationException1.getPattern();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Evaluation failed for argument = {0}" + "'", str2, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Evaluation failed for argument = {0}" + "'", str3, "Evaluation failed for argument = {0}");
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double36 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", throwable8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) 1, (java.lang.Throwable) convergenceException9);
        java.lang.String str11 = convergenceException9.getPattern();
        java.lang.Object[] objArray12 = convergenceException9.getArguments();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        java.lang.Object[] objArray23 = convergenceException22.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", objArray23, throwable25);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException(100, "org.apache.commons.math.MathException: hi!", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", objArray23, (java.lang.Throwable) mathException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray12, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray12);
        java.lang.Object[] objArray39 = maxIterationsExceededException38.getArguments();
        int int40 = maxIterationsExceededException38.getMaxIterations();
        int int41 = maxIterationsExceededException38.getMaxIterations();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        double[] doubleArray19 = new double[] { (byte) -1, (-0.0d), (byte) 0, 1.0E-15d, (byte) 10 };
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver7.solveAll(doubleArray19, 100.0d);
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(97.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 0);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 1);
        double double30 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy((-0.1838722778432016d));
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -0.0, 0.0, 1.0E-15, 10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0E-14d + "'", double30 == 1.0E-14d);
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray19 = polynomialFunction18.getCoefficients();
        double double21 = polynomialFunction18.value((-1.0232274785475506d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction4.derivative();
        double[] doubleArray15 = polynomialFunction4.getCoefficients();
        double[] doubleArray16 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        double[] doubleArray18 = polynomialFunction17.getCoefficients();
        double[] doubleArray19 = polynomialFunction17.getCoefficients();
        double double21 = polynomialFunction17.value(2.2360679774997907d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex11.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double12 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 32);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded");
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.negate();
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        org.apache.commons.math.complex.Complex complex20 = complex17.cos();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex5.add(complex11);
        boolean boolean13 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.cos();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex36.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex42.acos();
        org.apache.commons.math.complex.Complex complex45 = complex25.pow(complex42);
        org.apache.commons.math.complex.Complex complex46 = complex11.add(complex25);
        org.apache.commons.math.complex.Complex complex47 = complex25.cos();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex51.pow(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.cos();
        org.apache.commons.math.complex.Complex complex59 = complex58.atan();
        org.apache.commons.math.complex.Complex complex60 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        boolean boolean63 = complex47.equals((java.lang.Object) complex62);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        double double7 = polynomialFunction3.value((double) 100L);
        double double9 = polynomialFunction3.value((double) (short) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        double double13 = polynomialFunction10.value((double) 10L);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver14.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) ' ');
        int int7 = polynomialFunction4.degree();
        double double9 = polynomialFunction4.value((double) 97);
        int int10 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        double double14 = polynomialFunction4.value((-0.8394684411440628d));
        double[] doubleArray15 = polynomialFunction4.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean4 = complex1.isNaN();
        org.apache.commons.math.complex.Complex complex5 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex1.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.atan();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) (-1.0f), 20.0d);
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex10);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex5.pow(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.sin();
        org.apache.commons.math.complex.Complex complex20 = complex17.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        laguerreSolver7.resetFunctionValueAccuracy();
        double double22 = laguerreSolver7.solve((double) 1L, (double) (-1), 1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) ' ');
        double double26 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0E-6d + "'", double26 == 1.0E-6d);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double[] doubleArray4 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction6.polynomialDerivative();
        double double9 = polynomialFunction6.value((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = laguerreSolver12.solve(0.4430227241169225d, 0.9149994957367077d, 97.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [0.4430227241169225,0.9149994957367077]  Values: [1.0,1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray9, (java.lang.Throwable) functionEvaluationException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException15);
        java.lang.String str17 = mathException16.getPattern();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str17, "org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver10.resetFunctionValueAccuracy();
        laguerreSolver10.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = laguerreSolver10.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.38535742648327137d, (-0.5403023058681398d));
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        double double4 = complex3.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int35 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double39 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-6d + "'", double39 == 1.0E-6d);
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double double10 = polynomialFunction3.value(32.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction3.polynomialDerivative();
        int int12 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction3.derivative();
        double double16 = univariateRealFunction14.value((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        laguerreSolver17.resetAbsoluteAccuracy();
        laguerreSolver17.resetRelativeAccuracy();
        boolean boolean22 = complex5.equals((java.lang.Object) laguerreSolver17);
        double double23 = laguerreSolver17.getFunctionValueAccuracy();
        laguerreSolver17.setFunctionValueAccuracy((double) 1);
        laguerreSolver17.resetFunctionValueAccuracy();
        laguerreSolver17.setRelativeAccuracy((double) 0L);
        laguerreSolver17.resetAbsoluteAccuracy();
        double double33 = laguerreSolver17.solve(1.1752011936438014d, 0.38535742648327137d, (double) (short) 1);
        double double37 = laguerreSolver17.solve(100.0d, (double) 97, 1.0E-15d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.1752011936438014d + "'", double33 == 1.1752011936438014d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException20.getSuppressed();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 35, (java.lang.Throwable) functionEvaluationException20);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetFunctionValueAccuracy();
        double double14 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException3 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: ", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 52, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver19.getPolynomialFunction();
        double[] doubleArray26 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction27.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        laguerreSolver31.setAbsoluteAccuracy((double) '#');
        laguerreSolver31.resetAbsoluteAccuracy();
        laguerreSolver31.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        org.apache.commons.math.complex.Complex complex49 = complex43.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex43, complex50 };
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex52.log();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = laguerreSolver31.solveAll(complexArray51, complex53);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        org.apache.commons.math.complex.Complex complex64 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = complex59.pow(complex61);
        org.apache.commons.math.complex.Complex complex66 = laguerreSolver19.solve(complexArray51, complex59);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex68.tan();
        org.apache.commons.math.complex.Complex complex72 = complex67.subtract(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.cos();
        boolean boolean74 = complex72.isInfinite();
        org.apache.commons.math.complex.Complex complex75 = complex72.cos();
        org.apache.commons.math.complex.Complex complex76 = complex75.tan();
        org.apache.commons.math.complex.Complex complex77 = complex76.tanh();
        org.apache.commons.math.complex.Complex[] complexArray78 = laguerreSolver7.solveAll(complexArray51, complex77);
        double double79 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0E-15d + "'", double79 == 1.0E-15d);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        double double8 = polynomialFunction4.value((double) (byte) 100);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction4.derivative();
        double double11 = polynomialFunction4.value(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((-0.8394684411440628d));
        double[] doubleArray20 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double24 = polynomialFunction22.value((double) ' ');
        double[] doubleArray25 = polynomialFunction22.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver7.solveAll(doubleArray25, 10.15486522864652d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0]");
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) (-1L));
        laguerreSolver7.setFunctionValueAccuracy((-1.0d));
        double double44 = laguerreSolver7.solve((double) 'a', (double) 1.0f);
        double double45 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(10.15486522864652d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 97.0d + "'", double44 == 97.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.solve((double) 0.0f, (double) (short) -1, (double) 'a');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction14.derivative();
        double[] doubleArray16 = polynomialFunction14.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy((double) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double20 = laguerreSolver7.solve((double) 0.0f, 1.0E-15d);
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        double double23 = laguerreSolver7.getAbsoluteAccuracy();
        int int24 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.1752011936438014d + "'", double23 == 1.1752011936438014d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        double double19 = laguerreSolver7.solve(1.0E-6d, 10.0d, (double) (-1.0f));
        laguerreSolver7.setMaximalIterationCount(2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray23 = polynomialFunction22.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(1.0E-14d);
        int int17 = laguerreSolver7.getMaximalIterationCount();
        double double20 = laguerreSolver7.solve(10.0d, (double) 4);
        laguerreSolver7.setFunctionValueAccuracy((-3.141592653589793d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 10);
        laguerreSolver7.setRelativeAccuracy((double) 'a');
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex19.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math.complex.Complex complex31 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex35.subtract(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex31.add(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex25.add(complex31);
        org.apache.commons.math.complex.Complex complex46 = complex14.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.cos();
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex48.tan();
        org.apache.commons.math.complex.Complex complex50 = complex7.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.negate();
        boolean boolean52 = complex49.isNaN();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex59.tan();
        org.apache.commons.math.complex.Complex complex63 = complex58.subtract(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.cos();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex68.add(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex72.conjugate();
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex74.tanh();
        org.apache.commons.math.complex.Complex complex77 = complex63.multiply(complex74);
        org.apache.commons.math.complex.Complex complex78 = complex77.asin();
        org.apache.commons.math.complex.Complex complex79 = complex77.tanh();
        org.apache.commons.math.complex.Complex complex80 = complex56.add(complex79);
        double double81 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex82 = complex56.tan();
        org.apache.commons.math.complex.Complex complex83 = complex56.sqrt();
        double double84 = complex56.getReal();
        org.apache.commons.math.complex.Complex complex85 = complex49.divide(complex56);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(35.0d, (java.lang.Throwable) functionEvaluationException9);
        java.lang.Throwable[] throwableArray12 = functionEvaluationException11.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        java.lang.Object[] objArray26 = new java.lang.Object[] { convergenceException20, complex22, true };
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray26, (java.lang.Throwable) convergenceException30);
        convergenceException18.addSuppressed((java.lang.Throwable) convergenceException31);
        java.lang.Throwable[] throwableArray33 = convergenceException31.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) functionEvaluationException41);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        java.lang.Object[] objArray54 = new java.lang.Object[] { convergenceException48, complex50, true };
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray56, throwable57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray54, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) functionEvaluationException61);
        double double64 = functionEvaluationException61.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(97.00515450222221d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.tan();
        org.apache.commons.math.complex.Complex complex77 = complex74.exp();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex80.log();
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex83 = complex81.tan();
        org.apache.commons.math.complex.Complex complex84 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex85.log();
        org.apache.commons.math.complex.Complex complex87 = complex86.sqrt();
        java.lang.Object[] objArray88 = new java.lang.Object[] { complex77, (short) 10, mathException79, complex84, complex86 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException89 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "", objArray88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.FunctionEvaluationException: hi!", objArray88);
        double double91 = functionEvaluationException90.getArgument();
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException90);
        double double94 = functionEvaluationException90.getArgument();
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1", (java.lang.Throwable) functionEvaluationException90);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-0.0d) + "'", double91 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-0.0d) + "'", double94 == (-0.0d));
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex10.exp();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) -1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray9, (java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException14);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        double double7 = polynomialFunction3.value((double) 100L);
        double double9 = polynomialFunction3.value((double) 100L);
        int int10 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction3.polynomialDerivative();
        int int14 = polynomialFunction3.degree();
        int int15 = polynomialFunction3.degree();
        double double17 = polynomialFunction3.value((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex8.negate();
        org.apache.commons.math.complex.Complex complex13 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        boolean boolean21 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex22 = complex19.cos();
        org.apache.commons.math.complex.Complex complex23 = complex13.subtract(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex23.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        double[] doubleArray6 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver11.setAbsoluteAccuracy((double) '#');
        laguerreSolver11.resetAbsoluteAccuracy();
        laguerreSolver11.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex18.log();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = complex18.multiply(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex23.sin();
        org.apache.commons.math.complex.Complex complex29 = complex23.tan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex23, complex30 };
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver11.solveAll(complexArray31, complex33);
        laguerreSolver11.resetRelativeAccuracy();
        double double37 = laguerreSolver11.getAbsoluteAccuracy();
        double[] doubleArray40 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction41.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        laguerreSolver45.setAbsoluteAccuracy((double) '#');
        laguerreSolver45.resetAbsoluteAccuracy();
        laguerreSolver45.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.atan();
        org.apache.commons.math.complex.Complex complex55 = complex52.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = complex57.log();
        org.apache.commons.math.complex.Complex complex61 = complex52.multiply(complex57);
        org.apache.commons.math.complex.Complex complex62 = complex57.sin();
        org.apache.commons.math.complex.Complex complex63 = complex57.tan();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex57, complex64 };
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = laguerreSolver45.solveAll(complexArray65, complex67);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex77.add(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex73.subtract(complex84);
        org.apache.commons.math.complex.Complex[] complexArray86 = laguerreSolver11.solveAll(complexArray65, complex84);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException87 = new org.apache.commons.math.MaxIterationsExceededException((int) '4', "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(97.0d, (java.lang.Throwable) convergenceException88);
        java.lang.String str90 = functionEvaluationException89.toString();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: " + "'", str90, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        int int33 = laguerreSolver7.getIterationCount();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        double double35 = laguerreSolver7.getFunctionValueAccuracy();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.0E-14d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) (byte) 1, (double) 'a');
        org.apache.commons.math.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex17.sqrt();
        boolean boolean21 = complex15.equals((java.lang.Object) complex17);
        boolean boolean22 = complex10.equals((java.lang.Object) boolean21);
        org.apache.commons.math.complex.Complex complex23 = complex10.cos();
        org.apache.commons.math.complex.Complex complex24 = complex10.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        double[] doubleArray19 = new double[] { (byte) -1, (-0.0d), (byte) 0, 1.0E-15d, (byte) 10 };
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver7.solveAll(doubleArray19, 100.0d);
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(97.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 0);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double31 = laguerreSolver7.solve(0.5131355633916488d, (double) (byte) 100, 97.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -0.0, 0.0, 1.0E-15, 10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.5131355633916488d + "'", double31 == 0.5131355633916488d);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int40 = laguerreSolver7.getMaximalIterationCount();
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction44.polynomialDerivative();
        double double49 = polynomialFunction44.value((double) (byte) 100);
        double[] doubleArray50 = polynomialFunction44.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver7.solveAll(doubleArray50, (double) ' ');
        int int53 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setRelativeAccuracy(Double.NaN);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction34.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction36 = polynomialFunction34.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(univariateRealFunction36);
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        org.apache.commons.math.complex.Complex complex59 = complex43.negate();
        org.apache.commons.math.complex.Complex complex60 = complex43.acos();
        org.apache.commons.math.complex.Complex complex61 = complex43.acos();
        org.apache.commons.math.complex.Complex complex62 = complex43.acos();
        org.apache.commons.math.complex.Complex complex63 = complex43.asin();
        org.apache.commons.math.complex.Complex complex64 = complex43.negate();
        org.apache.commons.math.complex.Complex complex65 = complex43.tanh();
        org.apache.commons.math.complex.Complex complex66 = complex65.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        java.lang.Object[] objArray10 = new java.lang.Object[] { convergenceException4, complex6, true };
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray10);
        int int18 = maxIterationsExceededException17.getMaxIterations();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException17);
        java.lang.Object[] objArray20 = maxIterationsExceededException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException17);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(objArray20);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray9, throwable10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        java.lang.Throwable[] throwableArray13 = convergenceException11.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str20 = functionEvaluationException19.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException19);
        java.lang.Object[] objArray22 = functionEvaluationException19.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("hi!", objArray22);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray30, throwable31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException35 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray33);
        java.lang.Throwable[] throwableArray37 = convergenceException36.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        java.lang.Object[] objArray51 = new java.lang.Object[] { convergenceException45, complex47, true };
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray53, throwable54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray51, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException58 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray51);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray60, throwable61);
        java.lang.Object[] objArray63 = convergenceException62.getArguments();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray51, (java.lang.Throwable) convergenceException62);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("hi!", objArray51, throwable66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray37, (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("", objArray22, (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (97) exceeded", (java.lang.Throwable) functionEvaluationException72);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-0.0d));
        double double92 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-0.0d) + "'", double92 == (-0.0d));
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Throwable[] throwableArray3 = functionEvaluationException2.getSuppressed();
        double double4 = functionEvaluationException2.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        laguerreSolver13.setMaximalIterationCount((int) (short) -1);
        int int16 = laguerreSolver13.getMaximalIterationCount();
        double double17 = laguerreSolver13.getRelativeAccuracy();
        double double18 = laguerreSolver13.getFunctionValueAccuracy();
        double double19 = laguerreSolver13.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-15d + "'", double19 == 1.0E-15d);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double20 = laguerreSolver7.solve(97.0d, (double) (byte) 1);
        laguerreSolver7.setAbsoluteAccuracy((double) 0L);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 97.0d + "'", double20 == 97.0d);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray7 = functionEvaluationException6.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray7);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        java.lang.Object[] objArray18 = convergenceException17.getArguments();
        java.lang.Throwable[] throwableArray19 = convergenceException17.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException20.getSuppressed();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex27.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.conjugate();
        java.lang.Object[] objArray34 = new java.lang.Object[] { complex33 };
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        java.lang.Object[] objArray43 = new java.lang.Object[] { convergenceException37, complex39, true };
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray45, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", objArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray34, (java.lang.Throwable) mathException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException50);
        java.lang.String str52 = functionEvaluationException50.getPattern();
        java.lang.Throwable[] throwableArray53 = functionEvaluationException50.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray7, (java.lang.Throwable) mathException55);
        java.lang.String str57 = mathException55.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str52, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.apache.commons.math.MathException: Maximal number of iterations ({0}) exceeded" + "'", str57, "org.apache.commons.math.MathException: Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray11 = functionEvaluationException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        java.lang.Object[] objArray22 = new java.lang.Object[] { convergenceException16, complex18, true };
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray24, throwable25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray22, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray22);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray22);
        int int30 = maxIterationsExceededException29.getMaxIterations();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) mathException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(70937.90732284723d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 8", (java.lang.Object[]) throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        laguerreSolver19.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex31.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex31, complex38 };
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver19.solveAll(complexArray39, complex41);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = complex47.pow(complex49);
        org.apache.commons.math.complex.Complex complex54 = laguerreSolver7.solve(complexArray39, complex47);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.atan();
        org.apache.commons.math.complex.Complex complex63 = complex60.log();
        org.apache.commons.math.complex.Complex complex64 = complex58.pow(complex60);
        org.apache.commons.math.complex.Complex complex65 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex67.atan();
        org.apache.commons.math.complex.Complex complex70 = complex65.add(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = complex47.add(complex70);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.atan();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex76.add(complex77);
        org.apache.commons.math.complex.Complex complex81 = complex76.sqrt1z();
        org.apache.commons.math.complex.Complex complex82 = complex81.asin();
        org.apache.commons.math.complex.Complex complex83 = complex47.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex83.cos();
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex84.acos();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        double double44 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 100.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double49 = laguerreSolver7.getAbsoluteAccuracy();
        double double50 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0E-6d + "'", double49 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0E-15d + "'", double50 == 1.0E-15d);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean5 = complex1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) (short) 10, (double) (short) 1);
        org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        boolean boolean13 = complex12.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        double double33 = laguerreSolver7.getResult();
        laguerreSolver7.resetRelativeAccuracy();
        double double38 = laguerreSolver7.solve(1.2182829050172777d, (double) (-1.0f), 1.5706900455763888d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.2182829050172777d + "'", double38 == 1.2182829050172777d);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, "hi!", objArray8);
        java.lang.Throwable[] throwableArray11 = functionEvaluationException10.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(1, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray11);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        int int7 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction4.derivative();
        int int10 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver11.resetMaximalIterationCount();
        laguerreSolver11.setFunctionValueAccuracy((double) (short) 10);
        int int15 = laguerreSolver11.getMaximalIterationCount();
        double double16 = laguerreSolver11.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-6d + "'", double16 == 1.0E-6d);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(0.5131355633916488d);
        double double2 = functionEvaluationException1.getArgument();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.5131355633916488d + "'", double2 == 0.5131355633916488d);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        double double85 = laguerreSolver7.getResult();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double87 = laguerreSolver7.getAbsoluteAccuracy();
        int int88 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double double93 = laguerreSolver7.solve((double) 'a', (double) (short) 0, 2.4785912770698393d);
        double double94 = laguerreSolver7.getResult();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0E-6d + "'", double87 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 97.0d + "'", double93 == 97.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        boolean boolean7 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex5.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        double double19 = laguerreSolver7.solve((double) (-1.0f), 0.761594155955765d, 0.38535742648327137d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) ' ');
        int int7 = polynomialFunction4.degree();
        double double9 = polynomialFunction4.value((double) 97);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction4.derivative();
        double double13 = polynomialFunction4.value(1.2182829050172777d);
        double double15 = polynomialFunction4.value((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.2182829050172777d, 100.07996802557444d);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.negate();
        org.apache.commons.math.complex.Complex complex2 = complex1.log();
        boolean boolean3 = complex1.isNaN();
        boolean boolean4 = complex1.isNaN();
        org.apache.commons.math.complex.Complex complex5 = complex1.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.negate();
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex18.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException2 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException2);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((-0.8394684411440628d), (java.lang.Throwable) maxIterationsExceededException2);
        int int5 = maxIterationsExceededException2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        int int12 = polynomialFunction11.degree();
        double double14 = polynomialFunction11.value((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.tan();
        boolean boolean25 = complex19.equals((java.lang.Object) complex24);
        boolean boolean26 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex32.cos();
        org.apache.commons.math.complex.Complex complex38 = complex32.atan();
        org.apache.commons.math.complex.Complex complex39 = complex32.tan();
        org.apache.commons.math.complex.Complex complex40 = complex24.add(complex32);
        org.apache.commons.math.complex.Complex complex41 = complex32.sin();
        double double42 = complex32.getReal();
        org.apache.commons.math.complex.Complex complex43 = complex18.add(complex32);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.atan();
        org.apache.commons.math.complex.Complex complex49 = complex48.atan();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = complex45.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex18.add(complex45);
        boolean boolean54 = complex45.isNaN();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        org.apache.commons.math.complex.Complex complex64 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = complex56.multiply(complex61);
        org.apache.commons.math.complex.Complex complex66 = complex61.sin();
        boolean boolean67 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex66.tan();
        org.apache.commons.math.complex.Complex complex69 = complex66.cos();
        org.apache.commons.math.complex.Complex complex70 = complex66.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex45.divide(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex45.atan();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex73.atan();
        org.apache.commons.math.complex.Complex complex75 = complex74.atan();
        org.apache.commons.math.complex.Complex complex76 = complex75.sin();
        org.apache.commons.math.complex.Complex complex77 = complex75.cos();
        org.apache.commons.math.complex.Complex complex78 = complex77.cos();
        org.apache.commons.math.complex.Complex complex79 = complex72.divide(complex77);
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.atan();
        boolean boolean85 = complex81.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex86 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex87 = complex81.asin();
        org.apache.commons.math.complex.Complex complex88 = complex81.cos();
        boolean boolean89 = complex81.isInfinite();
        org.apache.commons.math.complex.Complex complex90 = complex79.pow(complex81);
        org.apache.commons.math.complex.Complex complex91 = complex79.atan();
        org.apache.commons.math.complex.Complex complex92 = complex79.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex10.tan();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex10);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.atan();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex24.tan();
        org.apache.commons.math.complex.Complex complex28 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex23.pow(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        boolean boolean38 = complex32.equals((java.lang.Object) complex37);
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex45.cos();
        org.apache.commons.math.complex.Complex complex51 = complex45.atan();
        org.apache.commons.math.complex.Complex complex52 = complex45.tan();
        org.apache.commons.math.complex.Complex complex53 = complex37.add(complex45);
        org.apache.commons.math.complex.Complex complex54 = complex45.sin();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex58.add(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex65 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex54.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex54.sqrt1z();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) (byte) 1, (double) 'a');
        org.apache.commons.math.complex.Complex complex71 = complex67.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex31.add(complex70);
        boolean boolean73 = complex10.equals((java.lang.Object) complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.negate();
        org.apache.commons.math.complex.Complex complex75 = complex70.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        int int39 = laguerreSolver7.getMaximalIterationCount();
        int int40 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        int int42 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) '#');
        double double41 = laguerreSolver7.getResult();
        int int42 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double12 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double16 = laguerreSolver7.solve(0.6679493967289549d, (-0.73669189358273d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver7.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-6d + "'", double12 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6679493967289549d + "'", double16 == 0.6679493967289549d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (byte) 10);
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction6.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        laguerreSolver13.setMaximalIterationCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction12);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        laguerreSolver7.resetFunctionValueAccuracy();
        double double22 = laguerreSolver7.solve((double) 1L, (double) (-1), 1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((-1));
        laguerreSolver7.setAbsoluteAccuracy(100.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        int int30 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(Double.NaN);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(1.2182829050172777d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException6);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = laguerreSolver7.getPolynomialFunction();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-14d + "'", double36 == 1.0E-14d);
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        int int11 = laguerreSolver10.getMaximalIterationCount();
        laguerreSolver10.resetFunctionValueAccuracy();
        double[] doubleArray22 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        double double25 = polynomialFunction23.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = polynomialFunction23.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        laguerreSolver27.setAbsoluteAccuracy((double) '#');
        laguerreSolver27.resetAbsoluteAccuracy();
        laguerreSolver27.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = complex34.multiply(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex39.sin();
        org.apache.commons.math.complex.Complex complex45 = complex39.tan();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex39, complex46 };
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver27.solveAll(complexArray47, complex49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException54 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean57 = complex56.isInfinite();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex58.tan();
        boolean boolean62 = complex56.equals((java.lang.Object) complex61);
        boolean boolean63 = complex61.isNaN();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        org.apache.commons.math.complex.Complex complex72 = complex69.log();
        org.apache.commons.math.complex.Complex complex73 = complex67.pow(complex69);
        org.apache.commons.math.complex.Complex complex74 = complex69.cos();
        org.apache.commons.math.complex.Complex complex75 = complex69.atan();
        org.apache.commons.math.complex.Complex complex76 = complex69.tan();
        org.apache.commons.math.complex.Complex complex77 = complex61.add(complex69);
        org.apache.commons.math.complex.Complex complex78 = complex69.sin();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex79.log();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex83 = complex81.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex84.multiply(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex82.add(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex86.sinh();
        org.apache.commons.math.complex.Complex complex89 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex90 = complex78.multiply(complex89);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver10.solveAll(complexArray47, complex90);
        double double92 = laguerreSolver10.getRelativeAccuracy();
        double double93 = laguerreSolver10.getResult();
        int int94 = laguerreSolver10.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0E-14d + "'", double92 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.557407724654902d, 3.9518054509189455d);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex8 = complex4.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex4.sqrt1z();
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex15.tan();
        org.apache.commons.math.complex.Complex complex24 = complex10.add(complex15);
        boolean boolean25 = complex15.isNaN();
        double double26 = complex15.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException8);
        java.lang.String str11 = mathException10.getPattern();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!" + "'", str11, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 20, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!");
        double double3 = functionEvaluationException2.getArgument();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 20.0d + "'", double3 == 20.0d);
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        double double20 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        double double5 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex23.tan();
        org.apache.commons.math.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.tan();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex31.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex27.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex21.add(complex27);
        org.apache.commons.math.complex.Complex complex42 = complex10.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        double[] doubleArray46 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        double double49 = polynomialFunction47.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = polynomialFunction47.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver51 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction50);
        laguerreSolver51.setAbsoluteAccuracy((double) '#');
        laguerreSolver51.resetAbsoluteAccuracy();
        laguerreSolver51.resetRelativeAccuracy();
        laguerreSolver51.setRelativeAccuracy(0.0d);
        boolean boolean58 = complex42.equals((java.lang.Object) 0.0d);
        org.apache.commons.math.complex.Complex complex59 = complex42.asin();
        org.apache.commons.math.complex.Complex complex60 = complex59.asin();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex61.log();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex59.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex67.log();
        org.apache.commons.math.complex.Complex complex70 = complex4.multiply(complex67);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex72.atan();
        org.apache.commons.math.complex.Complex complex75 = complex72.log();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.atan();
        org.apache.commons.math.complex.Complex complex80 = complex77.log();
        org.apache.commons.math.complex.Complex complex81 = complex72.multiply(complex77);
        org.apache.commons.math.complex.Complex complex82 = complex77.sin();
        boolean boolean83 = complex82.isInfinite();
        org.apache.commons.math.complex.Complex complex84 = complex82.exp();
        org.apache.commons.math.complex.Complex complex85 = complex82.cos();
        org.apache.commons.math.complex.Complex complex86 = complex85.asin();
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex88 = complex87.log();
        org.apache.commons.math.complex.Complex complex89 = complex88.sqrt();
        org.apache.commons.math.complex.Complex complex90 = complex88.sqrt();
        org.apache.commons.math.complex.Complex complex91 = complex88.conjugate();
        org.apache.commons.math.complex.Complex complex92 = complex88.conjugate();
        org.apache.commons.math.complex.Complex complex93 = complex85.add(complex88);
        org.apache.commons.math.complex.Complex complex94 = complex70.multiply(complex85);
        org.apache.commons.math.complex.Complex complex95 = complex94.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        laguerreSolver36.resetAbsoluteAccuracy();
        laguerreSolver36.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex48);
        org.apache.commons.math.complex.Complex complex53 = complex48.sin();
        org.apache.commons.math.complex.Complex complex54 = complex48.tan();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex48, complex55 };
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver36.solveAll(complexArray56, complex58);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex65.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex66.log();
        org.apache.commons.math.complex.Complex complex70 = complex64.pow(complex66);
        org.apache.commons.math.complex.Complex complex71 = laguerreSolver24.solve(complexArray56, complex64);
        org.apache.commons.math.complex.Complex complex72 = complex64.cos();
        org.apache.commons.math.complex.Complex complex73 = complex16.divide(complex64);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex75.atan();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex78.log();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex75.subtract(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex16.subtract(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.tan();
        org.apache.commons.math.complex.Complex complex86 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex83.sqrt();
        org.apache.commons.math.complex.Complex complex88 = complex87.negate();
        org.apache.commons.math.complex.Complex complex89 = complex87.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        double double20 = laguerreSolver7.solve(Double.POSITIVE_INFINITY, (double) (-1), 0.0d);
        double double23 = laguerreSolver7.solve((double) (-1.0f), (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) ' ');
        int int7 = polynomialFunction4.degree();
        double double9 = polynomialFunction4.value((double) 97);
        int int10 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver11.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        int int85 = laguerreSolver7.getMaximalIterationCount();
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 0);
        laguerreSolver7.setMaximalIterationCount((int) '#');
        laguerreSolver7.setMaximalIterationCount((int) (short) 0);
        double double93 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0E-6d + "'", double93 == 1.0E-6d);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        double double10 = complex7.abs();
        org.apache.commons.math.complex.Complex complex11 = complex7.negate();
        org.apache.commons.math.complex.Complex complex12 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex24.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex31.asin();
        org.apache.commons.math.complex.Complex complex34 = complex12.multiply(complex31);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex35.tan();
        org.apache.commons.math.complex.Complex complex38 = complex34.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        double double43 = complex42.getImaginary();
        double double44 = complex42.getReal();
        org.apache.commons.math.complex.Complex complex45 = complex37.subtract(complex42);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        java.lang.Object obj12 = null;
        boolean boolean13 = complex10.equals(obj12);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        double double10 = polynomialFunction4.value((double) 1L);
        double[] doubleArray11 = polynomialFunction4.getCoefficients();
        double double13 = polynomialFunction4.value((double) ' ');
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction4.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray14);
        int int22 = maxIterationsExceededException21.getMaxIterations();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException21);
        java.lang.Object[] objArray25 = convergenceException24.getArguments();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException27);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double91 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        int int93 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0E-14d + "'", double91 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        int int21 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException22);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        java.lang.Object[] objArray35 = new java.lang.Object[] { convergenceException29, complex31, true };
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray35, (java.lang.Throwable) convergenceException39);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException40);
        java.lang.Throwable[] throwableArray42 = convergenceException40.getSuppressed();
        mathException22.addSuppressed((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException40);
        java.lang.String str45 = functionEvaluationException44.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(35.0d, (java.lang.Throwable) functionEvaluationException49);
        double double52 = functionEvaluationException51.getArgument();
        functionEvaluationException44.addSuppressed((java.lang.Throwable) functionEvaluationException51);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str45, "org.apache.commons.math.ConvergenceException: Convergence failed");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray20);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray20, (java.lang.Throwable) convergenceException31);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray20, throwable35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        org.apache.commons.math.complex.Complex complex49 = complex43.tan();
        java.lang.Object[] objArray50 = new java.lang.Object[] { throwable35, complex49 };
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        java.lang.Object[] objArray62 = new java.lang.Object[] { convergenceException56, complex58, true };
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray64, throwable65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("", objArray62, (java.lang.Throwable) convergenceException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("", objArray62);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException69 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException70);
        java.lang.String str72 = mathException71.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray50, (java.lang.Throwable) mathException71);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) convergenceException76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray50, (java.lang.Throwable) convergenceException76);
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("", objArray84, throwable85);
        java.lang.Object[] objArray87 = convergenceException86.getArguments();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", objArray87);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException89 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray87);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "", objArray50, (java.lang.Throwable) convergenceException90);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException92 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException92);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.getResult();
        laguerreSolver7.setMaximalIterationCount((int) (short) 1);
        laguerreSolver7.setAbsoluteAccuracy(3.9518054509189455d);
        double double44 = laguerreSolver7.solve(7.0001840869445076d, (double) '#');
        laguerreSolver7.resetMaximalIterationCount();
        double double46 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.0001840869445076d + "'", double44 == 7.0001840869445076d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray7, throwable8);
        java.lang.Object[] objArray10 = convergenceException9.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray10, (java.lang.Throwable) maxIterationsExceededException13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!");
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray10, (java.lang.Throwable) mathException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(100.0d, (java.lang.Throwable) mathException17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, (java.lang.Throwable) functionEvaluationException19);
        java.lang.String str21 = functionEvaluationException20.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: " + "'", str21, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(1.0E-14d);
        java.lang.Throwable[] throwableArray7 = functionEvaluationException6.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException8 = new org.apache.commons.math.MaxIterationsExceededException(1, "", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray19 = functionEvaluationException18.getArguments();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        java.lang.Object[] objArray30 = new java.lang.Object[] { convergenceException24, complex26, true };
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray32, throwable33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray30, (java.lang.Throwable) convergenceException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", objArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", objArray19, (java.lang.Throwable) mathException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException40 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray19, (java.lang.Throwable) maxIterationsExceededException40);
        int int42 = maxIterationsExceededException40.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "Evaluation failed for argument = 2.718", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) maxIterationsExceededException40);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException", (java.lang.Object[]) throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException23);
        java.lang.Throwable[] throwableArray25 = functionEvaluationException24.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray25);
        java.lang.Object[] objArray27 = functionEvaluationException26.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 2, "Evaluation failed for argument = {0}", objArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.MaxIterationsExceededException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", objArray27, (java.lang.Throwable) mathException36);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        boolean boolean11 = complex6.equals((java.lang.Object) 10.0f);
        org.apache.commons.math.complex.Complex complex12 = complex6.cos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex12.subtract(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex31.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        boolean boolean40 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex44.add(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex44.sqrt1z();
        org.apache.commons.math.complex.Complex complex50 = complex44.cos();
        org.apache.commons.math.complex.Complex complex51 = complex44.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex44.tanh();
        boolean boolean53 = complex44.isNaN();
        org.apache.commons.math.complex.Complex complex54 = complex37.multiply(complex44);
        org.apache.commons.math.complex.Complex complex55 = complex44.tanh();
        org.apache.commons.math.complex.Complex complex56 = complex55.exp();
        org.apache.commons.math.complex.Complex complex57 = complex55.cos();
        org.apache.commons.math.complex.Complex complex58 = complex20.subtract(complex57);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex0.multiply(complex7);
        double double12 = complex11.abs();
        double double13 = complex11.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double[] doubleArray9 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        double double13 = polynomialFunction11.value((double) 32);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray16);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        java.lang.Object[] objArray28 = convergenceException27.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray16, (java.lang.Throwable) convergenceException27);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray16, throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray16, (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException35);
        java.lang.Object[] objArray39 = convergenceException38.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        java.lang.Object[] objArray51 = new java.lang.Object[] { convergenceException45, complex47, true };
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray53, throwable54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray51, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException58 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException59);
        double double61 = functionEvaluationException59.getArgument();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray39, (java.lang.Throwable) functionEvaluationException59);
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("", objArray65, throwable66);
        java.lang.Object[] objArray68 = convergenceException67.getArguments();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", objArray68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        mathException62.addSuppressed((java.lang.Throwable) mathException71);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double12 = laguerreSolver7.solve((double) 100, (double) 97, 0.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve(0.0d, 0.5574077246549021d, 100.07996802557444d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException25);
        double double27 = functionEvaluationException26.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 10, (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray15, (java.lang.Throwable) functionEvaluationException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(97.00515450222221d, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", objArray15);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray15);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        double double33 = laguerreSolver7.getResult();
        int int34 = laguerreSolver7.getIterationCount();
        double double35 = laguerreSolver7.getFunctionValueAccuracy();
        java.lang.Class<?> wildcardClass36 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex4.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex42.pow(complex44);
        double[] doubleArray51 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray51);
        double double54 = polynomialFunction52.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = polynomialFunction52.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver56 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction55);
        laguerreSolver56.setAbsoluteAccuracy((double) '#');
        laguerreSolver56.resetAbsoluteAccuracy();
        laguerreSolver56.resetRelativeAccuracy();
        boolean boolean61 = complex44.equals((java.lang.Object) laguerreSolver56);
        double double62 = laguerreSolver56.getFunctionValueAccuracy();
        laguerreSolver56.setFunctionValueAccuracy((double) 1);
        boolean boolean65 = complex37.equals((java.lang.Object) laguerreSolver56);
        org.apache.commons.math.complex.Complex complex66 = complex37.sin();
        org.apache.commons.math.complex.Complex complex67 = complex37.tan();
        org.apache.commons.math.complex.Complex complex68 = complex67.sin();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.atan();
        org.apache.commons.math.complex.Complex complex73 = complex70.log();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex75.atan();
        org.apache.commons.math.complex.Complex complex78 = complex75.log();
        org.apache.commons.math.complex.Complex complex79 = complex70.multiply(complex75);
        org.apache.commons.math.complex.Complex complex80 = complex75.sin();
        org.apache.commons.math.complex.Complex complex81 = complex75.tan();
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex83 = complex81.acos();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = complex84.log();
        org.apache.commons.math.complex.Complex complex86 = complex85.sqrt();
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex88 = complex86.multiply(complex87);
        org.apache.commons.math.complex.Complex complex89 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex90 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex91 = complex89.multiply(complex90);
        org.apache.commons.math.complex.Complex complex92 = complex87.add(complex91);
        org.apache.commons.math.complex.Complex complex93 = complex91.conjugate();
        org.apache.commons.math.complex.Complex complex94 = complex93.cosh();
        org.apache.commons.math.complex.Complex complex95 = complex93.tanh();
        org.apache.commons.math.complex.Complex complex96 = complex83.divide(complex93);
        org.apache.commons.math.complex.Complex complex97 = complex93.sin();
        double double98 = complex93.getImaginary();
        org.apache.commons.math.complex.Complex complex99 = complex67.subtract(complex93);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0E-15d + "'", double62 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + (-0.0d) + "'", double98 == (-0.0d));
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        laguerreSolver7.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) 1, 10.0d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean4 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        boolean boolean9 = complex3.equals((java.lang.Object) complex8);
        boolean boolean10 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex16.cos();
        org.apache.commons.math.complex.Complex complex22 = complex16.atan();
        org.apache.commons.math.complex.Complex complex23 = complex16.tan();
        org.apache.commons.math.complex.Complex complex24 = complex8.add(complex16);
        org.apache.commons.math.complex.Complex complex25 = complex16.sin();
        org.apache.commons.math.complex.Complex complex26 = complex2.divide(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex26.tan();
        org.apache.commons.math.complex.Complex complex28 = complex26.sinh();
        double double29 = complex26.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str8 = functionEvaluationException7.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException();
        convergenceException9.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray12 = mathException10.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(97.00515450222221d, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(1.4142135623730951d, (java.lang.Throwable) functionEvaluationException15);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(2.4785912770698393d, (double) (short) 10);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        laguerreSolver7.resetRelativeAccuracy();
        double double16 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        double double20 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 97);
        double double25 = laguerreSolver7.solve((-1.0d), (double) 0.0f);
        double double28 = laguerreSolver7.solve((double) 1L, (-0.9190117652890386d));
        double double32 = laguerreSolver7.solve(636.4927919582647d, (double) (byte) -1, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 636.4927919582647d + "'", double32 == 636.4927919582647d);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setRelativeAccuracy((double) 0.0f);
        double double17 = laguerreSolver7.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray19 = polynomialFunction18.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction40.polynomialDerivative();
        double double44 = polynomialFunction42.value((double) 100);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = polynomialFunction42.polynomialDerivative();
        int int46 = polynomialFunction45.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction47 = polynomialFunction45.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction47);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        double double78 = laguerreSolver7.solve((double) (short) -1, Double.NaN);
        int int79 = laguerreSolver7.getMaximalIterationCount();
        double double80 = laguerreSolver7.getAbsoluteAccuracy();
        double double84 = laguerreSolver7.solve(1.2314965134057307d, 0.0d, 0.0d);
        laguerreSolver7.setFunctionValueAccuracy((-0.5403023058681398d));
        int int87 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0E-6d + "'", double80 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.2314965134057307d + "'", double84 == 1.2314965134057307d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.1752011936438014d);
        double double17 = laguerreSolver7.solve(32.0d, 3.141592653589793d, 1.0E-14d);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double19 = laguerreSolver7.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        int int16 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double17 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double21 = laguerreSolver7.solve((double) (short) -1, 1.2182829050172777d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: ");
        java.lang.String str3 = functionEvaluationException2.getPattern();
        java.lang.String str4 = functionEvaluationException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str3, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: " + "'", str4, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 100);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) -1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        java.lang.Object[] objArray10 = new java.lang.Object[] { convergenceException4, complex6, true };
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Object[] objArray18 = functionEvaluationException16.getArguments();
        java.lang.Throwable[] throwableArray19 = functionEvaluationException16.getSuppressed();
        java.lang.String str20 = functionEvaluationException16.getPattern();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.solve((-0.0d), 1.0E-14d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(2.718281828459045d);
        laguerreSolver7.resetAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.0d) + "'", double15 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8, throwable9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray8);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "org.apache.commons.math.ConvergenceException: ", objArray8);
        java.lang.Object[] objArray13 = maxIterationsExceededException12.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: ", objArray13, (java.lang.Throwable) functionEvaluationException15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, (java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) maxIterationsExceededException21);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.tan();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex1.log();
        org.apache.commons.math.complex.Complex complex6 = complex1.acos();
        org.apache.commons.math.complex.Complex complex7 = complex1.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.solve((double) ' ', 0.8414709848078965d);
        laguerreSolver7.setRelativeAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException4 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException4);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException6);
        java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction6.derivative();
        int int9 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver10.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray37 = polynomialFunction36.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction38 = polynomialFunction36.derivative();
        double double40 = polynomialFunction36.value(1.0d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction36);
        laguerreSolver41.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("hi!");
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: hi!", objArray12);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        java.lang.Object[] objArray26 = convergenceException25.getArguments();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray26);
        java.lang.Throwable[] throwableArray30 = convergenceException29.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        java.lang.Object[] objArray44 = new java.lang.Object[] { convergenceException38, complex40, true };
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray46, throwable47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray44, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", objArray44);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray44);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray53, throwable54);
        java.lang.Object[] objArray56 = convergenceException55.getArguments();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray44, (java.lang.Throwable) convergenceException55);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("hi!", objArray44, throwable59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray30, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray12);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", objArray12, (java.lang.Throwable) mathException66);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException68 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", objArray12);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray12);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(35.0d);
        double double17 = laguerreSolver7.solve(0.761594155955765d, 1.2314965134057307d);
        double double21 = laguerreSolver7.solve(1.5707963267948966d, 0.0d, 35.0297750331978d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.761594155955765d + "'", double17 == 0.761594155955765d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.5707963267948966d + "'", double21 == 1.5707963267948966d);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) (short) 100);
        int int40 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(10.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) (-1.0f));
        laguerreSolver7.setAbsoluteAccuracy(100.07996802557444d);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount(0);
        laguerreSolver7.setFunctionValueAccuracy(10.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 8);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = polynomialFunction22.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(univariateRealFunction23);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex6.tan();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex10.multiply(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex24.asin();
        org.apache.commons.math.complex.Complex complex26 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex3.add(complex26);
        double double28 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex3.tan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean31 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex32.tan();
        boolean boolean36 = complex30.equals((java.lang.Object) complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex47.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex43.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.acos();
        org.apache.commons.math.complex.Complex complex57 = complex37.divide(complex55);
        org.apache.commons.math.complex.Complex complex58 = complex29.divide(complex57);
        boolean boolean59 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = complex58.log();
        org.apache.commons.math.complex.Complex complex61 = complex58.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(7.0001840869445076d);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0E-14d, (double) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex2.cos();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = complex22.multiply(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex19.multiply(complex27);
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex33.atan();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        java.lang.Object[] objArray46 = new java.lang.Object[] { convergenceException40, complex42, true };
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray48, throwable49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", objArray46);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException53 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray46);
        java.lang.Throwable[] throwableArray54 = maxIterationsExceededException53.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray54);
        boolean boolean56 = complex33.equals((java.lang.Object) mathException55);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = complex66.atan();
        org.apache.commons.math.complex.Complex complex68 = complex67.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex68.atan();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = complex68.tanh();
        org.apache.commons.math.complex.Complex complex72 = complex33.add(complex68);
        org.apache.commons.math.complex.Complex complex73 = complex33.asin();
        boolean boolean74 = complex2.equals((java.lang.Object) complex33);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        double double33 = laguerreSolver7.getResult();
        double double36 = laguerreSolver7.solve(Double.NEGATIVE_INFINITY, (double) 'a');
        laguerreSolver7.setAbsoluteAccuracy((double) 'a');
        int int39 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.NEGATIVE_INFINITY + "'", double36 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException2);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        double[] doubleArray13 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        laguerreSolver18.setAbsoluteAccuracy((double) '#');
        laguerreSolver18.resetAbsoluteAccuracy();
        laguerreSolver18.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = complex30.log();
        org.apache.commons.math.complex.Complex complex34 = complex25.multiply(complex30);
        org.apache.commons.math.complex.Complex complex35 = complex30.sin();
        org.apache.commons.math.complex.Complex complex36 = complex30.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex30, complex37 };
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver18.solveAll(complexArray38, complex40);
        laguerreSolver18.resetRelativeAccuracy();
        double double44 = laguerreSolver18.getAbsoluteAccuracy();
        laguerreSolver18.resetFunctionValueAccuracy();
        boolean boolean46 = complex10.equals((java.lang.Object) laguerreSolver18);
        int int47 = laguerreSolver18.getMaximalIterationCount();
        double double48 = laguerreSolver18.getRelativeAccuracy();
        int int49 = laguerreSolver18.getIterationCount();
        laguerreSolver18.setFunctionValueAccuracy((double) 0.0f);
        double double54 = laguerreSolver18.solve(1.1432116289313778d, (double) 10.0f);
        laguerreSolver18.resetFunctionValueAccuracy();
        laguerreSolver18.setRelativeAccuracy(1.2182829050172777d);
        double double58 = laguerreSolver18.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0E-14d + "'", double48 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.1432116289313778d + "'", double54 == 1.1432116289313778d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.2182829050172777d + "'", double58 == 1.2182829050172777d);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex17.multiply(complex28);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex40.cosh();
        double double44 = complex43.abs();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt1z();
        org.apache.commons.math.complex.Complex complex46 = complex17.subtract(complex45);
        boolean boolean47 = complex45.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = complex45.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) 10L);
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = complex6.log();
        org.apache.commons.math.complex.Complex complex13 = complex6.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        int int80 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex16.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = complex20.tan();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex24.multiply(complex29);
        double double34 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex24.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = complex24.asin();
        org.apache.commons.math.complex.Complex complex37 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex22.multiply(complex24);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.cosh();
        double double20 = complex17.abs();
        org.apache.commons.math.complex.Complex complex21 = complex17.acos();
        double double22 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex23 = complex21.negate();
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        double double35 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        laguerreSolver7.setAbsoluteAccuracy(0.8862269254527579d);
        double double43 = laguerreSolver7.solve((double) 0L, (double) (short) -1);
        laguerreSolver7.setRelativeAccuracy(2.2360679774997907d);
        double double49 = laguerreSolver7.solve((double) (byte) 1, (double) 10, 2.59499345614249d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) '4');
        double double25 = laguerreSolver7.solve(0.0d, (double) (short) -1, (double) 100L);
        double double26 = laguerreSolver7.getFunctionValueAccuracy();
        double double27 = laguerreSolver7.getRelativeAccuracy();
        double double28 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) ' ');
        double double40 = laguerreSolver7.solve(1.0E-15d, (double) 1.0f, 0.38535742648327137d);
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 1);
        double double46 = laguerreSolver7.solve(1.0E-14d, 0.38535742648327137d, 0.5131355633916488d);
        laguerreSolver7.setRelativeAccuracy(2.4785912770698393d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-15d + "'", double40 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-14d + "'", double46 == 1.0E-14d);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        double[] doubleArray3 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        double double6 = polynomialFunction4.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        laguerreSolver8.setAbsoluteAccuracy((double) '#');
        laguerreSolver8.resetAbsoluteAccuracy();
        laguerreSolver8.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.sin();
        org.apache.commons.math.complex.Complex complex26 = complex20.tan();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex20, complex27 };
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = laguerreSolver8.solveAll(complexArray28, complex30);
        double double33 = laguerreSolver8.getRelativeAccuracy();
        int int34 = laguerreSolver8.getIterationCount();
        double[] doubleArray37 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = polynomialFunction38.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        laguerreSolver42.setAbsoluteAccuracy((double) '#');
        laguerreSolver42.resetAbsoluteAccuracy();
        laguerreSolver42.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.apache.commons.math.complex.Complex complex58 = complex49.multiply(complex54);
        org.apache.commons.math.complex.Complex complex59 = complex54.sin();
        org.apache.commons.math.complex.Complex complex60 = complex54.tan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex54, complex61 };
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver42.solveAll(complexArray62, complex64);
        laguerreSolver42.setRelativeAccuracy((double) 1.0f);
        laguerreSolver42.resetFunctionValueAccuracy();
        double double73 = laguerreSolver42.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver42.setFunctionValueAccuracy((double) 1L);
        double[] doubleArray78 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction79 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray78);
        double double81 = polynomialFunction79.value((double) 10.0f);
        int int82 = polynomialFunction79.degree();
        double[] doubleArray83 = polynomialFunction79.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction84 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = laguerreSolver42.solveAll(doubleArray83, (double) 100.0f);
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver8.solveAll(doubleArray83, Double.NEGATIVE_INFINITY);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray88);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-14d + "'", double33 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException25);
        functionEvaluationException7.addSuppressed((java.lang.Throwable) mathException25);
        java.lang.String str28 = functionEvaluationException7.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException7);
        java.lang.Object[] objArray30 = functionEvaluationException7.getArguments();
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double[] doubleArray4 = polynomialFunction3.getCoefficients();
        double double6 = polynomialFunction3.value((double) 100L);
        double double8 = polynomialFunction3.value(363.89859381747976d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray10 = polynomialFunction3.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        double double19 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray20);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray20, (java.lang.Throwable) convergenceException31);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray20, throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray20, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException39);
        java.lang.Object[] objArray43 = convergenceException42.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MathException: ", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        java.lang.Object[] objArray55 = new java.lang.Object[] { convergenceException49, complex51, true };
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray57, throwable58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray55, (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException60);
        java.lang.Object[] objArray63 = mathException62.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException64 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", objArray43, (java.lang.Throwable) maxIterationsExceededException64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException(20, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: ", objArray43);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        double double46 = laguerreSolver7.getResult();
        double double50 = laguerreSolver7.solve((double) (short) -1, (double) 52, (double) 35);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 1);
        int int53 = laguerreSolver7.getIterationCount();
        double double56 = laguerreSolver7.solve(2.0d, 1.5706900455763888d);
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2.0d + "'", double56 == 2.0d);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double90 = laguerreSolver7.getRelativeAccuracy();
        double double91 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0E-14d + "'", double90 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0E-15d + "'", double91 == 1.0E-15d);
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double double86 = laguerreSolver7.getFunctionValueAccuracy();
        double double87 = laguerreSolver7.getFunctionValueAccuracy();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 52.0d + "'", double87 == 52.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 100L);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.0E-6d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex37.tan();
        org.apache.commons.math.complex.Complex complex41 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex44.exp();
        org.apache.commons.math.complex.Complex complex47 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.asin();
        org.apache.commons.math.complex.Complex complex49 = complex46.asin();
        org.apache.commons.math.complex.Complex complex50 = complex4.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex49.exp();
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.5706900455763888d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded");
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        laguerreSolver20.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = complex27.multiply(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex32.sin();
        org.apache.commons.math.complex.Complex complex38 = complex32.tan();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex32, complex39 };
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver20.solveAll(complexArray40, complex42);
        boolean boolean45 = complex42.isInfinite();
        double double46 = complex42.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex61 = complex57.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.asin();
        org.apache.commons.math.complex.Complex complex63 = complex49.pow(complex61);
        org.apache.commons.math.complex.Complex complex64 = complex42.add(complex61);
        org.apache.commons.math.complex.Complex complex65 = complex61.cos();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex69.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = complex70.atan();
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.tanh();
        org.apache.commons.math.complex.Complex complex75 = complex67.divide(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex76.asin();
        org.apache.commons.math.complex.Complex complex78 = complex61.pow(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex11.divide(complex61);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        java.lang.Object[] objArray17 = new java.lang.Object[] { complex16 };
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        java.lang.Object[] objArray26 = new java.lang.Object[] { convergenceException20, complex22, true };
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray26, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", objArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray17, (java.lang.Throwable) mathException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "", objArray17);
        double double35 = functionEvaluationException34.getArgument();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) mathException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) mathException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", (java.lang.Throwable) convergenceException38);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-0.0d));
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1));
        double double24 = laguerreSolver7.solve((-0.0d), (double) (short) 100, (-0.73669189358273d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean4 = complex1.isNaN();
        double double5 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex19 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex19.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex19.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        boolean boolean28 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex32.add(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex38 = complex32.cos();
        org.apache.commons.math.complex.Complex complex39 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex32.tanh();
        boolean boolean41 = complex32.isNaN();
        org.apache.commons.math.complex.Complex complex42 = complex25.multiply(complex32);
        org.apache.commons.math.complex.Complex complex43 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        double double45 = complex43.abs();
        org.apache.commons.math.complex.Complex complex46 = complex7.pow(complex43);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.negate();
        org.apache.commons.math.complex.Complex complex53 = complex52.log();
        org.apache.commons.math.complex.Complex complex54 = complex50.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = complex7.add(complex55);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double double25 = laguerreSolver7.getRelativeAccuracy();
        int int26 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-14d + "'", double25 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        int int6 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        double[] doubleArray8 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        int int33 = laguerreSolver7.getIterationCount();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(Double.NaN);
        int int38 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double88 = laguerreSolver7.getResult();
        laguerreSolver7.setAbsoluteAccuracy(10.0d);
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 10);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        laguerreSolver10.resetAbsoluteAccuracy();
        laguerreSolver10.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex22.sin();
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex22, complex29 };
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = laguerreSolver10.solveAll(complexArray30, complex32);
        double double35 = laguerreSolver10.getRelativeAccuracy();
        double double36 = laguerreSolver10.getResult();
        laguerreSolver10.resetRelativeAccuracy();
        double double38 = laguerreSolver10.getAbsoluteAccuracy();
        double[] doubleArray41 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        double double44 = polynomialFunction42.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = polynomialFunction42.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver46 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction45);
        laguerreSolver46.setAbsoluteAccuracy((double) '#');
        laguerreSolver46.resetAbsoluteAccuracy();
        laguerreSolver46.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = complex53.multiply(complex58);
        org.apache.commons.math.complex.Complex complex63 = complex58.sin();
        org.apache.commons.math.complex.Complex complex64 = complex58.tan();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex58, complex65 };
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.log();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = laguerreSolver46.solveAll(complexArray66, complex68);
        laguerreSolver46.setRelativeAccuracy((double) 1.0f);
        laguerreSolver46.resetAbsoluteAccuracy();
        int int74 = laguerreSolver46.getIterationCount();
        double double75 = laguerreSolver46.getFunctionValueAccuracy();
        double[] doubleArray78 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction79 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray78);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray78);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction81 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray83 = laguerreSolver46.solveAll(doubleArray78, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction84 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray78);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction85 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray87 = laguerreSolver10.solveAll(doubleArray78, 4.0d);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "Evaluation failed for argument = 2.718", (java.lang.Object[]) complexArray87);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E-14d + "'", double35 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0E-6d + "'", double38 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction45);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        laguerreSolver17.resetAbsoluteAccuracy();
        laguerreSolver17.resetRelativeAccuracy();
        boolean boolean22 = complex5.equals((java.lang.Object) laguerreSolver17);
        laguerreSolver17.setMaximalIterationCount((int) (byte) 10);
        int int25 = laguerreSolver17.getMaximalIterationCount();
        laguerreSolver17.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double13 = laguerreSolver7.solve((double) (-1), 0.7853981633974483d);
        double[] doubleArray17 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver7.solveAll(doubleArray17, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = polynomialFunction22.derivative();
        double double25 = polynomialFunction22.value(3.9518054509189455d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(univariateRealFunction23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 636.4927919582647d + "'", double25 == 636.4927919582647d);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray14);
        int int22 = maxIterationsExceededException21.getMaxIterations();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException21);
        java.lang.Object[] objArray25 = convergenceException24.getArguments();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, (java.lang.Throwable) convergenceException27);
        java.lang.String str29 = convergenceException27.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        java.lang.String str31 = convergenceException27.getPattern();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = complex5.exp();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        double double20 = laguerreSolver19.getAbsoluteAccuracy();
        double double21 = laguerreSolver19.getFunctionValueAccuracy();
        laguerreSolver19.setAbsoluteAccuracy(35.0d);
        double double24 = laguerreSolver19.getFunctionValueAccuracy();
        double double25 = laguerreSolver19.getAbsoluteAccuracy();
        laguerreSolver19.resetFunctionValueAccuracy();
        double double27 = laguerreSolver19.getAbsoluteAccuracy();
        laguerreSolver19.resetMaximalIterationCount();
        laguerreSolver19.resetMaximalIterationCount();
        double double30 = laguerreSolver19.getFunctionValueAccuracy();
        boolean boolean31 = complex5.equals((java.lang.Object) laguerreSolver19);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0E-15d + "'", double21 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-15d + "'", double24 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0E-15d + "'", double30 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double[] doubleArray15 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver7.solveAll(doubleArray15, 0.6679493967289549d);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        java.lang.Object[] objArray3 = mathException1.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "");
        double double3 = functionEvaluationException2.getArgument();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex16.multiply(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.sin();
        org.apache.commons.math.complex.Complex complex27 = complex21.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex21, complex28 };
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver9.solveAll(complexArray29, complex31);
        laguerreSolver9.resetRelativeAccuracy();
        double double35 = laguerreSolver9.getAbsoluteAccuracy();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver9.solveAll(complexArray63, complex82);
        java.lang.Object[] objArray86 = new java.lang.Object[] {};
        java.lang.Throwable throwable87 = null;
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("", objArray86, throwable87);
        java.lang.Object[] objArray89 = convergenceException88.getArguments();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray63, (java.lang.Throwable) mathException90);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException91);
        java.lang.String str93 = convergenceException92.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) convergenceException92);
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException94);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E-6d + "'", double35 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str93, "org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray11, throwable12);
        java.lang.Object[] objArray14 = convergenceException13.getArguments();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, (java.lang.Throwable) maxIterationsExceededException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray21 = convergenceException19.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((-0.1838722778432016d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        java.lang.Object[] objArray34 = new java.lang.Object[] { convergenceException28, complex30, true };
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray36, throwable37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray34, (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("", objArray34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray34);
        int int42 = maxIterationsExceededException41.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException41);
        int int44 = maxIterationsExceededException41.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException41);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException41);
        int int47 = maxIterationsExceededException41.getMaxIterations();
        int int48 = maxIterationsExceededException41.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) maxIterationsExceededException41);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        int int21 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException22);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        java.lang.Object[] objArray35 = new java.lang.Object[] { convergenceException29, complex31, true };
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray35, (java.lang.Throwable) convergenceException39);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException40);
        java.lang.Throwable[] throwableArray42 = convergenceException40.getSuppressed();
        mathException22.addSuppressed((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException22);
        java.lang.String str45 = mathException22.getPattern();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException22);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        int int85 = laguerreSolver7.getMaximalIterationCount();
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double88 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 0L);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((-0.5403023058681398d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 52.0d + "'", double88 == 52.0d);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        convergenceException8.addSuppressed((java.lang.Throwable) convergenceException21);
        java.lang.Throwable[] throwableArray23 = convergenceException21.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(4.0d, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray23);
        java.lang.Object[] objArray29 = functionEvaluationException28.getArguments();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 100);
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.tan();
        org.apache.commons.math.complex.Complex complex16 = complex13.exp();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex20.tan();
        org.apache.commons.math.complex.Complex complex23 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        java.lang.Object[] objArray27 = new java.lang.Object[] { complex16, (short) 10, mathException18, complex23, complex25 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "", objArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "hi!", objArray27);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) 1, (java.lang.Throwable) convergenceException33);
        double double35 = functionEvaluationException34.getArgument();
        double double36 = functionEvaluationException34.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", objArray27, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray27, (java.lang.Throwable) mathException39);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: Maximal number of iterations (-1) exceeded", objArray27);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction4.derivative();
        double double9 = polynomialFunction4.value(1.5706900455763888d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex7.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        double double85 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int87 = laguerreSolver7.getMaximalIterationCount();
        double double91 = laguerreSolver7.solve((double) 0, 0.0d, 1.0d);
        double double92 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '#');
        int int96 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0E-15d + "'", double85 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0E-6d + "'", double92 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex20.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex26.acos();
        org.apache.commons.math.complex.Complex complex29 = complex9.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean31 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex32.tan();
        boolean boolean36 = complex30.equals((java.lang.Object) complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex45.cos();
        org.apache.commons.math.complex.Complex complex51 = complex45.atan();
        org.apache.commons.math.complex.Complex complex52 = complex37.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean54 = complex53.isInfinite();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex55.tan();
        boolean boolean59 = complex53.equals((java.lang.Object) complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = complex58.add(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex52.subtract(complex65);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex68.tan();
        org.apache.commons.math.complex.Complex complex72 = complex67.subtract(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.cos();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex77.add(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex86 = complex72.multiply(complex83);
        org.apache.commons.math.complex.Complex complex87 = complex72.cos();
        org.apache.commons.math.complex.Complex complex88 = complex66.subtract(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex28.pow(complex87);
        org.apache.commons.math.complex.Complex complex90 = complex87.acos();
        org.apache.commons.math.complex.Complex complex91 = complex90.conjugate();
        org.apache.commons.math.complex.Complex complex92 = complex90.sqrt();
        org.apache.commons.math.complex.Complex complex93 = complex90.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double[] doubleArray4 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        int int6 = polynomialFunction5.degree();
        double double8 = polynomialFunction5.value(35.0d);
        double[] doubleArray9 = polynomialFunction5.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((-0.0d));
        double double89 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 52.0d + "'", double89 == 52.0d);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        double[] doubleArray6 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver11.setAbsoluteAccuracy((double) '#');
        laguerreSolver11.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver11.getPolynomialFunction();
        double double16 = laguerreSolver11.getRelativeAccuracy();
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        laguerreSolver36.resetAbsoluteAccuracy();
        laguerreSolver36.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex48);
        org.apache.commons.math.complex.Complex complex53 = complex48.sin();
        org.apache.commons.math.complex.Complex complex54 = complex48.tan();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex48, complex55 };
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver36.solveAll(complexArray56, complex58);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex65.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex66.log();
        org.apache.commons.math.complex.Complex complex70 = complex64.pow(complex66);
        org.apache.commons.math.complex.Complex complex71 = laguerreSolver24.solve(complexArray56, complex64);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex76.log();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex83 = complex81.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex79.add(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.conjugate();
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex75.subtract(complex86);
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver11.solveAll(complexArray56, complex87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray88);
        java.lang.Object[] objArray91 = new java.lang.Object[] {};
        java.lang.Throwable throwable92 = null;
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("", objArray91, throwable92);
        java.lang.Object[] objArray94 = convergenceException93.getArguments();
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException93);
        org.apache.commons.math.ConvergenceException convergenceException96 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray88, (java.lang.Throwable) mathException95);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("", (java.lang.Throwable) convergenceException96);
        org.apache.commons.math.ConvergenceException convergenceException98 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) convergenceException96);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[]");
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(100.0d, (double) (-1L));
        double double3 = complex2.getReal();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        boolean boolean11 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex15 = complex9.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex38.subtract(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex34.multiply(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex15.subtract(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex45.tan();
        org.apache.commons.math.complex.Complex complex50 = complex2.pow(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.acos();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        double double53 = complex51.getReal();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex1.pow(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex1.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        org.apache.commons.math.complex.Complex complex16 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex14.exp();
        org.apache.commons.math.complex.Complex complex18 = complex14.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) '4');
        double double41 = laguerreSolver7.solve((double) 1L, (double) ' ', (double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver7.getPolynomialFunction();
        double double45 = laguerreSolver7.solve(32.0d, (double) (-1.0f));
        double double46 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 'a');
        int int49 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (short) 1);
        double double52 = laguerreSolver7.getRelativeAccuracy();
        double double53 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount(35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 32.0d + "'", double45 == 32.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-14d + "'", double46 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0E-14d + "'", double52 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        org.apache.commons.math.complex.Complex complex16 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = complex11.pow(complex13);
        org.apache.commons.math.complex.Complex complex18 = complex13.cos();
        org.apache.commons.math.complex.Complex complex19 = complex13.atan();
        org.apache.commons.math.complex.Complex complex20 = complex13.tan();
        org.apache.commons.math.complex.Complex complex21 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex22 = complex5.log();
        boolean boolean23 = complex5.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.cos();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex14.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex20.cosh();
        double double24 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex25.atan();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex25.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex3.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        int int9 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = laguerreSolver15.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex28.tan();
        org.apache.commons.math.complex.Complex complex32 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.tan();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex36.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex32.add(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex16.multiply(complex32);
        org.apache.commons.math.complex.Complex complex47 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt1z();
        org.apache.commons.math.complex.Complex complex49 = complex47.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        double double40 = laguerreSolver7.getResult();
        double double41 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((-0.73669189358273d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = laguerreSolver7.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0E-14d + "'", double41 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = complex6.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex6.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt1z();
        org.apache.commons.math.complex.Complex complex18 = complex16.sqrt();
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        java.lang.Object[] objArray35 = new java.lang.Object[] { convergenceException29, complex31, true };
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray35, (java.lang.Throwable) convergenceException39);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException40);
        java.lang.Throwable[] throwableArray42 = convergenceException40.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        java.lang.Object[] objArray54 = new java.lang.Object[] { convergenceException48, complex50, true };
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray56, throwable57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray54, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException59);
        java.lang.String str62 = convergenceException59.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException(1);
        convergenceException63.addSuppressed((java.lang.Throwable) maxIterationsExceededException66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException(35.0d, (java.lang.Throwable) maxIterationsExceededException66);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray42, (java.lang.Throwable) functionEvaluationException68);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException70 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray42);
        boolean boolean71 = complex16.equals((java.lang.Object) throwableArray42);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        laguerreSolver7.setRelativeAccuracy((-0.0d));
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        double double47 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(97.0d);
        laguerreSolver7.setRelativeAccuracy(1.2314965134057307d);
        int int52 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0E-15d + "'", double47 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
        java.lang.String str5 = convergenceException4.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Throwable) functionEvaluationException6);
        java.lang.Throwable[] throwableArray8 = functionEvaluationException6.getSuppressed();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!" + "'", str5, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(throwableArray8);
    }
}

